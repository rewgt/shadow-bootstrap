(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var emptyObject = require('fbjs/lib/emptyObject');
var _invariant = require('fbjs/lib/invariant');

if (process.env.NODE_ENV !== 'production') {
  var warning = require('fbjs/lib/warning');
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign(
        {},
        Constructor.childContextTypes,
        childContextTypes
      );
    },
    contextTypes: function(Constructor, contextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, contextTypes, 'context');
      }
      Constructor.contextTypes = _assign(
        {},
        Constructor.contextTypes,
        contextTypes
      );
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(
          Constructor.getDefaultProps,
          getDefaultProps
        );
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        if (process.env.NODE_ENV !== 'production') {
          warning(
            typeof typeDef[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
              'React.PropTypes.',
            Constructor.displayName || 'ReactClass',
            ReactPropTypeLocationNames[location],
            propName
          );
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name)
      ? ReactClassInterface[name]
      : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(
        specPolicy === 'OVERRIDE_BASE',
        'ReactClassInterface: You are attempting to override ' +
          '`%s` from your class specification. Ensure that your method names ' +
          'do not overlap with React methods.',
        name
      );
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(
        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
        'ReactClassInterface: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be due ' +
          'to a mixin.',
        name
      );
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (process.env.NODE_ENV !== 'production') {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (process.env.NODE_ENV !== 'production') {
          warning(
            isMixinValid,
            "%s: You're attempting to include a mixin that is either null " +
              'or not an object. Check the mixins included by the component, ' +
              'as well as any mixins they include themselves. ' +
              'Expected object but got %s.',
            Constructor.displayName || 'ReactClass',
            spec === null ? null : typeofSpec
          );
        }
      }

      return;
    }

    _invariant(
      typeof spec !== 'function',
      "ReactClass: You're attempting to " +
        'use a component class or function as a mixin. Instead, just use a ' +
        'regular object.'
    );
    _invariant(
      !isValidElement(spec),
      "ReactClass: You're attempting to " +
        'use a component as a mixin. Instead, just use a regular object.'
    );

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind =
          isFunction &&
          !isReactClassMethod &&
          !isAlreadyDefined &&
          spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(
              isReactClassMethod &&
                (specPolicy === 'DEFINE_MANY_MERGED' ||
                  specPolicy === 'DEFINE_MANY'),
              'ReactClass: Unexpected spec policy %s for key %s ' +
                'when mixing in component specs.',
              specPolicy,
              name
            );

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (process.env.NODE_ENV !== 'production') {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(
        !isReserved,
        'ReactClass: You are attempting to define a reserved ' +
          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
          'as an instance property instead; it will still be accessible on the ' +
          'constructor.',
        name
      );

      var isInherited = name in Constructor;
      _invariant(
        !isInherited,
        'ReactClass: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be ' +
          'due to a mixin.',
        name
      );
      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(
      one && two && typeof one === 'object' && typeof two === 'object',
      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
    );

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(
          one[key] === undefined,
          'mergeIntoWithNoDuplicateKeys(): ' +
            'Tried to merge two objects with the same key: `%s`. This conflict ' +
            'may be due to a mixin; in particular, this may be caused by two ' +
            'getInitialState() or getDefaultProps() methods returning objects ' +
            'with clashing keys.',
          key
        );
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (process.env.NODE_ENV !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (
          var _len = arguments.length,
            args = Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): React component methods may only be bound to the ' +
                'component instance. See %s',
              componentName
            );
          }
        } else if (!args.length) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): You are binding a component method to the component. ' +
                'React does this for you automatically in a high-performance ' +
                'way, so you can safely remove this call. See %s',
              componentName
            );
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function() {
      if (process.env.NODE_ENV !== 'production') {
        warning(
          this.__didWarnIsMounted,
          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
            'subscriptions and pending requests in componentWillUnmount to ' +
            'prevent memory leaks.',
          (this.constructor && this.constructor.displayName) ||
            this.name ||
            'Component'
        );
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function() {};
  _assign(
    ReactClassComponent.prototype,
    ReactComponent.prototype,
    ReactClassMixin
  );

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function(props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
            'JSX instead. See: https://fb.me/react-legacyfactory'
        );
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (
          initialState === undefined &&
          this.getInitialState._isMockFunction
        ) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      );

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    );

    if (process.env.NODE_ENV !== 'production') {
      warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
        spec.displayName || 'A component'
      );
      warning(
        !Constructor.prototype.componentWillRecieveProps,
        '%s has a method called ' +
          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;

}).call(this,require('_process'))
},{"_process":202,"fbjs/lib/emptyObject":4,"fbjs/lib/invariant":5,"fbjs/lib/warning":6,"object-assign":7}],2:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var React = require('react');
var factory = require('./factory');

if (typeof React === 'undefined') {
  throw Error(
    'create-react-class could not find the React object. If you are using script tags, ' +
      'make sure that React is being loaded before create-react-class.'
  );
}

// Hack to grab NoopUpdateQueue from isomorphic React
var ReactNoopUpdateQueue = new React.Component().updater;

module.exports = factory(
  React.Component,
  React.isValidElement,
  ReactNoopUpdateQueue
);

},{"./factory":1,"react":198}],3:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],4:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))
},{"_process":202}],5:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))
},{"_process":202}],6:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))
},{"./emptyFunction":3,"_process":202}],7:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],8:[function(require,module,exports){
'use strict';

module.exports = require('./lib/ReactDOM');

},{"./lib/ReactDOM":38}],9:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;
},{}],10:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var focusNode = require('fbjs/lib/focusNode');

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactDOMComponentTree":41,"fbjs/lib/focusNode":144}],11:[function(require,module,exports){
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventPropagators":27,"./FallbackCompositionState":28,"./SyntheticCompositionEvent":92,"./SyntheticInputEvent":96,"fbjs/lib/ExecutionEnvironment":136}],12:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],13:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInstrumentation = require('./ReactInstrumentation');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {
  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styleValue, component);
        }
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styles[styleName], component);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (isCustomProperty) {
        style.setProperty(styleName, styleValue);
      } else if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }
};

module.exports = CSSPropertyOperations;
}).call(this,require('_process'))
},{"./CSSProperty":12,"./ReactInstrumentation":70,"./dangerousStyleValue":109,"_process":202,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/camelizeStyleName":138,"fbjs/lib/hyphenateStyleName":149,"fbjs/lib/memoizeStringOnly":153,"fbjs/lib/warning":157}],14:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = require('./PooledClass');

var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
}).call(this,require('_process'))
},{"./PooledClass":32,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],15:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var inputValueTracking = require('./inputValueTracking');
var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
  event.type = 'change';
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getInstIfValueChanged(targetInst, nativeEvent) {
  var updated = inputValueTracking.updateValueIfChanged(targetInst);
  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;

  if (updated || simulated) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}

function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.

  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst, nativeEvent);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topClick') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes,

  _allowSimulatedPassThrough: true,
  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }
};

module.exports = ChangeEventPlugin;
},{"./EventPluginHub":24,"./EventPropagators":27,"./ReactDOMComponentTree":41,"./ReactUpdates":85,"./SyntheticEvent":94,"./getEventTarget":117,"./inputValueTracking":123,"./isEventSupported":125,"./isTextInputElement":126,"fbjs/lib/ExecutionEnvironment":136}],16:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMLazyTree = require('./DOMLazyTree');
var Danger = require('./Danger');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstrumentation = require('./ReactInstrumentation');

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (process.env.NODE_ENV !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {
  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (process.env.NODE_ENV !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: {
                toIndex: update.toIndex,
                content: update.content.toString()
              }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }
};

module.exports = DOMChildrenOperations;
}).call(this,require('_process'))
},{"./DOMLazyTree":17,"./Danger":21,"./ReactDOMComponentTree":41,"./ReactInstrumentation":70,"./createMicrosoftUnsafeLocalFunction":108,"./setInnerHTML":130,"./setTextContent":131,"_process":202}],17:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMNamespaces = require('./DOMNamespaces');
var setInnerHTML = require('./setInnerHTML');

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');
var setTextContent = require('./setTextContent');

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;
},{"./DOMNamespaces":18,"./createMicrosoftUnsafeLocalFunction":108,"./setInnerHTML":130,"./setTextContent":131}],18:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;
},{}],19:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {
  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
}).call(this,require('_process'))
},{"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],20:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstrumentation = require('./ReactInstrumentation');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {
  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }
};

module.exports = DOMPropertyOperations;
}).call(this,require('_process'))
},{"./DOMProperty":19,"./ReactDOMComponentTree":41,"./ReactInstrumentation":70,"./quoteAttributeValueForBrowser":127,"_process":202,"fbjs/lib/warning":157}],21:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMLazyTree = require('./DOMLazyTree');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');

var Danger = {
  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }
};

module.exports = Danger;
}).call(this,require('_process'))
},{"./DOMLazyTree":17,"./reactProdInvariant":128,"_process":202,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/createNodesFromMarkup":141,"fbjs/lib/emptyFunction":142,"fbjs/lib/invariant":150}],22:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;
},{}],23:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

module.exports = EnterLeaveEventPlugin;
},{"./EventPropagators":27,"./ReactDOMComponentTree":41,"./SyntheticMouseEvent":98}],24:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {
  /**
   * Methods for injecting dependencies.
   */
  injection: {
    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }
};

module.exports = EventPluginHub;
}).call(this,require('_process'))
},{"./EventPluginRegistry":25,"./EventPluginUtils":26,"./ReactErrorUtils":61,"./accumulateInto":105,"./forEachAccumulated":113,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],25:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (process.env.NODE_ENV !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {
  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }
};

module.exports = EventPluginRegistry;
}).call(this,require('_process'))
},{"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],26:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}).call(this,require('_process'))
},{"./ReactErrorUtils":61,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150,"fbjs/lib/warning":157}],27:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');
var EventPluginUtils = require('./EventPluginUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var warning = require('fbjs/lib/warning');

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}).call(this,require('_process'))
},{"./EventPluginHub":24,"./EventPluginUtils":26,"./accumulateInto":105,"./forEachAccumulated":113,"_process":202,"fbjs/lib/warning":157}],28:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');

var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./PooledClass":32,"./getTextContentAccessor":121,"object-assign":158}],29:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {},
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":19}],30:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;
},{}],31:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypesSecret = require('./ReactPropTypesSecret');
var propTypesFactory = require('prop-types/factory');

var React = require('react/lib/React');
var PropTypes = propTypesFactory(React.isValidElement);

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
}).call(this,require('_process'))
},{"./ReactPropTypesSecret":78,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150,"fbjs/lib/warning":157,"prop-types/factory":160,"react/lib/React":165}],32:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
}).call(this,require('_process'))
},{"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],33:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ViewportMetrics = require('./ViewportMetrics');

var getVendorPrefixedEventName = require('./getVendorPrefixedEventName');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {
          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }
});

module.exports = ReactBrowserEventEmitter;
},{"./EventPluginRegistry":25,"./ReactEventEmitterMixin":62,"./ViewportMetrics":104,"./getVendorPrefixedEventName":122,"./isEventSupported":125,"object-assign":158}],34:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
    }
    if (!keyUnique) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
  {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (process.env.NODE_ENV !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
  {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }
};

module.exports = ReactChildReconciler;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":30,"./ReactReconciler":80,"./instantiateReactComponent":124,"./shouldUpdateReactComponent":132,"./traverseAllChildren":133,"_process":202,"fbjs/lib/warning":157,"react/lib/ReactComponentTreeHook":168}],35:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {
  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
};

module.exports = ReactComponentBrowserEnvironment;
},{"./DOMChildrenOperations":16,"./ReactDOMIDOperations":45}],36:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {
  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }
};

module.exports = ReactComponentEnvironment;
}).call(this,require('_process'))
},{"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],37:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var React = require('react/lib/React');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactErrorUtils = require('./ReactErrorUtils');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactNodeTypes = require('./ReactNodeTypes');
var ReactReconciler = require('./ReactReconciler');

if (process.env.NODE_ENV !== 'production') {
  var checkReactTypeSpec = require('./checkReactTypeSpec');
}

var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shallowEqual = require('fbjs/lib/shallowEqual');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {
  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (process.env.NODE_ENV !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if (process.env.NODE_ENV !== 'production') {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (process.env.NODE_ENV !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (process.env.NODE_ENV !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (process.env.NODE_ENV !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (process.env.NODE_ENV !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if (process.env.NODE_ENV !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (process.env.NODE_ENV !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (process.env.NODE_ENV !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if (process.env.NODE_ENV !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null
};

module.exports = ReactCompositeComponent;
}).call(this,require('_process'))
},{"./ReactComponentEnvironment":36,"./ReactErrorUtils":61,"./ReactInstanceMap":69,"./ReactInstrumentation":70,"./ReactNodeTypes":75,"./ReactReconciler":80,"./checkReactTypeSpec":107,"./reactProdInvariant":128,"./shouldUpdateReactComponent":132,"_process":202,"fbjs/lib/emptyObject":143,"fbjs/lib/invariant":150,"fbjs/lib/shallowEqual":156,"fbjs/lib/warning":157,"object-assign":158,"react/lib/React":165,"react/lib/ReactCurrentOwner":169}],38:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactMount = require('./ReactMount');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdates = require('./ReactUpdates');
var ReactVersion = require('./ReactVersion');

var findDOMNode = require('./findDOMNode');
var getHostComponentFromComposite = require('./getHostComponentFromComposite');
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
  /* eslint-enable camelcase */
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if (process.env.NODE_ENV !== 'production') {
  var ReactInstrumentation = require('./ReactInstrumentation');
  var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');
  var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');
  var ReactDOMInvalidARIAHook = require('./ReactDOMInvalidARIAHook');

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;
}).call(this,require('_process'))
},{"./ReactDOMComponentTree":41,"./ReactDOMInvalidARIAHook":47,"./ReactDOMNullInputValuePropHook":48,"./ReactDOMUnknownPropertyHook":55,"./ReactDefaultInjection":58,"./ReactInstrumentation":70,"./ReactMount":73,"./ReactReconciler":80,"./ReactUpdates":85,"./ReactVersion":86,"./findDOMNode":111,"./getHostComponentFromComposite":118,"./renderSubtreeIntoContainer":129,"_process":202,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/warning":157}],39:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMLazyTree = require('./DOMLazyTree');
var DOMNamespaces = require('./DOMNamespaces');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactMultiChild = require('./ReactMultiChild');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');

var emptyFunction = require('fbjs/lib/emptyFunction');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var shallowEqual = require('fbjs/lib/shallowEqual');
var inputValueTracking = require('./inputValueTracking');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { string: true, number: true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trackInputValue() {
  inputValueTracking.track(this);
}

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':
      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

var newlineEatingTags = {
  listing: true,
  pre: true,
  textarea: true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (process.env.NODE_ENV !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {
  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (process.env.NODE_ENV !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (process.env.NODE_ENV !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
      case 'textarea':
        inputValueTracking.stopTracking(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (process.env.NODE_ENV !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }
};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
}).call(this,require('_process'))
},{"./AutoFocusUtils":10,"./CSSPropertyOperations":13,"./DOMLazyTree":17,"./DOMNamespaces":18,"./DOMProperty":19,"./DOMPropertyOperations":20,"./EventPluginHub":24,"./EventPluginRegistry":25,"./ReactBrowserEventEmitter":33,"./ReactDOMComponentFlags":40,"./ReactDOMComponentTree":41,"./ReactDOMInput":46,"./ReactDOMOption":49,"./ReactDOMSelect":50,"./ReactDOMTextarea":53,"./ReactInstrumentation":70,"./ReactMultiChild":74,"./ReactServerRenderingTransaction":82,"./escapeTextContentForBrowser":110,"./inputValueTracking":123,"./isEventSupported":125,"./reactProdInvariant":128,"./validateDOMNesting":134,"_process":202,"fbjs/lib/emptyFunction":142,"fbjs/lib/invariant":150,"fbjs/lib/shallowEqual":156,"fbjs/lib/warning":157,"object-assign":158}],40:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;
},{}],41:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMProperty = require('./DOMProperty');
var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');

var invariant = require('fbjs/lib/invariant');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
}).call(this,require('_process'))
},{"./DOMProperty":19,"./ReactDOMComponentFlags":40,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],42:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var validateDOMNesting = require('./validateDOMNesting');

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (process.env.NODE_ENV !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
}).call(this,require('_process'))
},{"./validateDOMNesting":134,"_process":202}],43:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var DOMLazyTree = require('./DOMLazyTree');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;
},{"./DOMLazyTree":17,"./ReactDOMComponentTree":41,"object-assign":158}],44:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;
},{}],45:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {
  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;
},{"./DOMChildrenOperations":16,"./ReactDOMComponentTree":41}],46:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var DOMPropertyOperations = require('./DOMPropertyOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      controlled: isControlled(props)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (process.env.NODE_ENV !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      if (value === 0 && node.value === '') {
        node.value = '0';
        // Note: IE9 reports a number inputs as 'text', so check props instead.
      } else if (props.type === 'number') {
        // Simulate `input.valueAsNumber`. IE9 does not support it
        var valueAsNumber = parseFloat(node.value, 10) || 0;

        if (
        // eslint-disable-next-line
        value != valueAsNumber ||
        // eslint-disable-next-line
        value == valueAsNumber && node.value != value) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
      } else if (node.value !== '' + value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
}).call(this,require('_process'))
},{"./DOMPropertyOperations":20,"./LinkedValueUtils":31,"./ReactDOMComponentTree":41,"./ReactUpdates":85,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150,"fbjs/lib/warning":157,"object-assign":158}],47:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;
}).call(this,require('_process'))
},{"./DOMProperty":19,"_process":202,"fbjs/lib/warning":157,"react/lib/ReactComponentTreeHook":168}],48:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;
}).call(this,require('_process'))
},{"_process":202,"fbjs/lib/warning":157,"react/lib/ReactComponentTreeHook":168}],49:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var React = require('react/lib/React');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMSelect = require('./ReactDOMSelect');

var warning = require('fbjs/lib/warning');
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }
};

module.exports = ReactDOMOption;
}).call(this,require('_process'))
},{"./ReactDOMComponentTree":41,"./ReactDOMSelect":50,"_process":202,"fbjs/lib/warning":157,"object-assign":158,"react/lib/React":165}],50:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
}).call(this,require('_process'))
},{"./LinkedValueUtils":31,"./ReactDOMComponentTree":41,"./ReactUpdates":85,"_process":202,"fbjs/lib/warning":157,"object-assign":158}],51:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":120,"./getTextContentAccessor":121,"fbjs/lib/ExecutionEnvironment":136}],52:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMLazyTree = require('./DOMLazyTree');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {
  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMTextComponent;
}).call(this,require('_process'))
},{"./DOMChildrenOperations":16,"./DOMLazyTree":17,"./ReactDOMComponentTree":41,"./escapeTextContentForBrowser":110,"./reactProdInvariant":128,"./validateDOMNesting":134,"_process":202,"fbjs/lib/invariant":150,"object-assign":158}],53:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
}).call(this,require('_process'))
},{"./LinkedValueUtils":31,"./ReactDOMComponentTree":41,"./ReactUpdates":85,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150,"fbjs/lib/warning":157,"object-assign":158}],54:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
}).call(this,require('_process'))
},{"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],55:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function (debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;
}).call(this,require('_process'))
},{"./DOMProperty":19,"./EventPluginRegistry":25,"_process":202,"fbjs/lib/warning":157,"react/lib/ReactComponentTreeHook":168}],56:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactInvalidSetStateWarningHook = require('./ReactInvalidSetStateWarningHook');
var ReactHostOperationHistoryHook = require('./ReactHostOperationHistoryHook');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var performanceNow = require('fbjs/lib/performanceNow');
var warning = require('fbjs/lib/warning');

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  if (measurementName) {
    performance.clearMeasures(measurementName);
  }
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
}).call(this,require('_process'))
},{"./ReactHostOperationHistoryHook":66,"./ReactInvalidSetStateWarningHook":71,"_process":202,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/performanceNow":155,"fbjs/lib/warning":157,"react/lib/ReactComponentTreeHook":168}],57:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./ReactUpdates":85,"./Transaction":103,"fbjs/lib/emptyFunction":142,"object-assign":158}],58:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ARIADOMPropertyConfig = require('./ARIADOMPropertyConfig');
var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMEmptyComponent = require('./ReactDOMEmptyComponent');
var ReactDOMTreeTraversal = require('./ReactDOMTreeTraversal');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');
var SelectEventPlugin = require('./SelectEventPlugin');
var SimpleEventPlugin = require('./SimpleEventPlugin');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};
},{"./ARIADOMPropertyConfig":9,"./BeforeInputEventPlugin":11,"./ChangeEventPlugin":15,"./DefaultEventPluginOrder":22,"./EnterLeaveEventPlugin":23,"./HTMLDOMPropertyConfig":29,"./ReactComponentBrowserEnvironment":35,"./ReactDOMComponent":39,"./ReactDOMComponentTree":41,"./ReactDOMEmptyComponent":43,"./ReactDOMTextComponent":52,"./ReactDOMTreeTraversal":54,"./ReactDefaultBatchingStrategy":57,"./ReactEventListener":63,"./ReactInjection":67,"./ReactReconcileTransaction":79,"./SVGDOMPropertyConfig":87,"./SelectEventPlugin":88,"./SimpleEventPlugin":89}],59:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;
},{}],60:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{}],61:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}).call(this,require('_process'))
},{"_process":202}],62:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {
  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":24}],63:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./PooledClass":32,"./ReactDOMComponentTree":41,"./ReactUpdates":85,"./getEventTarget":117,"fbjs/lib/EventListener":135,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/getUnboundedScrollPosition":147,"object-assign":158}],64:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;
},{}],65:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
}).call(this,require('_process'))
},{"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],66:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;
},{}],67:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var EventPluginUtils = require('./EventPluginUtils');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactHostComponent = require('./ReactHostComponent');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":19,"./EventPluginHub":24,"./EventPluginUtils":26,"./ReactBrowserEventEmitter":33,"./ReactComponentEnvironment":36,"./ReactEmptyComponent":60,"./ReactHostComponent":65,"./ReactUpdates":85}],68:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {
  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":51,"fbjs/lib/containsNode":139,"fbjs/lib/focusNode":144,"fbjs/lib/getActiveElement":145}],69:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {
  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }
};

module.exports = ReactInstanceMap;
},{}],70:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (process.env.NODE_ENV !== 'production') {
  var ReactDebugTool = require('./ReactDebugTool');
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
}).call(this,require('_process'))
},{"./ReactDebugTool":56,"_process":202}],71:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var warning = require('fbjs/lib/warning');

if (process.env.NODE_ENV !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
}).call(this,require('_process'))
},{"_process":202,"fbjs/lib/warning":157}],72:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":106}],73:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMLazyTree = require('./DOMLazyTree');
var DOMProperty = require('./DOMProperty');
var React = require('react/lib/React');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMContainerInfo = require('./ReactDOMContainerInfo');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactFeatureFlags = require('./ReactFeatureFlags');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, {
      child: nextElement
    });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if (process.env.NODE_ENV !== 'production') {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;
}).call(this,require('_process'))
},{"./DOMLazyTree":17,"./DOMProperty":19,"./ReactBrowserEventEmitter":33,"./ReactDOMComponentTree":41,"./ReactDOMContainerInfo":42,"./ReactDOMFeatureFlags":44,"./ReactFeatureFlags":64,"./ReactInstanceMap":69,"./ReactInstrumentation":70,"./ReactMarkupChecksum":72,"./ReactReconciler":80,"./ReactUpdateQueue":84,"./ReactUpdates":85,"./instantiateReactComponent":124,"./reactProdInvariant":128,"./setInnerHTML":130,"./shouldUpdateReactComponent":132,"_process":202,"fbjs/lib/emptyObject":143,"fbjs/lib/invariant":150,"fbjs/lib/warning":157,"react/lib/React":165,"react/lib/ReactCurrentOwner":169}],74:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var emptyFunction = require('fbjs/lib/emptyFunction');
var flattenChildren = require('./flattenChildren');
var invariant = require('fbjs/lib/invariant');

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {
  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {
    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (process.env.NODE_ENV !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (process.env.NODE_ENV !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }
  }
};

module.exports = ReactMultiChild;
}).call(this,require('_process'))
},{"./ReactChildReconciler":34,"./ReactComponentEnvironment":36,"./ReactInstanceMap":69,"./ReactInstrumentation":70,"./ReactReconciler":80,"./flattenChildren":112,"./reactProdInvariant":128,"_process":202,"fbjs/lib/emptyFunction":142,"fbjs/lib/invariant":150,"react/lib/ReactCurrentOwner":169}],75:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var React = require('react/lib/React');

var invariant = require('fbjs/lib/invariant');

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
}).call(this,require('_process'))
},{"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150,"react/lib/React":165}],76:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }
};

module.exports = ReactOwner;
}).call(this,require('_process'))
},{"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],77:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}).call(this,require('_process'))
},{"_process":202}],78:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
},{}],79:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactInputSelection = require('./ReactInputSelection');
var ReactInstrumentation = require('./ReactInstrumentation');
var Transaction = require('./Transaction');
var ReactUpdateQueue = require('./ReactUpdateQueue');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
}).call(this,require('_process'))
},{"./CallbackQueue":14,"./PooledClass":32,"./ReactBrowserEventEmitter":33,"./ReactInputSelection":68,"./ReactInstrumentation":70,"./ReactUpdateQueue":84,"./Transaction":103,"_process":202,"object-assign":158}],80:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactRef = require('./ReactRef');
var ReactInstrumentation = require('./ReactInstrumentation');

var warning = require('fbjs/lib/warning');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
  {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }
};

module.exports = ReactReconciler;
}).call(this,require('_process'))
},{"./ReactInstrumentation":70,"./ReactRef":81,"_process":202,"fbjs/lib/warning":157}],81:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":76}],82:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');
var Transaction = require('./Transaction');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactServerUpdateQueue = require('./ReactServerUpdateQueue');

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
}).call(this,require('_process'))
},{"./PooledClass":32,"./ReactInstrumentation":70,"./ReactServerUpdateQueue":83,"./Transaction":103,"_process":202,"object-assign":158}],83:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = require('./ReactUpdateQueue');

var warning = require('fbjs/lib/warning');

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
}).call(this,require('_process'))
},{"./ReactUpdateQueue":84,"_process":202,"fbjs/lib/warning":157}],84:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    // Future-proof 15.5
    if (callback !== undefined && callback !== null) {
      ReactUpdateQueue.validateCallback(callback, 'replaceState');
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
    }

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }
};

module.exports = ReactUpdateQueue;
}).call(this,require('_process'))
},{"./ReactInstanceMap":69,"./ReactInstrumentation":70,"./ReactUpdates":85,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150,"fbjs/lib/warning":157,"react/lib/ReactCurrentOwner":169}],85:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactFeatureFlags = require('./ReactFeatureFlags');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}).call(this,require('_process'))
},{"./CallbackQueue":14,"./PooledClass":32,"./ReactFeatureFlags":64,"./ReactReconciler":80,"./Transaction":103,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150,"object-assign":158}],86:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

module.exports = '15.6.1';
},{}],87:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;
},{}],88:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var shallowEqual = require('fbjs/lib/shallowEqual');

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventPropagators":27,"./ReactDOMComponentTree":41,"./ReactInputSelection":68,"./SyntheticEvent":94,"./isTextInputElement":126,"fbjs/lib/ExecutionEnvironment":136,"fbjs/lib/getActiveElement":145,"fbjs/lib/shallowEqual":156}],89:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var SyntheticAnimationEvent = require('./SyntheticAnimationEvent');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticTransitionEvent = require('./SyntheticTransitionEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }
};

module.exports = SimpleEventPlugin;
}).call(this,require('_process'))
},{"./EventPropagators":27,"./ReactDOMComponentTree":41,"./SyntheticAnimationEvent":90,"./SyntheticClipboardEvent":91,"./SyntheticDragEvent":93,"./SyntheticEvent":94,"./SyntheticFocusEvent":95,"./SyntheticKeyboardEvent":97,"./SyntheticMouseEvent":98,"./SyntheticTouchEvent":99,"./SyntheticTransitionEvent":100,"./SyntheticUIEvent":101,"./SyntheticWheelEvent":102,"./getEventCharCode":114,"./reactProdInvariant":128,"_process":202,"fbjs/lib/EventListener":135,"fbjs/lib/emptyFunction":142,"fbjs/lib/invariant":150}],90:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;
},{"./SyntheticEvent":94}],91:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":94}],92:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":94}],93:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":98}],94:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');

var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (process.env.NODE_ENV !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (process.env.NODE_ENV !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (process.env.NODE_ENV !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (process.env.NODE_ENV !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

if (process.env.NODE_ENV !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
}).call(this,require('_process'))
},{"./PooledClass":32,"_process":202,"fbjs/lib/emptyFunction":142,"fbjs/lib/warning":157,"object-assign":158}],95:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":101}],96:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":94}],97:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":101,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],98:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":101,"./ViewportMetrics":104,"./getEventModifierState":116}],99:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":101,"./getEventModifierState":116}],100:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;
},{"./SyntheticEvent":94}],101:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":94,"./getEventTarget":117}],102:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":98}],103:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /* eslint-disable space-before-function-paren */

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    /* eslint-enable space-before-function-paren */
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
}).call(this,require('_process'))
},{"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],104:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ViewportMetrics = {
  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }
};

module.exports = ViewportMetrics;
},{}],105:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}).call(this,require('_process'))
},{"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150}],106:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],107:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactPropTypesSecret = require('./ReactPropTypesSecret');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}).call(this,require('_process'))
},{"./ReactPropTypeLocationNames":77,"./ReactPropTypesSecret":78,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150,"fbjs/lib/warning":157,"react/lib/ReactComponentTreeHook":168}],108:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */

'use strict';

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;
},{}],109:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var warning = require('fbjs/lib/warning');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
}).call(this,require('_process'))
},{"./CSSProperty":12,"_process":202,"fbjs/lib/warning":157}],110:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

'use strict';

// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;
},{}],111:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstanceMap = require('./ReactInstanceMap');

var getHostComponentFromComposite = require('./getHostComponentFromComposite');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;
}).call(this,require('_process'))
},{"./ReactDOMComponentTree":41,"./ReactInstanceMap":69,"./getHostComponentFromComposite":118,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150,"fbjs/lib/warning":157,"react/lib/ReactCurrentOwner":169}],112:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var KeyEscapeUtils = require('./KeyEscapeUtils');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
      }
      if (!keyUnique) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (process.env.NODE_ENV !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":30,"./traverseAllChildren":133,"_process":202,"fbjs/lib/warning":157,"react/lib/ReactComponentTreeHook":168}],113:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;
},{}],114:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],115:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1',
  113: 'F2',
  114: 'F3',
  115: 'F4',
  116: 'F5',
  117: 'F6',
  118: 'F7',
  119: 'F8',
  120: 'F9',
  121: 'F10',
  122: 'F11',
  123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":114}],116:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],117:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],118:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactNodeTypes = require('./ReactNodeTypes');

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;
},{"./ReactNodeTypes":75}],119:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],120:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],121:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":136}],122:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;
},{"fbjs/lib/ExecutionEnvironment":136}],123:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMComponentTree = require('./ReactDOMComponentTree');

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(inst) {
  return inst._wrapperState.valueTracker;
}

function attachTracker(inst, tracker) {
  inst._wrapperState.valueTracker = tracker;
}

function detachTracker(inst) {
  delete inst._wrapperState.valueTracker;
}

function getValueFromNode(node) {
  var value;
  if (node) {
    value = isCheckable(node) ? '' + node.checked : node.value;
  }
  return value;
}

var inputValueTracking = {
  // exposed for testing
  _getTrackerFromNode: function (node) {
    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
  },


  track: function (inst) {
    if (getTracker(inst)) {
      return;
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

    var currentValue = '' + node[valueField];

    // if someone has already defined a value or Safari, then bail
    // and don't track value will cause over reporting of changes,
    // but it's better then a hard failure
    // (needed for certain tests that spyOn input values and Safari)
    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
      return;
    }

    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable,
      configurable: true,
      get: function () {
        return descriptor.get.call(this);
      },
      set: function (value) {
        currentValue = '' + value;
        descriptor.set.call(this, value);
      }
    });

    attachTracker(inst, {
      getValue: function () {
        return currentValue;
      },
      setValue: function (value) {
        currentValue = '' + value;
      },
      stopTracking: function () {
        detachTracker(inst);
        delete node[valueField];
      }
    });
  },

  updateValueIfChanged: function (inst) {
    if (!inst) {
      return false;
    }
    var tracker = getTracker(inst);

    if (!tracker) {
      inputValueTracking.track(inst);
      return true;
    }

    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));

    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;
    }

    return false;
  },
  stopTracking: function (inst) {
    var tracker = getTracker(inst);
    if (tracker) {
      tracker.stopTracking();
    }
  }
};

module.exports = inputValueTracking;
},{"./ReactDOMComponentTree":41}],124:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactHostComponent = require('./ReactHostComponent');

var getNextDebugID = require('react/lib/getNextDebugID');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (process.env.NODE_ENV !== 'production') {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

module.exports = instantiateReactComponent;
}).call(this,require('_process'))
},{"./ReactCompositeComponent":37,"./ReactEmptyComponent":60,"./ReactHostComponent":65,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150,"fbjs/lib/warning":157,"object-assign":158,"react/lib/getNextDebugID":183}],125:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":136}],126:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;
},{}],127:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":110}],128:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */
'use strict';

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;
},{}],129:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactMount = require('./ReactMount');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":73}],130:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var DOMNamespaces = require('./DOMNamespaces');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xfeff) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;
},{"./DOMNamespaces":18,"./createMicrosoftUnsafeLocalFunction":108,"fbjs/lib/ExecutionEnvironment":136}],131:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":110,"./setInnerHTML":130,"fbjs/lib/ExecutionEnvironment":136}],132:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;
},{}],133:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var warning = require('fbjs/lib/warning');

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":30,"./ReactElementSymbol":59,"./getIteratorFn":119,"./reactProdInvariant":128,"_process":202,"fbjs/lib/invariant":150,"fbjs/lib/warning":157,"react/lib/ReactCurrentOwner":169}],134:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
}).call(this,require('_process'))
},{"_process":202,"fbjs/lib/emptyFunction":142,"fbjs/lib/warning":157,"object-assign":158}],135:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
}).call(this,require('_process'))
},{"./emptyFunction":142,"_process":202}],136:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],137:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],138:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":137}],139:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;
},{"./isTextNode":152}],140:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
}).call(this,require('_process'))
},{"./invariant":150,"_process":202}],141:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
}).call(this,require('_process'))
},{"./ExecutionEnvironment":136,"./createArrayFromMixed":140,"./getMarkupWrap":146,"./invariant":150,"_process":202}],142:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"dup":3}],143:[function(require,module,exports){
arguments[4][4][0].apply(exports,arguments)
},{"_process":202,"dup":4}],144:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],145:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;
},{}],146:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
}).call(this,require('_process'))
},{"./ExecutionEnvironment":136,"./invariant":150,"_process":202}],147:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],148:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],149:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":148}],150:[function(require,module,exports){
arguments[4][5][0].apply(exports,arguments)
},{"_process":202,"dup":5}],151:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],152:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":151}],153:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],154:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":136}],155:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = require('./performance');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"./performance":154}],156:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],157:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"./emptyFunction":142,"_process":202,"dup":6}],158:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],159:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

if (process.env.NODE_ENV !== 'production') {
  var invariant = require('fbjs/lib/invariant');
  var warning = require('fbjs/lib/warning');
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;

}).call(this,require('_process'))
},{"./lib/ReactPropTypesSecret":162,"_process":202,"fbjs/lib/invariant":150,"fbjs/lib/warning":157}],160:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = require('./factoryWithTypeCheckers');
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};

},{"./factoryWithTypeCheckers":161}],161:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(
          false,
          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

}).call(this,require('_process'))
},{"./checkPropTypes":159,"./lib/ReactPropTypesSecret":162,"_process":202,"fbjs/lib/emptyFunction":142,"fbjs/lib/invariant":150,"fbjs/lib/warning":157}],162:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],163:[function(require,module,exports){
arguments[4][30][0].apply(exports,arguments)
},{"dup":30}],164:[function(require,module,exports){
arguments[4][32][0].apply(exports,arguments)
},{"./reactProdInvariant":186,"_process":202,"dup":32,"fbjs/lib/invariant":191}],165:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactBaseClasses = require('./ReactBaseClasses');
var ReactChildren = require('./ReactChildren');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var createReactClass = require('./createClass');
var onlyChild = require('./onlyChild');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var lowPriorityWarning = require('./lowPriorityWarning');
  var canDefineProperty = require('./canDefineProperty');
  var ReactElementValidator = require('./ReactElementValidator');
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;
var createMixin = function (mixin) {
  return mixin;
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForSpread = false;
  var warnedForCreateMixin = false;
  __spread = function () {
    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
    warnedForSpread = true;
    return _assign.apply(null, arguments);
  };

  createMixin = function (mixin) {
    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
    warnedForCreateMixin = true;
    return mixin;
  };
}

var React = {
  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: createReactClass,
  createFactory: createFactory,
  createMixin: createMixin,

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForCreateClass = false;
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function () {
        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function () {
        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
        warnedForCreateClass = true;
        return createReactClass;
      }
    });
  }

  // React.DOM factories are deprecated. Wrap these methods so that
  // invocations of the React.DOM namespace and alert users to switch
  // to the `react-dom-factories` package.
  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories).forEach(function (factory) {
    React.DOM[factory] = function () {
      if (!warnedForFactories) {
        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
        warnedForFactories = true;
      }
      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
    };
  });
}

module.exports = React;
}).call(this,require('_process'))
},{"./ReactBaseClasses":166,"./ReactChildren":167,"./ReactDOMFactories":170,"./ReactElement":171,"./ReactElementValidator":173,"./ReactPropTypes":176,"./ReactVersion":178,"./canDefineProperty":179,"./createClass":181,"./lowPriorityWarning":184,"./onlyChild":185,"_process":202,"object-assign":193}],166:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var lowPriorityWarning = require('./lowPriorityWarning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};
}).call(this,require('_process'))
},{"./ReactNoopUpdateQueue":174,"./canDefineProperty":179,"./lowPriorityWarning":184,"./reactProdInvariant":186,"_process":202,"fbjs/lib/emptyObject":190,"fbjs/lib/invariant":191,"object-assign":193}],167:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":164,"./ReactElement":171,"./traverseAllChildren":187,"fbjs/lib/emptyFunction":189}],168:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('./ReactCurrentOwner');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty
  // Strip regex characters so we can use it for regex
  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
  // Remove hasOwnProperty from the template to make it generic
  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs,

  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
    if (typeof console.reactStack !== 'function') {
      return;
    }

    var stack = [];
    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    try {
      if (isCreatingElement) {
        stack.push({
          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
          fileName: currentSource ? currentSource.fileName : null,
          lineNumber: currentSource ? currentSource.lineNumber : null
        });
      }

      while (id) {
        var element = ReactComponentTreeHook.getElement(id);
        var parentID = ReactComponentTreeHook.getParentID(id);
        var ownerID = ReactComponentTreeHook.getOwnerID(id);
        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
        var source = element && element._source;
        stack.push({
          name: ownerName,
          fileName: source ? source.fileName : null,
          lineNumber: source ? source.lineNumber : null
        });
        id = parentID;
      }
    } catch (err) {
      // Internal state is messed up.
      // Stop building the stack (it's just a nice to have).
    }

    console.reactStack(stack);
  },
  popNonStandardWarningStack: function () {
    if (typeof console.reactStackEnd !== 'function') {
      return;
    }
    console.reactStackEnd();
  }
};

module.exports = ReactComponentTreeHook;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":169,"./reactProdInvariant":186,"_process":202,"fbjs/lib/invariant":191,"fbjs/lib/warning":192}],169:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

module.exports = ReactCurrentOwner;
},{}],170:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactElement = require('./ReactElement');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = require('./ReactElementValidator');
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
}).call(this,require('_process'))
},{"./ReactElement":171,"./ReactElementValidator":173,"_process":202}],171:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactCurrentOwner = require('./ReactCurrentOwner');

var warning = require('fbjs/lib/warning');
var canDefineProperty = require('./canDefineProperty');
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":169,"./ReactElementSymbol":172,"./canDefineProperty":179,"_process":202,"fbjs/lib/warning":192,"object-assign":193}],172:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"dup":59}],173:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactComponentTreeHook = require('./ReactComponentTreeHook');
var ReactElement = require('./ReactElement');

var checkReactTypeSpec = require('./checkReactTypeSpec');

var canDefineProperty = require('./canDefineProperty');
var getIteratorFn = require('./getIteratorFn');
var warning = require('fbjs/lib/warning');
var lowPriorityWarning = require('./lowPriorityWarning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {
  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
        ReactComponentTreeHook.popNonStandardWarningStack();
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
};

module.exports = ReactElementValidator;
}).call(this,require('_process'))
},{"./ReactComponentTreeHook":168,"./ReactCurrentOwner":169,"./ReactElement":171,"./canDefineProperty":179,"./checkReactTypeSpec":180,"./getIteratorFn":182,"./lowPriorityWarning":184,"_process":202,"fbjs/lib/warning":192}],174:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
}).call(this,require('_process'))
},{"_process":202,"fbjs/lib/warning":192}],175:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"_process":202,"dup":77}],176:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _require = require('./ReactElement'),
    isValidElement = _require.isValidElement;

var factory = require('prop-types/factory');

module.exports = factory(isValidElement);
},{"./ReactElement":171,"prop-types/factory":195}],177:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"dup":78}],178:[function(require,module,exports){
arguments[4][86][0].apply(exports,arguments)
},{"dup":86}],179:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
}).call(this,require('_process'))
},{"_process":202}],180:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactPropTypesSecret = require('./ReactPropTypesSecret');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('./ReactComponentTreeHook');
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require('./ReactComponentTreeHook');
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}).call(this,require('_process'))
},{"./ReactComponentTreeHook":168,"./ReactPropTypeLocationNames":175,"./ReactPropTypesSecret":177,"./reactProdInvariant":186,"_process":202,"fbjs/lib/invariant":191,"fbjs/lib/warning":192}],181:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _require = require('./ReactBaseClasses'),
    Component = _require.Component;

var _require2 = require('./ReactElement'),
    isValidElement = _require2.isValidElement;

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');
var factory = require('create-react-class/factory');

module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);
},{"./ReactBaseClasses":166,"./ReactElement":171,"./ReactNoopUpdateQueue":174,"create-react-class/factory":188}],182:[function(require,module,exports){
arguments[4][119][0].apply(exports,arguments)
},{"dup":119}],183:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;
},{}],184:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = lowPriorityWarning;
}).call(this,require('_process'))
},{"_process":202}],185:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */
'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
}).call(this,require('_process'))
},{"./ReactElement":171,"./reactProdInvariant":186,"_process":202,"fbjs/lib/invariant":191}],186:[function(require,module,exports){
arguments[4][128][0].apply(exports,arguments)
},{"dup":128}],187:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var warning = require('fbjs/lib/warning');

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":163,"./ReactCurrentOwner":169,"./ReactElementSymbol":172,"./getIteratorFn":182,"./reactProdInvariant":186,"_process":202,"fbjs/lib/invariant":191,"fbjs/lib/warning":192}],188:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"_process":202,"dup":1,"fbjs/lib/emptyObject":190,"fbjs/lib/invariant":191,"fbjs/lib/warning":192,"object-assign":193}],189:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"dup":3}],190:[function(require,module,exports){
arguments[4][4][0].apply(exports,arguments)
},{"_process":202,"dup":4}],191:[function(require,module,exports){
arguments[4][5][0].apply(exports,arguments)
},{"_process":202,"dup":5}],192:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"./emptyFunction":189,"_process":202,"dup":6}],193:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],194:[function(require,module,exports){
arguments[4][159][0].apply(exports,arguments)
},{"./lib/ReactPropTypesSecret":197,"_process":202,"dup":159,"fbjs/lib/invariant":191,"fbjs/lib/warning":192}],195:[function(require,module,exports){
arguments[4][160][0].apply(exports,arguments)
},{"./factoryWithTypeCheckers":196,"dup":160}],196:[function(require,module,exports){
arguments[4][161][0].apply(exports,arguments)
},{"./checkPropTypes":194,"./lib/ReactPropTypesSecret":197,"_process":202,"dup":161,"fbjs/lib/emptyFunction":189,"fbjs/lib/invariant":191,"fbjs/lib/warning":192}],197:[function(require,module,exports){
arguments[4][162][0].apply(exports,arguments)
},{"dup":162}],198:[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":165}],199:[function(require,module,exports){
'use strict';

var W = require('./lib/react_widget');
var T = require('./lib/template');

module.exports = W;

},{"./lib/react_widget":200,"./lib/template":201}],200:[function(require,module,exports){
(function (process){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var React = window.React || require('react');
var ReactDOM = window.ReactDOM || require('react-dom');
var createClass_ = window.createReactClass || require('create-react-class');

if (!Object.assign) {
  // polyfill function
  Object.assign = function () {
    var len = arguments.length;
    if (len < 1) return {};

    var res = arguments[0];
    if ((typeof res === 'undefined' ? 'undefined' : _typeof(res)) != 'object') res = {};

    for (var i = 1; i < len; i += 1) {
      var obj = arguments[i];
      if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) != 'object') continue;

      var keys = Object.keys(obj);
      for (var j = 0, item; item = keys[j]; j += 1) {
        res[item] = obj[item];
      }
    }

    return res;
  };
}

if (!Array.prototype.findIndex) {
  // polyfill function
  Array.prototype.findIndex = function (predicate) {
    // 1. Let O be ? ToObject(this value).
    if (this == null) {
      throw new TypeError('"this" is null or not defined');
    }

    var o = Object(this);

    // 2. Let len be ? ToLength(? Get(O, "length")).
    var len = o.length >>> 0;

    // 3. If IsCallable(predicate) is false, throw a TypeError exception.
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }

    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
    var thisArg = arguments[1];

    // 5. Let k be 0.
    var k = 0;

    // 6. Repeat, while k < len
    while (k < len) {
      // a. Let Pk be ! ToString(k).
      // b. Let kValue be ? Get(O, Pk).
      // c. Let testResult be ToBoolean.
      // d. If testResult is true, return k.
      var kValue = o[k];
      if (predicate.call(thisArg, kValue, k, o)) {
        return k;
      }
      // e. Increase k by 1.
      k++;
    }

    // 7. Return -1.
    return -1;
  };
}

if (!Array.prototype.find) {
  // polyfill function
  var fn_array_find_ = Array.prototype.findIndex;
  Array.prototype.find = function () {
    // 1. Let O be ? ToObject(this value).
    if (this == null) {
      throw new TypeError('"this" is null or not defined');
    }

    var o = Object(this);
    var i = fn_array_find_.apply(o, arguments);
    return i >= 0 ? o[i] : undefined;
  };
}

var widgetCount_ = 0;

function deepFirstFind(node, s) {
  // s is string, not int
  var item = node[s];
  if (item) return item;

  for (var sKey in node) {
    // sKey is: 'attr' or '1','2' ... 
    if (sKey != 'parent' && node.hasOwnProperty(sKey)) {
      var obj = node[sKey];
      if (Array.isArray(obj) && obj.W) {
        obj = deepFirstFind(obj, s);
        if (obj) return obj;
      }
    }
  }
  return undefined;
}

function ReactWidget(selector) {
  // selector: N .N .name name name.subName name.N name.N.subName
  var sType = typeof selector === 'undefined' ? 'undefined' : _typeof(selector);
  if (sType == 'number') {
    if (this.W) return this[selector];else return W[selector];
  }

  if (!selector) {
    if (selector === '') return W; // ReactWidget(''), return root widget
    else {
        var obj = new Array();
        // obj.$id = widgetCount_++; // no need regist id
        // obj.component = {};       // no need regist component
        return extendWidget(obj); // new ReactWidget(), create an empty ReactWidget
      }
  }

  if (sType == 'object') {
    var isBare = selector.constructor === Object; // selector is {...}
    var obj = new Array();
    obj.$id = widgetCount_++;
    obj.component = selector; // ReactWidget(instance)

    if (!isBare) selector.widget = obj; // loop-back hook, should unhook in componentWillUnmount() 
    return extendWidget(obj);
  }

  if (sType != 'string') // not support, try return root widget
    return W;
  // else, query ReactWidget by selector

  var wd = undefined,
      b = selector.split('.'),
      iNum = 0;
  if (b[0]) {
    // xxx
    var item = b.shift();
    iNum += 1;

    wd = Array.isArray(this) && this.W ? this : W;

    if (item[0] == '-') {
      // -1, -2 ...
      var sTmp = item.slice(1);
      if (sTmp.search(/^[0-9]+$/) == 0) wd = wd[Math.max(0, wd.length - parseInt(sTmp))];else if (wd === W) wd = deepFirstFind(wd, item);else wd = wd[item];
    } else {
      if (item.search(/^[0-9]+$/) == 0) wd = wd[parseInt(item)];else if (wd === W) wd = deepFirstFind(wd, item);else wd = wd[item];
    }
  }

  while (b.length) {
    var item = b.shift();
    iNum += 1;

    if (!item) {
      if (!wd && iNum == 1) wd = this.W ? this : W; // .xxx
      else return wd; // item should not be ''
    } else {
      if (item[0] == '-') {
        // -1, -2 ...
        var sTmp = item.slice(1);
        if (sTmp.search(/^[0-9]+$/) == 0) {
          if (wd) wd = wd[Math.max(0, wd.length - parseInt(sTmp))];else return wd;
        } else {
          if (wd) wd = wd[item];else return wd;
        }
      } else {
        if (item.search(/^[0-9]+$/) == 0) {
          if (wd) wd = wd[parseInt(item)];else return wd;
        } else {
          if (wd) wd = wd[item];else return wd;
        }
      }
    }
  }
  return wd;
}

var wdgtProto_ = {
  W: ReactWidget,

  $set: function $set(attr, v) {
    if (attr || attr === 0) {
      // attr can be: 'attr', 0,1 ...
      if (Array.isArray(v) && v.W) {
        var old = this[attr];
        this[attr] = v;
        v.parent = this;

        if (Array.isArray(old) && old.W) delete old.parent;
      } else if (!v) {
        // clear one item
        var old = this[attr];
        delete this[attr]; // 'delete this[N]' will assign undefined

        if (Array.isArray(old) && old.W) delete old.parent;
      }
      // else, ignore
    }
  },

  /* // disable using: W.push/splice/unshift/shift/pop
    push: function() {
      var iRet = this.length;
      for (var i=0,item; item=arguments[i]; i++) {
        if (Array.isArray(item) && item.W) {
          iRet = Array.prototype.push.call(this,item);
          item.parent = this;
        }
      }
      return iRet;
    },
    push: function() {
      throw new Error('not support push()');
    },
    splice: function() {
      throw new Error('not support splice()');
    },
    unshift: function() {
      throw new Error('not support unshift()');
    },
    shift: function() {
      throw new Error('not support shift()');
    },
    pop: function() {
      throw new Error('not support pop()');
    }, */

  $unhook: function $unhook(targ, attr) {
    if (!(Array.isArray(targ) && targ.W)) return;
    var tp = typeof attr === 'undefined' ? 'undefined' : _typeof(attr);

    if (tp == 'string' || tp == 'number') {
      if (this[attr] === targ) delete this[attr];
    } else {
      // take attr as undefined
      var b = Object.keys(this);
      for (var i = 0, sKey; sKey = b[i]; i += 1) {
        if (targ === this[sKey]) {
          delete this[sKey]; // sKey maybe 'attr' or '0','1' ...
          break; // only remove one extractly target
        }
      }
    }
    delete targ.parent;
    delete targ.$callspace;
  },

  getPath: function getPath(sPost) {
    // assume using this.parent
    var owner = this.parent;
    if (!owner || !owner.W || owner === this) return sPost || ''; // no parent
    else {
        if (this.component) {
          var keyid = this.component.$gui.keyid;
          if (keyid || keyid === 0) // if keyid valid return quickly
            return owner.getPath('.' + keyid + (sPost || ''));
        }

        // try deep search
        var sPostfix = '';
        for (var sKey in owner) {
          // sKey is: 'attr' or '1','2' ... 
          if (sKey != 'parent' && owner.hasOwnProperty(sKey) && owner[sKey] === this) {
            sPostfix = '.' + sKey;
            break;
          }
        }
        if (sPost) sPostfix += sPost;
        return owner.getPath(sPostfix);
      }
  }
};

function extendWidget(obj) {
  for (var sKey in wdgtProto_) {
    obj[sKey] = wdgtProto_[sKey];
  }
  if (W && W.__debug__) {
    obj.queryById = function (iId) {
      return deepFirstFind2(this, parseInt(iId));
    };
    obj.addShortcut = function () {
      var bRet = [];
      var obj = this.component;
      if (!obj) return bRet;

      for (var i = 0, item; item = arguments[i]; i++) {
        var itemValue = obj[item];
        if (typeof itemValue == 'function') {
          this[item] = makeFunc(obj, itemValue);
          bRet.push(item);
        } else if (itemValue) this[item] = itemValue;
      }
      return bRet;
    };
  }
  return obj;

  function makeFunc(obj, fn) {
    return function () {
      return fn.apply(obj, arguments);
    };
  }

  function deepFirstFind2(node, iId) {
    // iId is int
    if (node.$id === iId) return node;

    for (var sKey in node) {
      // sKey is: 'attr' or '1','2' ... 
      if (sKey != 'parent' && node.hasOwnProperty(sKey)) {
        var obj = node[sKey];
        if (Array.isArray(obj) && obj.W) {
          obj = deepFirstFind2(obj, iId);
          if (obj) return obj;
        }
      }
    }
    return undefined;
  }
}

var W = window.W;
if (Array.isArray(W)) extendWidget(W);else {
  W = new ReactWidget();
  W.$modules = [];
  window.W = W;
}

// W.$dataSrc = undefined;
W.__debug__ = 0;
W.$templates = {};
W.$css = [];
W.$main = { $$onLoad: [], $onReady: [], $onLoad: [], isReady: false, inRunning: false, inDesign: false, isStart: false };
W.$idSetter = {};
W.$creator = {};
W.$svg = {};
W.$staticNodes = [];

function wdgtExtending(comp) {
  // must be called by: new wdgtExtending(comp)
  this.component = comp;
}

W.$creator.createEx = function (comp) {
  var self = new wdgtExtending(comp);
  if (typeof self.init == 'function') self.init();
  return self;
};

var utils = W.$utils = {
  instantShow: function instantShow(sMsg) {
    console.log('[MSG]', sMsg);
  },

  widgetNum: function widgetNum(iNewNum) {
    if (W.__design__) {
      if (typeof iNewNum == 'number') widgetCount_ = iNewNum;
    }
    return widgetCount_;
  },

  cssNamedColor: function cssNamedColor(sName) {
    return undefined; // only used in design stage, overwrite it in online_design.js
  },

  gotoHash: function gotoHash(sHash, callback) {
    // wait overwrite  // callback(sNavPath)
    if (callback) callback('');
  }
};

// Object.defineProperty(utils,'DIV',{enumerable:true,configurable:false,writable:false,value:1});
// Object.defineProperty(utils,'SPAN',{enumerable:true,configurable:false,writable:false,value:3});

W.$cachedClass = {};
W.$ex = new wdgtExtending(); // for extending, such as ex.update  // this.component is undefined

W.$ex.regist = function (sName, fn) {
  // for extending, init() is special that will be called on creating
  if (sName && fn) wdgtExtending.prototype[sName] = fn;
};

// define ex.update
//------------------------ port from react/lib/update

var update_ = function () {

  function assign(target, sources) {
    if (target == null) {
      throw new TypeError('Object.assign target cannot be null or undefined');
    }

    var to = Object(target);
    var hasOwnProperty = Object.prototype.hasOwnProperty;

    for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
      var nextSource = arguments[nextIndex];
      if (nextSource == null) {
        continue;
      }

      var from = Object(nextSource);

      // We don't currently support accessors nor proxies. Therefore this
      // copy cannot throw. If we ever supported this then we must handle
      // exceptions and side-effects. We don't support symbols so they won't
      // be transferred.

      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }
    }

    return to;
  }

  function keyOf(oneKeyObj) {
    var key;
    for (key in oneKeyObj) {
      if (!oneKeyObj.hasOwnProperty(key)) {
        continue;
      }
      return key;
    }
    return null;
  }

  function invariant(condition, format, a, b, c, d, e, f) {
    if (process.env.NODE_ENV !== 'production') {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    }

    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1; // we don't care about invariant's own frame
      throw error;
    }
  }

  var hasOwnProperty = {}.hasOwnProperty;

  function shallowCopy(x) {
    if (Array.isArray(x)) {
      return x.concat();
    } else if (x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {
      return assign(new x.constructor(), x);
    } else {
      return x;
    }
  }

  var COMMAND_PUSH = keyOf({ $push: null });
  var COMMAND_UNSHIFT = keyOf({ $unshift: null });
  var COMMAND_SPLICE = keyOf({ $splice: null });
  var COMMAND_SET = keyOf({ $set: null });
  var COMMAND_MERGE = keyOf({ $merge: null });
  var COMMAND_APPLY = keyOf({ $apply: null });

  var ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];

  var ALL_COMMANDS_SET = {};

  ALL_COMMANDS_LIST.forEach(function (command) {
    ALL_COMMANDS_SET[command] = true;
  });

  function invariantArrayCase(value, spec, command) {
    !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected target of %s to be an array; got %s.', command, value) : invariant(false) : undefined;
    var specValue = spec[command];
    !Array.isArray(specValue) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue) : invariant(false) : undefined;
  }

  return function update(value, spec) {
    !((typeof spec === 'undefined' ? 'undefined' : _typeof(spec)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): You provided a key path to update() that did not contain one ' + 'of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : invariant(false) : undefined;

    if (hasOwnProperty.call(spec, COMMAND_SET)) {
      !(Object.keys(spec).length === 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot have more than one key in an object with %s', COMMAND_SET) : invariant(false) : undefined;

      return spec[COMMAND_SET];
    }

    var nextValue = shallowCopy(value);

    if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
      var mergeObj = spec[COMMAND_MERGE];
      !(mergeObj && (typeof mergeObj === 'undefined' ? 'undefined' : _typeof(mergeObj)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a spec of type \'object\'; got %s', COMMAND_MERGE, mergeObj) : invariant(false) : undefined;
      !(nextValue && (typeof nextValue === 'undefined' ? 'undefined' : _typeof(nextValue)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a target of type \'object\'; got %s', COMMAND_MERGE, nextValue) : invariant(false) : undefined;
      assign(nextValue, spec[COMMAND_MERGE]);
    }

    if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
      invariantArrayCase(value, spec, COMMAND_PUSH);
      spec[COMMAND_PUSH].forEach(function (item) {
        nextValue.push(item);
      });
    }

    if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
      invariantArrayCase(value, spec, COMMAND_UNSHIFT);
      spec[COMMAND_UNSHIFT].forEach(function (item) {
        nextValue.unshift(item);
      });
    }

    if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
      !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value) : invariant(false) : undefined;
      !Array.isArray(spec[COMMAND_SPLICE]) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : undefined;
      spec[COMMAND_SPLICE].forEach(function (args) {
        !Array.isArray(args) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : undefined;
        nextValue.splice.apply(nextValue, args);
      });
    }

    if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
      !(typeof spec[COMMAND_APPLY] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]) : invariant(false) : undefined;
      nextValue = spec[COMMAND_APPLY](nextValue);
    }

    for (var k in spec) {
      if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
        nextValue[k] = update(value[k], spec[k]);
      }
    }

    return nextValue;
  };
}();

W.$ex.regist('update', update_);

// define shallowCompare
//------------------------ port from react-addons-shallow-compare
(function () {
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  function shallowEqual(objA, objB) {
    if (objA === objB) {
      return true;
    }

    if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    // Test for A's keys different from B.
    var bHasOwnProperty = hasOwnProperty.bind(objB);
    for (var i = 0; i < keysA.length; i++) {
      if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
        return false;
      }
    }

    return true;
  }

  function shallowCompare(instance, nextProps, nextState) {
    var thisProps = instance.props || {},
        thisState = instance.state || {};
    if (Object.keys(thisProps).length !== Object.keys(nextProps).length || Object.keys(thisState).length !== Object.keys(nextState).length) return true;

    for (var key in nextProps) {
      if (!shallowEqual(thisProps[key], nextProps[key])) return true;
    }
    for (var key in nextState) {
      if (!shallowEqual(thisState[key], nextState[key])) return true;
    }
    return false;
  }

  this.shallowEqual = shallowEqual; // W.$utils.shallowEqual(a,b)
  this.shallowCompare = shallowCompare; // W.$utils.shallowCompare(obj,p,s)

  // utils.shouldUpdate is default using, change it: W.$utils.shouldUpdate = function(obj,p,s){return true};
  this.shouldUpdate = shallowCompare;
}).call(utils);
//------------------------

// inline markdown process
//------------------------ from github.com/chjj/marked/blob/master/lib/marked.js
(function () {

  /**
   * Block-Level Grammar
   */

  var block = {
    newline: /^\n+/,
    code: /^( {4}[^\n]+\n*)+/,
    fences: noop,
    hr: /^( *[-*_]){3,} *(?:\n+|$)/,
    heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
    nptable: noop,
    lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
    blockquote: /^( *(>|&gt;|::)[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
    list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
    html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
    def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
    table: noop,
    paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
    text: /^[^\n]+/
  };

  block.bullet = /(?:[*+-]|\d+\.)/;
  block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
  block.item = replace(block.item, 'gm')(/bull/g, block.bullet)();

  block.list = replace(block.list)(/bull/g, block.bullet)('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')('def', '\\n+(?=' + block.def.source + ')')();

  block.blockquote = replace(block.blockquote)('def', block.def)();

  block._tag = '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code' + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo' + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';

  block.html = replace(block.html)('comment', /<!--[\s\S]*?-->/)('closed', /<(tag)[\s\S]+?<\/\1>/)('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g, block._tag)();

  block.paragraph = replace(block.paragraph)('hr', block.hr)('heading', block.heading)('lheading', block.lheading)('blockquote', block.blockquote)('tag', '<' + block._tag)('def', block.def)();

  /**
   * Normal Block Grammar
   */

  block.normal = merge({}, block);

  /**
   * GFM Block Grammar
   */

  block.gfm = merge({}, block.normal, {
    fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,
    paragraph: /^/,
    heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
  });

  block.gfm.paragraph = replace(block.paragraph)('(?!', '(?!' + block.gfm.fences.source.replace('\\1', '\\2') + '|' + block.list.source.replace('\\1', '\\3') + '|')();

  /**
   * GFM + Tables Block Grammar
   */

  block.tables = merge({}, block.gfm, {
    nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
    table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
  });

  /**
   * Block Lexer
   */

  function Lexer(options) {
    this.tokens = [];
    this.tokens.links = {};
    this.options = options || marked.defaults;
    this.rules = block.normal;

    if (this.options.gfm) {
      if (this.options.tables) {
        this.rules = block.tables;
      } else {
        this.rules = block.gfm;
      }
    }
  }

  /**
   * Expose Block Rules
   */

  Lexer.rules = block;

  /**
   * Static Lex Method
   */

  Lexer.lex = function (src, options) {
    var lexer = new Lexer(options);
    return lexer.lex(src);
  };

  /**
   * Preprocessing
   */

  Lexer.prototype.lex = function (src) {
    src = src.replace(/\r\n|\r/g, '\n').replace(/\t/g, '    ').replace(/\u00a0/g, ' ').replace(/\u2424/g, '\n');

    return this.token(src, true);
  };

  /**
   * Lexing
   */

  Lexer.prototype.token = function (src, top, bq) {
    var src = src.replace(/^ +$/gm, ''),
        next,
        loose,
        cap,
        bull,
        b,
        item,
        space,
        i,
        l;

    while (src) {
      // newline
      if (cap = this.rules.newline.exec(src)) {
        src = src.substring(cap[0].length);
        if (cap[0].length > 1) {
          this.tokens.push({
            type: 'space'
          });
        }
      }

      // code
      if (cap = this.rules.code.exec(src)) {
        src = src.substring(cap[0].length);
        cap = cap[0].replace(/^ {4}/gm, '');
        this.tokens.push({
          type: 'code',
          text: !this.options.pedantic ? cap.replace(/\n+$/, '') : cap
        });
        continue;
      }

      // fences (gfm)
      if (cap = this.rules.fences.exec(src)) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'code',
          lang: cap[2],
          text: cap[3] || ''
        });
        continue;
      }

      // heading
      if (cap = this.rules.heading.exec(src)) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'heading',
          depth: cap[1].length,
          text: cap[2]
        });
        continue;
      }

      // table no leading pipe (gfm)
      if (top && (cap = this.rules.nptable.exec(src))) {
        src = src.substring(cap[0].length);

        item = {
          type: 'table',
          header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
          align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
          cells: cap[3].replace(/\n$/, '').split('\n')
        };

        for (i = 0; i < item.align.length; i++) {
          if (/^ *-+: *$/.test(item.align[i])) {
            item.align[i] = 'right';
          } else if (/^ *:-+: *$/.test(item.align[i])) {
            item.align[i] = 'center';
          } else if (/^ *:-+ *$/.test(item.align[i])) {
            item.align[i] = 'left';
          } else {
            item.align[i] = null;
          }
        }

        for (i = 0; i < item.cells.length; i++) {
          item.cells[i] = item.cells[i].split(/ *\| */);
        }

        this.tokens.push(item);

        continue;
      }

      // lheading
      if (cap = this.rules.lheading.exec(src)) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'heading',
          depth: cap[2] === '=' ? 1 : 2,
          text: cap[1]
        });
        continue;
      }

      // hr
      if (cap = this.rules.hr.exec(src)) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'hr'
        });
        continue;
      }

      // blockquote
      if (cap = this.rules.blockquote.exec(src)) {
        src = src.substring(cap[0].length);

        this.tokens.push({
          type: 'blockquote_start'
        });

        cap = cap[0].replace(/^ *(>|&gt;|::) ?/gm, '');

        // Pass `top` to keep the current
        // "toplevel" state. This is exactly
        // how markdown.pl works.
        this.token(cap, top, true);

        this.tokens.push({
          type: 'blockquote_end'
        });

        continue;
      }

      // list
      if (cap = this.rules.list.exec(src)) {
        src = src.substring(cap[0].length);
        bull = cap[2];

        this.tokens.push({
          type: 'list_start',
          ordered: bull.length > 1
        });

        // Get each top-level item.
        cap = cap[0].match(this.rules.item);

        next = false;
        l = cap.length;
        i = 0;

        for (; i < l; i++) {
          item = cap[i];

          // Remove the list item's bullet
          // so it is seen as the next token.
          space = item.length;
          item = item.replace(/^ *([*+-]|\d+\.) +/, '');

          // Outdent whatever the
          // list item contains. Hacky.
          if (~item.indexOf('\n ')) {
            space -= item.length;
            item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');
          }

          // Determine whether the next list item belongs here.
          // Backpedal if it does not belong in this list.
          if (this.options.smartLists && i !== l - 1) {
            b = block.bullet.exec(cap[i + 1])[0];
            if (bull !== b && !(bull.length > 1 && b.length > 1)) {
              src = cap.slice(i + 1).join('\n') + src;
              i = l - 1;
            }
          }

          // Determine whether item is loose or not.
          // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
          // for discount behavior.
          loose = next || /\n\n(?!\s*$)/.test(item);
          if (i !== l - 1) {
            next = item.charAt(item.length - 1) === '\n';
            if (!loose) loose = next;
          }

          this.tokens.push({
            type: loose ? 'loose_item_start' : 'list_item_start'
          });

          // Recurse.
          this.token(item, false, bq);

          this.tokens.push({
            type: 'list_item_end'
          });
        }

        this.tokens.push({
          type: 'list_end'
        });

        continue;
      }

      // html
      if (cap = this.rules.html.exec(src)) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: this.options.sanitize ? 'paragraph' : 'html',
          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
          text: cap[0]
        });
        continue;
      }

      // def
      if (!bq && top && (cap = this.rules.def.exec(src))) {
        src = src.substring(cap[0].length);
        this.tokens.links[cap[1].toLowerCase()] = {
          href: cap[2],
          title: cap[3]
        };
        continue;
      }

      // table (gfm)
      if (top && (cap = this.rules.table.exec(src))) {
        src = src.substring(cap[0].length);

        item = {
          type: 'table',
          header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
          align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
          cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
        };

        for (i = 0; i < item.align.length; i++) {
          if (/^ *-+: *$/.test(item.align[i])) {
            item.align[i] = 'right';
          } else if (/^ *:-+: *$/.test(item.align[i])) {
            item.align[i] = 'center';
          } else if (/^ *:-+ *$/.test(item.align[i])) {
            item.align[i] = 'left';
          } else {
            item.align[i] = null;
          }
        }

        for (i = 0; i < item.cells.length; i++) {
          item.cells[i] = item.cells[i].replace(/^ *\| *| *\| *$/g, '').split(/ *\| */);
        }

        this.tokens.push(item);

        continue;
      }

      // top-level paragraph
      if (top && (cap = this.rules.paragraph.exec(src))) {
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'paragraph',
          text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1]
        });
        continue;
      }

      // text
      if (cap = this.rules.text.exec(src)) {
        // Top-level should never reach here.
        src = src.substring(cap[0].length);
        this.tokens.push({
          type: 'text',
          text: cap[0]
        });
        continue;
      }

      if (src) {
        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
      }
    }

    return this.tokens;
  };

  /**
   * Inline-Level Grammar
   */

  var inline = {
    escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
    autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
    url: noop,
    tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
    link: /^!?\[(inside)\]\(href\)/,
    reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
    nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
    strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
    em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
    code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
    br: /^ {2,}\n(?!\s*$)/,
    del: noop,
    text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
  };

  inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
  inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/; // '"

  inline.link = replace(inline.link)('inside', inline._inside)('href', inline._href)();

  inline.reflink = replace(inline.reflink)('inside', inline._inside)();

  /**
   * Normal Inline Grammar
   */

  inline.normal = merge({}, inline);

  /**
   * Pedantic Inline Grammar
   */

  inline.pedantic = merge({}, inline.normal, {
    strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
  });

  /**
   * GFM Inline Grammar
   */

  inline.gfm = merge({}, inline.normal, {
    escape: replace(inline.escape)('])', '~|])')(),
    url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/, // '"
    del: /^~~(?=\S)([\s\S]*?\S)~~/,
    text: replace(inline.text)(']|', '~]|')('|', '|https?://|')()
  });

  /**
   * GFM + Line Breaks Inline Grammar
   */

  inline.breaks = merge({}, inline.gfm, {
    br: replace(inline.br)('{2,}', '*')(),
    text: replace(inline.gfm.text)('{2,}', '*')()
  });

  /**
   * Inline Lexer & Compiler
   */

  function InlineLexer(links, options) {
    this.options = options || marked.defaults;
    this.links = links;
    this.rules = inline.normal;
    this.renderer = this.options.renderer || new Renderer();
    this.renderer.options = this.options;

    if (!this.links) {
      throw new Error('Tokens array requires a `links` property.');
    }

    if (this.options.gfm) {
      if (this.options.breaks) {
        this.rules = inline.breaks;
      } else {
        this.rules = inline.gfm;
      }
    } else if (this.options.pedantic) {
      this.rules = inline.pedantic;
    }
  }

  /**
   * Expose Inline Rules
   */

  InlineLexer.rules = inline;

  /**
   * Static Lexing/Compiling Method
   */

  InlineLexer.output = function (src, links, options) {
    var inline = new InlineLexer(links, options);
    return inline.output(src);
  };

  /**
   * Lexing/Compiling
   */

  InlineLexer.prototype.output = function (src) {
    var out = '',
        link,
        text,
        href,
        cap;

    while (src) {
      // escape
      if (cap = this.rules.escape.exec(src)) {
        src = src.substring(cap[0].length);
        out += cap[1];
        continue;
      }

      // autolink
      if (cap = this.rules.autolink.exec(src)) {
        src = src.substring(cap[0].length);
        if (cap[2] === '@') {
          text = cap[1].charAt(6) === ':' ? this.mangle(cap[1].substring(7)) : this.mangle(cap[1]);
          href = this.mangle('mailto:') + text;
        } else {
          text = escape(cap[1]);
          href = text;
        }
        out += this.renderer.link(href, null, text);
        continue;
      }

      // url (gfm)
      if (!this.inLink && (cap = this.rules.url.exec(src))) {
        src = src.substring(cap[0].length);
        text = escape(cap[1]);
        href = text;
        out += this.renderer.link(href, null, text);
        continue;
      }

      // tag
      if (cap = this.rules.tag.exec(src)) {
        if (!this.inLink && /^<a /i.test(cap[0])) {
          this.inLink = true;
        } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
          this.inLink = false;
        }
        src = src.substring(cap[0].length);
        out += this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];
        continue;
      }

      // link
      if (cap = this.rules.link.exec(src)) {
        src = src.substring(cap[0].length);
        this.inLink = true;
        out += this.outputLink(cap, {
          href: cap[2],
          title: cap[3]
        });
        this.inLink = false;
        continue;
      }

      // reflink, nolink
      if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {
        src = src.substring(cap[0].length);
        link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
        link = this.links[link.toLowerCase()];
        if (!link || !link.href) {
          out += cap[0].charAt(0);
          src = cap[0].substring(1) + src;
          continue;
        }
        this.inLink = true;
        out += this.outputLink(cap, link);
        this.inLink = false;
        continue;
      }

      // strong
      if (cap = this.rules.strong.exec(src)) {
        src = src.substring(cap[0].length);
        out += this.renderer.strong(this.output(cap[2] || cap[1]));
        continue;
      }

      // em
      if (cap = this.rules.em.exec(src)) {
        src = src.substring(cap[0].length);
        out += this.renderer.em(this.output(cap[2] || cap[1]));
        continue;
      }

      // code
      if (cap = this.rules.code.exec(src)) {
        src = src.substring(cap[0].length);
        out += this.renderer.codespan(escape(cap[2], true));
        continue;
      }

      // br
      if (cap = this.rules.br.exec(src)) {
        src = src.substring(cap[0].length);
        out += this.renderer.br();
        continue;
      }

      // del (gfm)
      if (cap = this.rules.del.exec(src)) {
        src = src.substring(cap[0].length);
        out += this.renderer.del(this.output(cap[1]));
        continue;
      }

      // text
      if (cap = this.rules.text.exec(src)) {
        src = src.substring(cap[0].length);
        out += this.renderer.text(escape(this.smartypants(cap[0])));
        continue;
      }

      if (src) {
        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
      }
    }

    return out;
  };

  /**
   * Compile Link
   */

  InlineLexer.prototype.outputLink = function (cap, link) {
    var href = escape(link.href),
        title = link.title ? escape(link.title) : null;

    return cap[0].charAt(0) !== '!' ? this.renderer.link(href, title, this.output(cap[1])) : this.renderer.image(href, title, escape(cap[1]));
  };

  /**
   * Smartypants Transformations
   */

  InlineLexer.prototype.smartypants = function (text) {
    if (!this.options.smartypants) return text;
    return text
    // em-dashes
    .replace(/---/g, '\u2014')
    // en-dashes
    .replace(/--/g, '\u2013')
    // opening singles
    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018') // '"
    // closing singles & apostrophes
    .replace(/'/g, '\u2019') // '
    // opening doubles
    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201C') // '"
    // closing doubles
    .replace(/"/g, '\u201D') // "
    // ellipses
    .replace(/\.{3}/g, '\u2026');
  };

  /**
   * Mangle Links
   */

  InlineLexer.prototype.mangle = function (text) {
    if (!this.options.mangle) return text;
    var out = '',
        l = text.length,
        i = 0,
        ch;

    for (; i < l; i++) {
      ch = text.charCodeAt(i);
      if (Math.random() > 0.5) {
        ch = 'x' + ch.toString(16);
      }
      out += '&#' + ch + ';';
    }

    return out;
  };

  /**
   * Renderer
   */

  function Renderer(options) {
    this.options = options || {};
  }

  Renderer.prototype.code = function (code, lang, escaped) {
    if (this.options.highlight) {
      var out = this.options.highlight(code, lang);
      if (out != null && out !== code) {
        escaped = true;
        code = out;
      }
    }

    if (!lang) {
      return '<pre><code>' + (escaped ? code : escape(code, true)) + '\n</code></pre>';
    }

    return '<pre><code class="' + this.options.langPrefix + escape(lang, true) + '">' + (escaped ? code : escape(code, true)) + '\n</code></pre>\n';
  };

  Renderer.prototype.blockquote = function (quote) {
    return '<blockquote>\n' + quote + '</blockquote>\n';
  };

  Renderer.prototype.html = function (html) {
    return html;
  };

  Renderer.prototype.heading = function (text, level, raw) {
    return '<h' + level + ' id="' + this.options.headerPrefix + raw.toLowerCase().replace(/[^\w]+/g, '-') + '">' + text + '</h' + level + '>\n';
  };

  Renderer.prototype.hr = function () {
    return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
  };

  Renderer.prototype.list = function (body, ordered) {
    var type = ordered ? 'ol' : 'ul';
    return '<' + type + '>\n' + body + '</' + type + '>\n';
  };

  Renderer.prototype.listitem = function (text) {
    return '<li>' + text + '</li>\n';
  };

  Renderer.prototype.paragraph = function (text) {
    return '<p>' + text + '</p>\n';
  };

  Renderer.prototype.table = function (header, body) {
    return '<table>\n' + '<thead>\n' + header + '</thead>\n' + '<tbody>\n' + body + '</tbody>\n' + '</table>\n';
  };

  Renderer.prototype.tablerow = function (content) {
    return '<tr>\n' + content + '</tr>\n';
  };

  Renderer.prototype.tablecell = function (content, flags) {
    var type = flags.header ? 'th' : 'td';
    var tag = flags.align ? '<' + type + ' style="text-align:' + flags.align + '">' : '<' + type + '>';
    return tag + content + '</' + type + '>\n';
  };

  // span level renderer
  Renderer.prototype.strong = function (text) {
    return '<strong>' + text + '</strong>';
  };

  Renderer.prototype.em = function (text) {
    return '<em>' + text + '</em>';
  };

  Renderer.prototype.codespan = function (text) {
    return '<code>' + text + '</code>';
  };

  Renderer.prototype.br = function () {
    return this.options.xhtml ? '<br/>' : '<br>';
  };

  Renderer.prototype.del = function (text) {
    return '<del>' + text + '</del>';
  };

  Renderer.prototype.link = function (href, title, text) {
    if (this.options.sanitize) {
      try {
        var prot = decodeURIComponent(unescape(href)).replace(/[^\w:]/g, '').toLowerCase();
      } catch (e) {
        return '';
      }
      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
        return '';
      }
    }
    var out = '<a href="' + href + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += '>' + text + '</a>';
    return out;
  };

  Renderer.prototype.image = function (href, title, text) {
    var out = '<img src="' + href + '" alt="' + text + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += this.options.xhtml ? '/>' : '>';
    return out;
  };

  Renderer.prototype.text = function (text) {
    return text;
  };

  /**
   * Parsing & Compiling
   */

  function Parser(options) {
    this.tokens = [];
    this.token = null;
    this.options = options || marked.defaults;
    this.options.renderer = this.options.renderer || new Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
  }

  /**
   * Static Parse Method
   */

  Parser.parse = function (src, options, renderer) {
    var parser = new Parser(options, renderer);
    return parser.parse(src);
  };

  /**
   * Parse Loop
   */

  Parser.prototype.parse = function (src) {
    this.inline = new InlineLexer(src.links, this.options, this.renderer);
    this.tokens = src.reverse();

    var out = '';
    while (this.next()) {
      out += this.tok();
    }

    return out;
  };

  /**
   * Next Token
   */

  Parser.prototype.next = function () {
    return this.token = this.tokens.pop();
  };

  /**
   * Preview Next Token
   */

  Parser.prototype.peek = function () {
    return this.tokens[this.tokens.length - 1] || 0;
  };

  /**
   * Parse Text Tokens
   */

  Parser.prototype.parseText = function () {
    var body = this.token.text;

    while (this.peek().type === 'text') {
      body += '\n' + this.next().text;
    }

    return this.inline.output(body);
  };

  /**
   * Parse Current Token
   */

  Parser.prototype.tok = function () {
    switch (this.token.type) {
      case 'space':
        {
          return '';
        }
      case 'hr':
        {
          return this.renderer.hr();
        }
      case 'heading':
        {
          return this.renderer.heading(this.inline.output(this.token.text), this.token.depth, this.token.text);
        }
      case 'code':
        {
          return this.renderer.code(this.token.text, this.token.lang, this.token.escaped);
        }
      case 'table':
        {
          var header = '',
              body = '',
              i,
              row,
              cell,
              flags,
              j;

          // header
          cell = '';
          for (i = 0; i < this.token.header.length; i++) {
            flags = { header: true, align: this.token.align[i] };
            cell += this.renderer.tablecell(this.inline.output(this.token.header[i]), { header: true, align: this.token.align[i] });
          }
          header += this.renderer.tablerow(cell);

          for (i = 0; i < this.token.cells.length; i++) {
            row = this.token.cells[i];

            cell = '';
            for (j = 0; j < row.length; j++) {
              cell += this.renderer.tablecell(this.inline.output(row[j]), { header: false, align: this.token.align[j] });
            }

            body += this.renderer.tablerow(cell);
          }
          return this.renderer.table(header, body);
        }
      case 'blockquote_start':
        {
          var body = '';

          while (this.next().type !== 'blockquote_end') {
            body += this.tok();
          }

          return this.renderer.blockquote(body);
        }
      case 'list_start':
        {
          var body = '',
              ordered = this.token.ordered;

          while (this.next().type !== 'list_end') {
            body += this.tok();
          }

          return this.renderer.list(body, ordered);
        }
      case 'list_item_start':
        {
          var body = '';

          while (this.next().type !== 'list_item_end') {
            body += this.token.type === 'text' ? this.parseText() : this.tok();
          }

          return this.renderer.listitem(body);
        }
      case 'loose_item_start':
        {
          var body = '';

          while (this.next().type !== 'list_item_end') {
            body += this.tok();
          }

          return this.renderer.listitem(body);
        }
      case 'html':
        {
          var html = !this.token.pre && !this.options.pedantic ? this.inline.output(this.token.text) : this.token.text;
          return this.renderer.html(html);
        }
      case 'paragraph':
        {
          return this.renderer.paragraph(this.inline.output(this.token.text));
        }
      case 'text':
        {
          return this.renderer.paragraph(this.parseText());
        }
    }
  };

  /**
   * Helpers
   */

  function escape(html, encode) {
    return html.replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') // "
    .replace(/'/g, '&#39;'); // '
  }

  function unescape(html) {
    return html.replace(/&([#\w]+);/g, function (_, n) {
      n = n.toLowerCase();
      if (n === 'colon') return ':';
      if (n.charAt(0) === '#') {
        return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
      }
      return '';
    });
  }

  function replace(regex, opt) {
    regex = regex.source;
    opt = opt || '';
    return function self(name, val) {
      if (!name) return new RegExp(regex, opt);
      val = val.source || val;
      val = val.replace(/(^|[^\[])\^/g, '$1');
      regex = regex.replace(name, val);
      return self;
    };
  }

  function noop() {}
  noop.exec = noop;

  function merge(obj) {
    var i = 1,
        target,
        key;

    for (; i < arguments.length; i++) {
      target = arguments[i];
      for (key in target) {
        if (Object.prototype.hasOwnProperty.call(target, key)) {
          obj[key] = target[key];
        }
      }
    }

    return obj;
  }

  /**
   * Marked
   */

  function marked(src, opt, callback) {
    if (callback || typeof opt === 'function') {
      if (!callback) {
        callback = opt;
        opt = null;
      }

      opt = merge({}, marked.defaults, opt || {});

      var highlight = opt.highlight,
          tokens,
          pending,
          i = 0;

      try {
        tokens = Lexer.lex(src, opt);
      } catch (e) {
        return callback(e);
      }

      pending = tokens.length;

      var done = function done(err) {
        if (err) {
          opt.highlight = highlight;
          return callback(err);
        }

        var out;

        try {
          out = Parser.parse(tokens, opt);
        } catch (e) {
          err = e;
        }

        opt.highlight = highlight;

        return err ? callback(err) : callback(null, out);
      };

      if (!highlight || highlight.length < 3) {
        return done();
      }

      delete opt.highlight;

      if (!pending) return done();

      for (; i < tokens.length; i++) {
        (function (token) {
          if (token.type !== 'code') {
            return --pending || done();
          }
          return highlight(token.text, token.lang, function (err, code) {
            if (err) return done(err);
            if (code == null || code === token.text) {
              return --pending || done();
            }
            token.text = code;
            token.escaped = true;
            --pending || done();
          });
        })(tokens[i]);
      }

      return;
    }
    try {
      if (opt) opt = merge({}, marked.defaults, opt);
      return Parser.parse(Lexer.lex(src, opt), opt);
    } catch (e) {
      e.message += '\nPlease report this to https://github.com/chjj/marked.';
      if ((opt || marked.defaults).silent) {
        return '<p>An error occured:</p><pre>' + escape(e.message + '', true) + '</pre>';
      }
      throw e;
    }
  }

  /**
   * Options
   */

  marked.options = marked.setOptions = function (opt) {
    merge(marked.defaults, opt);
    return marked;
  };

  marked.defaults = {
    gfm: true,
    tables: true,
    breaks: false,
    pedantic: false,
    sanitize: false,
    sanitizer: null,
    mangle: true,
    smartLists: false,
    silent: false,
    highlight: null,
    langPrefix: 'lang-',
    smartypants: false,
    headerPrefix: '',
    renderer: new Renderer(),
    xhtml: false
  };

  /**
   * Expose
   */

  marked.Parser = Parser;
  marked.parser = Parser.parse;

  marked.Renderer = Renderer;

  marked.Lexer = Lexer;
  marked.lexer = Lexer.lex;

  marked.InlineLexer = InlineLexer;
  marked.inlineLexer = InlineLexer.output;

  marked.parse = marked;

  /* if (typeof module !== 'undefined' && typeof exports === 'object') {
    module.exports = marked;
  } else if (typeof define === 'function' && define.amd) {
    define(function() { return marked; });
  } else {
    this.marked = marked;
  }  */

  this.marked = marked; // regist as W.$utils.marked
}).call(utils);
//------- end of chjj/marked --------

var re_plain_ = /^(?:plain|text)$/i;
var re_html_ = /^(?:xml|html|xhtml|rss|atom|xjb|xsd|xsl|plist|markdown|md|mkdown|mkd)$/i;
var re_lt_ = /&lt;/g,
    re_gt_ = /&gt;/g,
    re_amp_ = /&amp;/g;

(function (hljs) {
  if (!hljs || !hljs.highlight) return;

  var ln_re_ = /\r\n|\r|\n/g;
  var num_re_ = /^[0-9][0-9]+ /; // start with 'nn' means line number tag
  var hint_re_ = /^~~+ /; // start with '~~' means highlight this line

  function getLineInfo(bRet, bNum, code) {
    var numCount = 0,
        hintCount = 0;
    var bLn = code.split(ln_re_),
        len = bLn.length;
    var iLastLn = -1,
        sLastNum = '0';
    for (var i = 0; i < len; i++) {
      var item = bLn[i],
          hasHint = false;
      var sNew = item.replace(hint_re_, function (sMatch) {
        hasHint = true;hintCount += 1;
        var iTmp = sMatch.length;
        if (iLastLn + 1 == i) {
          iLastLn = i;sLastNum = parseInt(sLastNum) + 1 + '';
          iTmp -= 1;
          sLastNum = sLastNum.slice(-iTmp); // trim to same width: ~~
          if (sLastNum.length < iTmp) sLastNum = new Array(iTmp - sLastNum.length + 1).join('0') + sLastNum;
          bRet[i] = sLastNum + '!';
        } else bRet[i] = new Array(iTmp).join(' ') + '!';
        return '';
      });

      if (hasHint) bLn[i] = sNew;else {
        var hasNum = false;
        var sNew2 = item.replace(num_re_, function (sMatch) {
          hasNum = true;numCount += 1;
          sLastNum = bRet[i] = sMatch.slice(0, -1);
          iLastLn = i;
          return '';
        });
        if (hasNum) bLn[i] = sNew2;
      }
    }

    if (!bRet.length) // no changing
      return code;else {
      if (!hintCount && numCount <= 1) {
        // avoid accident preceed-number
        bRet.splice(0);
        return code; // no changing
      } else {
        if (numCount) bNum.push(numCount);
        return bLn.join('\n');
      }
    }
  }

  function makeLnNum(hasLnNum, item) {
    return hasLnNum ? '<span class="hljs-ln-num" data="' + item + '"></span>' : '';
  }

  utils.marked.setOptions({
    highlight: function highlight(code, sTag) {
      var isHtml = false;
      if (sTag) {
        if (sTag.search(re_plain_) == 0) sTag = 'plain';else if (sTag.search(re_html_) == 0) isHtml = true;
      } else sTag = 'plain';

      if (sTag == 'plain' || !isHtml) code = code.replace(re_lt_, '<').replace(re_gt_, '>').replace(re_amp_, '&');

      var bInfo = [],
          bNum = [];
      code = getLineInfo(bInfo, bNum, code);

      if (sTag != 'plain') code = hljs.highlight(sTag, code, true).value;

      var len = bInfo.length;
      if (len) {
        var bLn = code.split(ln_re_),
            len2 = bLn.length;
        for (var i = 0; i < len; i++) {
          var item = bInfo[i];
          if (item && i < len2) {
            if (item.slice(-1) == '!') bLn[i] = '<span class="hljs-hint">' + makeLnNum(bNum.length, item.slice(0, -1)) + bLn[i] + '</span>';else bLn[i] = makeLnNum(bNum.length, item) + bLn[i];
          }
        }
        return bLn.join('\n');
      } else return code;
    }
  });
})(window.hljs); // fix to cdn version of highlight.js

// inline jsonp/ajax process
//--------------------------
(function () {

  if (!window.TRIGGER__) window.TRIGGER__ = { count: 0 };

  function newJsonPid_() {
    return ++window.TRIGGER__.count;
  }

  var validHeadType_ = { GET: 1, POST: 1, PUT: 1, DELETE: 1, HEAD: 1 };

  // req:{url:sUrl,data:dInput,callback:fn,scriptCharset:'utf-8',notifyError:false}
  function jsonp(req) {
    var sUrl = req.url,
        inData = req.data,
        callback = req.callback;
    if (!sUrl || typeof sUrl != 'string') throw new Error('invalid URL');
    if (inData && (typeof inData === 'undefined' ? 'undefined' : _typeof(inData)) != 'object') throw new Error('invalid input argument (data)');
    if (typeof callback != 'function') throw new Error('input argument (callback) should be a function');

    var id = newJsonPid_();
    if (sUrl.indexOf('?') > 0) sUrl += '&';else sUrl += '?';
    sUrl += 'callback=TRIGGER__%5B' + id + '%5D'; // encodeURIComponent('[' + id + ']')

    if (inData) {
      Object.keys(inData).forEach(function (sKey) {
        var item = inData[sKey];
        sUrl += '&' + sKey + '=' + encodeURIComponent(item + '');
      });
    }

    var head = document.head || document.getElementsByTagName('head')[0] || document.documentElement;
    var script = document.createElement('script');
    script.async = 'async';
    if (req.scriptCharset) script.charset = req.scriptCharset;
    script.src = sUrl;
    script.onload = script.onreadystatechange = function () {
      if (!script.readyState || /loaded|complete/.test(script.readyState)) {
        script.onload = script.onreadystatechange = null; // handle memory leak in IE
        if (head && script.parentNode) // remove the script node
          head.removeChild(script);

        script = undefined; // dereference the script
        setTimeout(function () {
          var fn = window.TRIGGER__[id];
          if (fn) {
            delete window.TRIGGER__[id];
            if (req.notifyError) callback(null); // null means failed, fn not removed in TRIGGER__[id]() yet
          }
        }, 0);
      }
    };
    head.insertBefore(script, head.firstChild);

    window.TRIGGER__[id] = function (json) {
      var fn = window.TRIGGER__[id];
      if (fn) {
        delete window.TRIGGER__[id]; // unregist callback: TRIGGER__[xxx]
        callback(json);
      }
    };
  }
  this.jsonp = jsonp; // regist as W.$utils.jsonp

  // req: {type:GET_POST_PUT,url:sUrl,data:dInput,
  //   dataType:'json',   // 'json' or 'text', default is 'text'
  //   timeout:0,headers:{},succuss:fn,error:fn,username:s,password:s }

  var _multiLnPattern = /"{3}[^\\]*(?:\\[\S\s][^\\]*)*"{3}/gm;
  var _commentPattern = /^\s*\/\/.*$/gm;

  function ajax(req) {
    var sUrl = req.url,
        sType = (req.type || 'GET').toUpperCase(),
        inData = req.data;
    if (!sUrl || typeof sUrl != 'string') throw new Error('invalid URL');
    if (inData && (typeof inData === 'undefined' ? 'undefined' : _typeof(inData)) != 'object') throw new Error('invalid input argument (data)');
    if (!(sType in validHeadType_)) throw new Error('invalid request type (' + sType + ')');

    var iTimeout = req.timeout || 60000; // default max wait 60 seconds
    var hasQuest = sUrl.indexOf('?') > 0;
    var dataType = req.dataType;
    if (dataType === undefined && sUrl.slice(-5) == '.json') dataType = 'json';

    var sendData = null;
    if (inData) {
      if (sType != 'PUT' && sType != 'POST') {
        Object.keys(inData).forEach(function (sKey) {
          var item = inData[sKey];
          if (!hasQuest) {
            hasQuest = true;
            sUrl += '?';
          } else sUrl += '&'; // send with application/x-www-form-urlencoded
          sUrl += sKey + '=' + encodeURIComponent(item + '');
        });
      } else sendData = JSON.stringify(inData); // send with json format
    }

    var xmlHttp = null,
        finished = false;
    if (window.XMLHttpRequest) // Firefox, Opera, IE7, etc
      xmlHttp = new XMLHttpRequest();else if (window.ActiveXObject) // IE6, IE5
      xmlHttp = new ActiveXObject('Microsoft.XMLHTTP');
    if (!xmlHttp) throw new Error('invalid XMLHttpRequest');

    xmlHttp.onreadystatechange = function () {
      if (xmlHttp.readyState == 4) {
        // 4 is "loaded"
        var resText = xmlHttp.responseText || '';
        var statusText = xmlHttp.statusText || '',
            status = xmlHttp.status || (resText ? 200 : 404);
        if (finished) ; // do nothing
        else if (status >= 200 && status < 300 && resText) {
            var isPre = false;
            if (dataType === 'json' || dataType === 'pre-json' && (isPre = true)) {
              // take as json
              var jsonData,
                  isErr = true;
              try {
                if (isPre) {
                  resText = resText.replace(_multiLnPattern, function (s) {
                    var sBody = s.slice(3, -3).replace(/\\/gm, '\\\\').replace(/\n/gm, '\\n').replace(/"/gm, '\\"'); // "'
                    return '"' + sBody + '"';
                  });
                  resText = resText.replace(_commentPattern, '');
                }
                jsonData = JSON.parse(resText.replace(/[\cA-\cZ]/gi, ''));
                isErr = false;
              } catch (e) {
                if (req.error) {
                  statusText = 'JSON format error';
                  req.error(xmlHttp, statusText);
                }
              }
              if (!isErr && req.success) req.success(jsonData, statusText, xmlHttp);
            } else {
              // take as plain text
              if (req.success) req.success(resText, statusText, xmlHttp);
            }
          } else {
            // failed
            if (req.error) req.error(xmlHttp, statusText);
          }
        xmlHttp = null;
        finished = true;
      }
    };

    var sName, headers;
    if (req.username) xmlHttp.open(sType, sUrl, true, req.username, req.password);else xmlHttp.open(sType, sUrl, true);
    if (headers = req.headers) {
      for (sName in headers) {
        xmlHttp.setRequestHeader(sName, headers[sName]);
      }
    }
    if (sendData) xmlHttp.setRequestHeader('Content-Type', 'application/json');
    xmlHttp.send(sendData);

    if (typeof iTimeout == 'number') {
      setTimeout(function () {
        if (!finished) {
          finished = true;
          xmlHttp.abort();
          if (req.error) req.error(xmlHttp, 'request timeout');
          xmlHttp = null;
        }
      }, iTimeout);
    }
  }
  this.ajax = ajax; // regist as W.$utils.ajax
}).call(utils);
//------- end of jsonp/ajax --------

utils.bindMountData = function (data) {
  if (!data || (typeof data === 'undefined' ? 'undefined' : _typeof(data)) != 'object') {
    console.log('error: invalid W.$dataSrc');
    return;
  }

  var idSetter = W.$idSetter; // must defined
  Object.keys(idSetter).forEach(function (sKey) {
    var fn = idSetter[sKey];
    if (typeof fn != 'function') return;

    var item = data[sKey];
    if (item && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) == 'object') {
      var item2 = Object.assign({}, item),
          attrs = item2.__attr__;
      delete item2.__attr__;
      if (!Array.isArray(attrs)) attrs = Object.keys(item2);

      var wrapFn = wrapFunc(sKey, attrs, item2, fn);
      Object.defineProperty(idSetter, sKey, { enumerable: true, configurable: true,
        get: function get() {
          return wrapFn;
        } // no 'set'
      });
    }
  });

  function wrapFunc(sKey, attrs, srcData, originFn) {
    return function (value, oldValue, sAttr) {
      if (originFn.call(this, value, oldValue, sAttr)) return; // if origin idSetter return `true` means no chain data
      if (value == 2) {
        // when mount
        for (var i = 0, attr; attr = attrs[i]; i++) {
          this.duals[attr] = srcData[attr];
        }
      }
    };
  }
};

utils.loadingEntry = function (require, module, exports) {
  var containNode_ = document.getElementById('react-container');
  if (!containNode_) return;

  if (containNode_.hasAttribute('__debug__')) // if no '__debug__' prop, do nothing // maybe W.__debug__ assigned by JS
    W.__debug__ = parseInt(containNode_.getAttribute('__debug__') || 0);
  if (containNode_.hasAttribute('__design__')) W.__design__ = parseInt(containNode_.getAttribute('__design__') || 0);
  if (containNode_.hasAttribute('__nobinding__')) W.__nobinding__ = parseInt(containNode_.getAttribute('__nobinding__') || 0);
  var noBinding = W.__nobinding__ || 0;

  if (window.W !== W) {
    // old window.W maybe only has W.$modules
    if (window.W) W.$modules = window.W.$modules; // main.js maybe included after react-widget
    window.W = W;
  }

  var bImporting_ = W.$modules;
  if (Array.isArray(bImporting_)) {
    bImporting_.forEach(function (fn) {
      if (typeof fn == 'function') fn.call(exports, require, module, exports);
    });
    bImporting_.splice(0); // clear
  }

  function loadCssModule(bCss, sFilter, callback) {
    var b = [];
    bCss.forEach(function (item) {
      // item[0]: 'pseudo' for plugin-editor, 'basic' for loading before render, 'lazy' for no waiting load
      if (item[0] == sFilter) b.push(item[1]); // item[1] is sUrl
    });

    var cssNum = b.length,
        loaded = 0;
    if (cssNum) {
      b.forEach(function (sUrl) {
        var node = document.createElement('link');
        if ('onload' in node) {
          if (callback) {
            node.onload = function (event) {
              loaded += 1;
              if (loaded >= cssNum) callback();
            };
          }
          node.setAttribute('rel', 'stylesheet');
          node.setAttribute('href', sUrl);
          document.head.appendChild(node);
        } else {
          node = document.createElement('img');
          if (callback) {
            node.onerror = function (event) {
              loaded += 1;
              if (loaded >= cssNum) callback();
            };
          }
          node.setAttribute('src', sUrl);
          document.body.appendChild(node);
        }
      });
    } else {
      if (callback) callback();
    }
  }

  var b = document.querySelectorAll('link[rel="stylesheet"]');
  for (var i = b.length - 1, item; i >= 0; i -= 1) {
    var item = b[i],
        s = item.getAttribute('shared');
    if (s && s != 'false' && s != '0') W.$css.unshift(['pseudo', item.href]);
  }

  loadCssModule(W.$css, 'basic', function () {
    loadCssModule(W.$css, 'lazy'); // no waiting

    var _msPattern = /^-ms-/;
    var _hyphenPattern = /-(.)/g;
    var _jsStrPattern = /(?:'[^'\\]*(?:\\[\S\s][^'\\]*)*'|"[^"\\]*(?:\\[\S\s][^"\\]*)*")/g;
    var _dotNumPattern = /\.[0-9]/; // just check one number char

    var T = W.$templates;
    var main = W.$main;
    var utils = W.$utils;
    var dataSource = W.$dataSrc;
    var dTemplate = {},
        dTemplate2 = {}; // dTemplate is default template extending, dTemplate2 is original

    var dataSegment_ = ['data', '$data', 'dual', '$dual', 'aria', '$aria'];

    function jsxJsonParse(sJson, sAttr, sPrefix, idx) {
      try {
        return JSON.parse(sJson);
      } catch (e) {
        console.log('invalid JSON format: ' + (sPrefix ? sPrefix + '[' + idx + '].' : '') + sAttr);
      }
      return undefined;
    }

    function camelizeStyleName(s) {
      return s.replace(_msPattern, 'ms-').replace(_hyphenPattern, function (_, chr) {
        return chr.toUpperCase();
      });
    }

    function transCssStyle(sStyle) {
      var bIns = [];
      var sStyle2 = sStyle.replace(_jsStrPattern, function (s, iPos) {
        bIns.push([iPos, s]);
        return ''; // remove string literally
      });

      var b = sStyle2.split(';'),
          sOrg = '';
      var dRet = {},
          hasSome = false;
      b.forEach(function (item) {
        var iLast = sOrg.length;
        sOrg += item + ' '; // ' ' standard for ';'
        if (!item) return;

        while (bIns.length) {
          var iTmp = bIns[0][0];
          if (iTmp >= iLast && iTmp < sOrg.length) {
            var bTmp = bIns.shift();
            sOrg = sOrg.slice(0, iTmp) + bTmp[1] + sOrg.slice(iTmp);
          } else break;
        }
        var item2 = sOrg.slice(iLast);

        var iPos = item2.indexOf(':');
        if (iPos > 0) {
          var sName = item2.slice(0, iPos).trim();
          if (sName) {
            dRet[camelizeStyleName(sName)] = item2.slice(iPos + 1).trim();
            hasSome = true;
          }
        }
      });

      return hasSome ? dRet : null;
    }

    function scanNodeAttr(node, sPrefix, idx) {
      var sTemplate = '',
          bProp = [],
          sStyle = '',
          attrLen = node.attributes.length;
      var isSpan = false,
          isPre = false;
      for (var i2 = 0; i2 < attrLen; i2++) {
        var sNodeTag,
            item = node.attributes[i2],
            sName = item.name;
        if (sName == '$') {
          var ch,
              sValue = item.value;
          if (!sValue) return null; // invalid node

          if ((sNodeTag = node.nodeName) == 'SPAN') isSpan = true;else if (sNodeTag == 'PRE') isPre = true;

          if ((ch = sValue[0]) == '.' || ch == '/') {
            bProp.push([sName, sValue]); // is link path
            sTemplate = isSpan ? 'RefSpan' : 'RefDiv';
          } else sTemplate = sValue;
        } else if (sName == 'sty__' || sName == 'style') sStyle = item.value;else bProp.push([sName, item.value]);
      }

      if (sTemplate) {
        var dProp = {};
        if (sStyle) {
          var dStyle = sStyle[0] == '{' && sStyle.slice(-1) == '}' ? jsxJsonParse(sStyle.slice(1, -1), 'style', sPrefix, 0) : transCssStyle(sStyle);
          if (dStyle) dProp.style = dStyle;
        }

        bProp.forEach(function (item) {
          var sValue = item[1],
              sAttr = item[0]; // item[0].toLowerCase()
          var b = sAttr.split('-'); // sAttr should be lowercased
          if (b.length > 1 && dataSegment_.indexOf(b[0]) < 0) {
            // keep: dual- $dual- data- $data- aria- $aria-
            sAttr = b.shift();
            while (b.length) {
              var s = b.shift();
              if (s) sAttr += s[0].toUpperCase() + s.slice(1);
            }
          }
          if (sAttr == 'className') return; // ignore class-name

          if (sValue && sValue[0] == '{' && sValue[sValue.length - 1] == '}' && sAttr[0] != '$') dProp[sAttr] = jsxJsonParse(sValue.slice(1, -1), sAttr, sPrefix, idx);else dProp[sAttr] = sValue;
        });

        if (isPre) {
          var sText = node.innerHTML; // decodeEntity(node.innerHTML)
          if (node.children.length) node.innerHTML = ''; // clear children, avoid scan sub level
          if (sText) dProp['html.'] = sText;
          dProp['isPre.'] = true;
        } else {
          if (node.children.length == 0) {
            // <span $=Span>htmlText</span>
            var sText = node.textContent;
            if (sText) dProp['html.'] = sText;
          }
        }
        return [sTemplate, dProp, []];
      } else return null;

      /*    function decodeEntity(s) {
              if (!s) return '';
              var textArea = document.createElement('textarea');
              textArea.innerHTML = s;
              return textArea.value;
            } */
    }

    function scanJsxNode(container) {
      if (!container) return null;

      var bRet = [null, null, []],
          bKeyids = [''];
      if (scanOneLevel(bRet, container, true, '')) return bRet[2][0];else return null;

      function scanOneLevel(bOwner, htmlNode, isTopmost, sPrefix) {
        var bChild = bOwner[2];

        for (var i = 0, node; node = htmlNode.children[i]; i++) {
          // not use htmlNode.childNodes that includes text segment
          var item = scanNodeAttr(node, sPrefix, i);
          if (isTopmost) {
            if (i == 0 && (!item || item[0] != 'BodyPanel')) {
              console.log('error: root node of JSX should be BodyPanel');
              return false;
            }

            // adjust key/width/height for topmost, others will be adjusted in getInitialState() 
            var dProp_ = item[1];
            if (dProp_.hasOwnProperty('width')) {
              // dProp_.width = parseFloat(dProp_.width);
              if (isNaN(dProp_.width)) dProp_.width = null; // avoid invalid using '200px'
            }
            if (dProp_.hasOwnProperty('height')) {
              // dProp_.height = parseFloat(dProp_.height);
              if (isNaN(dProp_.height)) dProp_.height = null;
            }

            if (i > 0) return true; // if is topmost, only scan first child node
          }

          if (!item) {
            bChild.push(node);
          } else {
            bChild.push(item);

            var sKeyid = (item[1].key || i) + '';
            bKeyids.push(sKeyid);
            item[3] = bKeyids.join('.');

            var toReturn = false;
            var sPath = sPrefix ? sPrefix + '[' + i + '].' + item[0] : item[0];
            if (!scanOneLevel(item, node, false, sPath)) // quit if failed
              toReturn = true;

            bKeyids.pop();
            if (toReturn) return false;
          }
        }
        return true;
      }
    }

    function loadTemplate(sName, sPath, noDotNum) {
      var isCustom = noDotNum && !W.__design__,
          shadowCls = null;
      if (isCustom) {
        shadowCls = main[sPath];
        if (!shadowCls) isCustom = false;
      }

      var temp = isCustom ? dTemplate2[sName] : dTemplate[sName];
      if (!isCustom) {
        if (temp) return temp;
        temp = dTemplate2[sName];
        if (temp) {
          temp = dTemplate[sName] = createClass_(temp._extend());
          return temp;
        }
      }

      if (!temp) {
        var b = sName.split('.'),
            sAttr = b.shift();
        temp = T[sAttr];
        while (temp && (sAttr = b.shift())) {
          temp = temp[sAttr];
        }
        if (!temp || !temp._extend) {
          console.log('error: can not find template (' + sName + ')');
          return null;
        }
        dTemplate2[sName] = temp; // cache original template
      } // else, assert(temp && isCustom), temp also is original template

      if (isCustom) return createClass_(temp._extend(shadowCls));else {
        // cache template extending
        temp = dTemplate[sName] = createClass_(temp._extend());
        return temp;
      }
    }

    function makeReactComp(bNode, parentHasNum) {
      var tempName = bNode[0],
          sPath = bNode[3];
      var noDotNum = !noBinding && !parentHasNum && sPath && sPath.search(_dotNumPattern) < 0; // no .Number
      var temp = loadTemplate(tempName, sPath, noDotNum);
      if (!temp) return null;

      var dProp = bNode[1],
          bChild = bNode[2],
          iNum = bChild.length;
      if (noDotNum && dataSource && !W.__design__) {
        var dInitProp = dataSource[sPath];
        if (dInitProp) Object.assign(dProp, dInitProp);
      }
      var bArgs = [temp, dProp],
          hasStatic = false,
          parentHasNum_ = !noDotNum;

      for (var i = 0; i < iNum; i++) {
        var item = bChild[i];
        if (Array.isArray(item)) {
          // assert(item.length >= 4)
          var child = makeReactComp(item, parentHasNum_);
          if (child) bArgs.push(child);
        } else {
          // item is static html node
          var tmpNode,
              bList = [item];
          if (!item.classList.contains('rewgt-static')) {
            while (i + 1 < iNum && !Array.isArray(tmpNode = bChild[i + 1])) {
              // try get continous node
              i += 1;
              bList.push(tmpNode);
            }
          }
          for (var i2 = bList.length - 1; i2 >= 0; i2--) {
            tmpNode = bList[i2];
            if (tmpNode.classList.contains('rewgt-static')) {
              bList.splice(i2, 1);
              for (var i3 = tmpNode.childNodes.length - 1; i3 >= 0; i3--) {
                bList.splice(i2, 0, tmpNode.childNodes[i3]); // include text node
              }
            }
          }

          var idx = W.$staticNodes.push(bList) - 1;
          bArgs.push(React.createElement('div', { className: 'rewgt-static', name: idx + '' }));
          hasStatic = true;
        }
      }
      if (hasStatic) dProp['hasStatic.'] = true;
      return React.createElement.apply(null, bArgs);
    }

    W.$creator.scanNodeAttr = scanNodeAttr;

    var container = document.getElementById('react-container');
    var bJsxNode = scanJsxNode(container);
    if (bJsxNode) {
      var bodyEle = makeReactComp(bJsxNode, false);
      if (bodyEle) {
        W.$cachedClass = dTemplate;
        ReactDOM.render(bodyEle, container, function () {
          W.$dataSrc = null;
          container.style.visibility = 'visible';

          main.isReady = true;
          var onLoad = main.$$onLoad_;
          if (typeof onLoad == 'function') onLoad();
        });
      }
    }
  }); // end of loadBasicCss()
};

module.exports = W;

}).call(this,require('_process'))
},{"_process":202,"create-react-class":2,"react":198,"react-dom":8}],201:[function(require,module,exports){
'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var React = window.React || require('react');
var ReactDOM = window.ReactDOM || require('react-dom');
var createClass_ = window.createReactClass || require('create-react-class');

var W = require('./react_widget');
var T = W.$templates,
    utils = W.$utils,
    ex = W.$ex;
var idSetter = W.$idSetter,
    creator = W.$creator;

creator.createClass_ = createClass_;

(function (loc) {
  var b = loc.pathname.split('/');
  if (!b[0]) b.shift();
  creator.repoName = b.shift() || '';

  var sName = loc.hostname;
  creator.isLocal = sName == 'localhost' || sName == '127.0.0.1';
  creator.isGithub = sName.indexOf('.github.io') > 0;
  creator.appBase = function () {
    return '/app/files/rewgt/web';
  };
})(window.location);

utils.version = function () {
  return '1.1.1';
};

var vendorId_ = function (sUA) {
  var m = sUA.match(/trident.*rv[ :]*([\d.]+)/); // >= IE11, can not use sUA.match(/msie ([\d.]+)/)
  if (m) {
    if (parseFloat(m[1]) >= 11.0) return ['ie', m[1]];
  } else {
    m = sUA.match(/firefox\/([\d.]+)/);
    if (m) return ['firefox', m[1]];

    m = sUA.match(/chrome\/([\d.]+)/);
    if (m) return ['chrome', m[1]];

    m = sUA.match(/opera.([\d.]+)/);
    if (m) return ['opera', m[1]];

    m = sUA.match(/safari\/([\d.]+)/);
    if (m) return ['safari', m[1]];

    m = sUA.match(/webkit\/([\d.]+)/);
    if (m) return ['webkit', m[1]];
  }

  if (sUA.match(/msie ([\d.]+)/)) return ['ie', '']; // IE 10 or lower, no version number because I hate it!
  else return ['', '']; // unknown browser
}(window.navigator.userAgent.toLowerCase());

utils.vendorId = vendorId_;

var re_decode64_ = /[^A-Za-z0-9\+\/\=]/g;
var base64Key_ = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

var Base64_ = utils.Base64 = {
  encode: function encode(input) {
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var output = '',
        i = 0;

    input = Base64_._utf8_encode(input);
    while (i < input.length) {
      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);
      enc1 = chr1 >> 2;
      enc2 = (chr1 & 3) << 4 | chr2 >> 4;
      enc3 = (chr2 & 15) << 2 | chr3 >> 6;
      enc4 = chr3 & 63;

      if (isNaN(chr2)) enc3 = enc4 = 64;else if (isNaN(chr3)) enc4 = 64;
      output = output + base64Key_.charAt(enc1) + base64Key_.charAt(enc2) + base64Key_.charAt(enc3) + base64Key_.charAt(enc4);
    }

    return output;
  },

  decode: function decode(input) {
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var output = '',
        i = 0;

    input = input.replace(re_decode64_, '');
    while (i < input.length) {
      enc1 = base64Key_.indexOf(input.charAt(i++));
      enc2 = base64Key_.indexOf(input.charAt(i++));
      enc3 = base64Key_.indexOf(input.charAt(i++));
      enc4 = base64Key_.indexOf(input.charAt(i++));
      chr1 = enc1 << 2 | enc2 >> 4;
      chr2 = (enc2 & 15) << 4 | enc3 >> 2;
      chr3 = (enc3 & 3) << 6 | enc4;

      output = output + String.fromCharCode(chr1);
      if (enc3 != 64) output = output + String.fromCharCode(chr2);
      if (enc4 != 64) output = output + String.fromCharCode(chr3);
    }

    output = Base64_._utf8_decode(output);
    return output;
  },

  _utf8_encode: function _utf8_encode(string) {
    // string = string.replace(/\r\n/g,'\n');   // not replace win32 '\r\n'

    var utftext = '';
    for (var n = 0; n < string.length; n++) {
      var c = string.charCodeAt(n);

      if (c < 128) utftext += String.fromCharCode(c);else if (c > 127 && c < 2048) {
        utftext += String.fromCharCode(c >> 6 | 192);
        utftext += String.fromCharCode(c & 63 | 128);
      } else {
        utftext += String.fromCharCode(c >> 12 | 224);
        utftext += String.fromCharCode(c >> 6 & 63 | 128);
        utftext += String.fromCharCode(c & 63 | 128);
      }
    }
    return utftext;
  },

  _utf8_decode: function _utf8_decode(utftext) {
    var c,
        c2,
        c3,
        i = 0,
        string = '';
    while (i < utftext.length) {
      c = utftext.charCodeAt(i);
      if (c < 128) {
        string += String.fromCharCode(c);
        i++;
      } else if (c > 191 && c < 224) {
        c2 = utftext.charCodeAt(i + 1);
        string += String.fromCharCode((c & 31) << 6 | c2 & 63);
        i += 2;
      } else {
        c2 = utftext.charCodeAt(i + 1);
        c3 = utftext.charCodeAt(i + 2);
        string += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        i += 3;
      }
    }
    return string;
  }
};

var containNode_ = null;
var topmostWidget_ = null;
var inFirstLoading_ = true;
var inReactReloading_ = false;
var justFirstRender_ = false; // root node just first render and before inFirstLoading change to false
var pendingRefers_ = [];

var splitterMouseDn_ = false;

var internalDomKey_ = '';
var getKeyFromNode_ = null;

var findDomNode_ = ReactDOM.findDOMNode;
var reactClone_ = React.cloneElement;
var reactCreate_ = React.createElement;
var reactIsValid_ = React.isValidElement;
var children2Arr_ = React.Children.toArray;

var hasOwn_ = Base64_.hasOwnProperty;

var ReferenceProps_ = { '$': true, styles: true,
  'tagName.': true, 'isReference.': true, 'hookTo.': true,
  width: true, height: true, className: true, 'childInline.': true
};

var ctrlExprCmd_ = ['for', 'if', 'elif', 'else'];

/* function htmlEncode(s) {
  return s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
} */

function boolToStr_(b) {
  return b ? '1' : '';
}

function isUnderBody_(comp) {
  var owner = comp.parentOf(true);
  return owner && owner.widget === topmostWidget_ || false;
}
utils.isUnderBody = isUnderBody_;

function keyOfNode_(node) {
  if (!getKeyFromNode_) {
    if (node.hasAttribute('data-reactid')) {
      getKeyFromNode_ = function getKeyFromNode_(node) {
        return keyOf(node.getAttribute('data-reactid') || '');
      };
    } else {
      for (var sKey in node) {
        if (sKey.indexOf('__reactInternalInstance$') == 0) {
          internalDomKey_ = sKey;
          break;
        }
      }
      if (!internalDomKey_) {
        console.log('warning: invalid react version!');
        return '';
      }

      getKeyFromNode_ = function getKeyFromNode_(node) {
        return keyidOf(node[internalDomKey_]);
      };
    }
  }

  return getKeyFromNode_(node);

  function keyOf(sKeyid) {
    sKeyid = sKeyid.split('.').pop();
    if (sKeyid[0] == '$') sKeyid = sKeyid.slice(1);
    return sKeyid;
  }

  function keyidOf(internal) {
    var ele = internal && internal._currentElement;
    var owner = ele && ele._owner;
    var comp = owner && owner._instance;
    var gui = comp && comp.$gui;
    return gui ? gui.keyid + '' : '';
  }
}

utils.keyOfNode = function (node) {
  return keyOfNode_(node);
};
utils.dragInfo = {
  inDragging: false, justResized: false
};

var identicalId_ = 4; // 0,1,2 reserved
function identicalId() {
  return ++identicalId_;
}
utils.identicalId = identicalId;

function classNameOf_(comp) {
  var s = comp.$gui.className,
      s2 = comp.state.klass;
  if (s) return s2 ? s + ' ' + s2 : s;else return s2 || '';
}
utils.classNameOf = classNameOf_;

function hasClass_(sClsName, cls) {
  // cls: ['clsA','clsB']  'clsA'  'clsA clsB'
  if (!sClsName) return false;
  var s2 = ' ' + sClsName + ' ';
  var bCls = Array.isArray(cls) ? cls : String(cls).split(/ +/),
      iLen = bCls.length;

  for (var i = 0; i < iLen; i++) {
    var sCls = bCls[i];
    if (sCls && s2.indexOf(' ' + sCls + ' ') >= 0) return true;
  }
  return false;
}

utils.hasClass = function (comp, cls) {
  // cls: ['clsA','clsB']  'clsA'  'clsA clsB'
  return hasClass_(classNameOf_(comp), cls);
};

function addClass_(sClsName, cls) {
  var s = ' ' + (sClsName || '') + ' ';
  var bCls = Array.isArray(cls) ? cls : String(cls).split(/ +/),
      iLen = bCls.length;

  for (var i = 0; i < iLen; i++) {
    var sCls = bCls[i];
    if (sCls) {
      var iPos = s.indexOf(' ' + sCls + ' ');
      if (iPos < 0) s += sCls + ' ';
    }
  }

  return s.trim();
}

utils.addClass = function (comp, cls) {
  var sKlass = comp.state.klass || '';
  var s = ' ' + (comp.$gui.className || '') + ' ' + sKlass + ' ';

  var sTail = '';
  var bCls = Array.isArray(cls) ? cls : String(cls).split(/ +/),
      iLen = bCls.length;
  for (var i = 0; i < iLen; i++) {
    var sCls = bCls[i];
    if (sCls && s.indexOf(' ' + sCls + ' ') < 0) sTail += ' ' + sCls;
  }

  if (sTail) {
    if (sKlass) comp.duals.klass += sTail;else comp.duals.klass = sTail.slice(1);
    return true; // changed
  }
  return false; // not changed
};

function removeClass_(sClsName, cls) {
  if (!sClsName) return '';

  var s = ' ' + sClsName + ' ';
  var bCls = Array.isArray(cls) ? cls : String(cls).split(/ +/);

  for (var i = bCls.length - 1; i >= 0; i--) {
    var sCls = bCls[i];
    if (sCls) s = s.replace(' ' + sCls + ' ', ' ');
  }
  return s.trim();
}

function removeCls_(sClass, sKlass, cls, bAdd) {
  var s1 = ' ' + sClass,
      i1 = s1.length;
  var s2 = s1 + ' ' + sKlass + ' ';

  var bCls = Array.isArray(cls) ? cls : String(cls).split(/ +/);
  for (var i = bCls.length - 1; i >= 0; i--) {
    var iPos,
        sCls = bCls[i];
    if (sCls && (iPos = s2.indexOf(' ' + sCls + ' ')) >= 0) {
      if (iPos < i1) // can not remove className part
        throw new Error('can not remove readonly class name: ' + sCls);
      s2 = s2.slice(0, iPos) + s2.slice(iPos + sCls.length + 1);
    }
    // else, not exist sCls
  }

  if (Array.isArray(bAdd)) {
    var iLen2 = bAdd.length;
    for (var ii = 0; ii < iLen2; ii++) {
      var sCls = bAdd[ii];
      if (sCls && s2.indexOf(' ' + sCls + ' ') < 0) s2 += sCls + ' ';
    }
  }

  return s2.slice(i1).trim();
}

utils.removeClass = function (comp, cls, bAdd) {
  var sKlass = comp.state.klass || '';
  var sNew = removeCls_(comp.$gui.className || '', sKlass, cls, bAdd);
  if (sKlass !== sNew) {
    comp.duals.klass = sNew;
    return true; // changed
  }
  return false; // not changed
};

function setClass_(comp, cls) {
  var bCls = Array.isArray(cls) ? cls : String(cls).split(/ +/);

  var bRmv = [],
      bAdd = [];
  for (var i = bCls.length - 1; i >= 0; i--) {
    var sCls = bCls[i];
    if (sCls) {
      var ch = sCls[0];
      if (ch == '-') bRmv.unshift(sCls.slice(1));else if (ch == '+') bAdd.unshift(sCls.slice(1));else bAdd.unshift(sCls);
    }
  }

  return utils.removeClass(comp, bRmv, bAdd);
}
utils.setClass = setClass_;

var S123456_ = ['S1', 'S2', 'S3', 'S4', 'S5', 'S6'];

function analyseMerge_(cls) {
  var bCls = Array.isArray(cls) ? cls : String(cls).split(/ +/);
  var bRmv = [],
      bAdd = [];
  for (var i = bCls.length - 1; i >= 0; i--) {
    var sCls = bCls[i];
    if (sCls) {
      var bSeg = sCls.split('-'),
          iSeg = bSeg.length;
      if (iSeg > 1) {
        for (var ii = 1; ii < iSeg; ii++) {
          var sTmp = bSeg.shift();
          bSeg.push(sTmp);
          bRmv.push(bSeg.join('-'));
        }
      } else {
        var iPos;
        if (sCls[0] == 'S' && (iPos = S123456_.indexOf(sCls)) >= 0) {
          S123456_.forEach(function (item, idx) {
            if (idx != iPos) bRmv.push(item); // take S1~S6 as one group
          });
        }
      }

      bAdd.push(sCls);
    }
  }
  return [bRmv, bAdd];
}

creator.mergeClass = function (sClass, sKlass, sKlassNew) {
  // sKlassNew merge into sKlass
  var b = analyseMerge_(sKlassNew),
      bRmv = b[0],
      bAdd = b[1];
  return removeCls_(sClass, sKlass, bRmv, bAdd);
};

utils.mergeClass = function (comp, cls) {
  var b = analyseMerge_(cls),
      bRmv = b[0],
      bAdd = b[1];
  return utils.removeClass(comp, bRmv, bAdd);
};

// sClsList = klassNames_('cls_a')
// sClsList = klassNames_(['cls_b','cls_c'])
// sClsList = klassNames_({cls_d:true,cls_e:false})
// sClsList = klassNames_('cls_a',['cls_b'],{cls_c:true})
function klassNames_() {
  var bKlass = [];

  for (var i = 0; i < arguments.length; i++) {
    var arg = arguments[i];
    if (!arg) continue;

    var argType = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
    if (argType === 'string' || argType === 'number') bKlass.push(arg);else if (Array.isArray(arg)) bKlass.push(klassNames_.apply(null, arg));else if (argType === 'object') {
      for (var key in arg) {
        if (hasOwn_.call(arg, key) && arg[key]) bKlass.push(key);
      }
    }
  }

  return bKlass.join(' ');
}
utils.klassNames = klassNames_;

function clearKlass_(s, ctrlCls) {
  var b = s.split(/ +/);
  if (Array.isArray(ctrlCls)) {
    for (var i = b.length - 1; i >= 0; i--) {
      var ss = b[i];
      if (!ss || ctrlCls.indexOf(ss) >= 0) b.splice(i, 1);
    }
  } else {
    for (var i = b.length - 1; i >= 0; i--) {
      var ss = b[i];
      if (!ss || ctrlCls[ss]) b.splice(i, 1);
    }
  }
  return b.join(' ');
}
utils.clearKlass = clearKlass_;

utils.setupKlass = function (sKlass, ctrlCls) {
  var b = [clearKlass_(sKlass, ctrlCls)],
      len = arguments.length;
  for (var i = 2; i < len; i++) {
    b.push(arguments[i]);
  }
  return klassNames_.apply(null, b);
};

function containKlass_(s, cls) {
  if (Array.isArray(cls)) {
    var i,
        iLen = cls.length;
    for (i = 0; i < iLen; i++) {
      if (containKlass_(s, cls[i])) return true;
    }
    return false;
  }

  if (cls && typeof cls == 'string') {
    var iPos = s.indexOf(cls);
    while (iPos >= 0) {
      var preOk = iPos == 0 || s[iPos - 1] == ' ';
      if (preOk) {
        var ch = s[iPos + cls.length];
        if (!ch || ch == ' ') // post also OK
          return true;
      }
      iPos = s.indexOf(cls, iPos + cls.length);
    }
  }
  return false;
}
utils.containKlass = containKlass_;

var re_react_key_ = /^(\.\$)+/g;

function getElementKey_(child) {
  var s = (child.key || '').replace(re_react_key_, '');
  if (s[0] == '.') return s.slice(1);else return s;
}
utils.keyOfElement = getElementKey_;

function getRefProp_(sourProp) {
  var dProp = {};
  Object.keys(sourProp).forEach(function (sKey) {
    if (!ReferenceProps_[sKey]) dProp[sKey] = sourProp[sKey];
  });
  if (sourProp.width) dProp.width = sourProp.width; // not: 0/undefined/null
  if (sourProp.height) dProp.height = sourProp.height;
  return dProp;
}

function getWdgtType_(targ) {
  // targ can be: widget or component
  var comp = targ;
  if (targ && targ.component && !targ.props) comp = targ.component;
  if (!comp) return 'unknown';

  if (comp.$gui.isPanel) return 'panel';

  if (hasClass_(comp.props.className, 'rewgt-unit')) {
    if (comp.props['childInline.']) return 'paragraph';else return 'unit';
  } else if (comp.props['childInline.']) return 'span';else if (comp.widget === topmostWidget_) return 'root';else return 'unknown';
}
utils.getWdgtType = getWdgtType_;

utils.eachElement = function (comp, callback) {
  if (!callback) {
    var b = [];
    comp.$gui.comps.forEach(function (item) {
      if (item) b.push(item);
    });
    return b;
  }

  comp.$gui.comps.forEach(function (item, idx) {
    if (item) callback(item, idx);
  });
};

utils.setElement = function (comp, idx, ele) {
  comp.$gui.comps[idx] = ele;
};

utils.eachComponent = function (comp, callback) {
  if (!callback) {
    var b = [];
    utils.eachComponent(comp, function (childObj) {
      b.push(childObj);
    });
    return b;
  }

  var wdgt = comp.widget;
  if (!wdgt) return;

  comp.$gui.comps.forEach(function (item, idx) {
    if (!item) return;
    var sKey = getElementKey_(item);
    var child = sKey && wdgt[sKey],
        childObj = child && child.component;
    if (childObj) callback(childObj, idx);
  });
};

function setupRenderProp_(comp, dStyle) {
  var lnkPath,
      cls = classNameOf_(comp),
      dState = comp.state,
      gui = comp.$gui;
  var tagAttrs = gui.tagAttrs,
      dataset = gui.dataset2;
  var props = Object.assign({ style: dStyle || dState.style }, gui.eventset);
  for (var i = 0, sKey; sKey = tagAttrs[i]; i++) {
    props[sKey] = dState[sKey];
  }

  var data_ = props.data;
  if (data_ !== undefined && typeof data_ != 'string') delete props.data; // only render string type of duals.data

  for (var i = 0, sKey; sKey = dataset[i]; i++) {
    props[sKey] = dState[sKey];
  }
  if (cls) props.className = cls;

  if (W.__design__ && (lnkPath = dState['data-group.opt'])) props['data-group.opt'] = lnkPath; // help for designer
  return props;
}

function fireTrigger_(oldData, comp) {
  // step 1: get trigger data
  if (arguments.length >= 3) {
    var value = arguments[2],
        isOK = false;
    if (value) {
      var tp = typeof value === 'undefined' ? 'undefined' : _typeof(value);
      if (tp == 'string') {
        value = [value];
        isOK = true;
      } else if (tp == 'object') {
        if (Array.isArray(value)) {
          var modifier;
          if (typeof value[0] == 'string' && _typeof(modifier = value[1]) == 'object') {
            if (typeof modifier.$trigger != 'string') // value is [sPath,modifier]
              value = [value];
            // else, value is action array, use it, not copy by value.slice(0)
          }
          // else, value is action array
          isOK = true;
        } else if (typeof value.$trigger == 'string') {
          // newOpt for pop window
          isOK = true;
          value = [value];
        }
      }
    }
    if (isOK) comp.duals.trigger = value;else {
      console.log('warning: invalid trigger data (key=' + comp.$gui.keyid + ')');
      return; // ignore
    }
  } else {
    // reuse comp.duals.trigger, try update $trigger first
    var gui = comp.$gui,
        syncId = gui.syncTrigger;
    if (syncId && syncId > 1) {
      // gui.syncTrigger=1 means no reverse fire $trigger
      if (syncId < identicalId_) {
        // need re-eval $trigger, must not in $trigger evaluating
        var fn = gui.exprAttrs.trigger;
        if (fn) {
          try {
            gui.syncTrigger = 2; // avoid re-call fireTrigger_()
            fn(comp); // auto renew gui.syncTrigger, and auto assign duals.trigger
          } catch (e) {
            console.log(e);
          }
        }
      } else gui.syncTrigger = 3; // from $trigger evaluating, let next can fire
    }
  }

  setTimeout(function () {
    // maybe 'duals.trigger = xx' just called, run in next tick
    if (!comp.isHooked) return;
    if (oldData === comp.state.trigger) return; // maybe data not change and not isForce
    fireOptTrigger_(comp); // if comp.state.trigger not array, will be ignored
  }, 0);

  function fireOptTrigger_(thisObj) {
    var bRet = thisObj.state.trigger;
    if (!Array.isArray(bRet)) return; // unknown format

    bRet = bRet.slice(0); // copy it
    var item = bRet.shift();
    while (item) {
      var sPath2,
          tp2 = typeof item === 'undefined' ? 'undefined' : _typeof(item);
      if (tp2 == 'string') triggerCheck(item, null); // item must not '' // can not trigger self
      else if (tp2 == 'object') {
          if (Array.isArray(item)) triggerData(item[0] || '', item[1], item[2] || 'data'); // update duals.data
          else if (typeof (sPath2 = item.$trigger) == 'string') {
              var cfgData = Object.assign({}, item);
              delete cfgData.$trigger;
              triggerCheck(sPath2, cfgData);
            } else break; // unexpected, no warning
        } else break; // unexpected, no warning

      item = bRet.shift();
    }

    function triggerData(sPath, modifier, sAttr) {
      if (typeof sPath != 'string' || !modifier) return;

      var targ = sPath ? getCompByPath_(thisObj, sPath) : thisObj;
      if (!targ) {
        console.log('warning: can not find target (' + sPath + ')');
        return;
      }
      if (!hasOwn_.call(targ.duals, sAttr)) return; // ignore, no warning

      setTimeout(function () {
        targ.duals[sAttr] = ex.update(targ.duals[sAttr], modifier);
      }, 0);
    }

    function triggerCheck(sPath, cfgData) {
      var dCfg = undefined;
      if (cfgData && (typeof cfgData === 'undefined' ? 'undefined' : _typeof(cfgData)) == 'object') dCfg = cfgData;

      setTimeout(function () {
        var targ = sPath ? getCompByPath_(thisObj, sPath) : thisObj;
        if (!targ) {
          console.log('warning: can not find target (' + sPath + ')');
          return;
        }
        if (targ === thisObj) {
          console.log('warning: trigger can not fire widget itself.');
          return;
        }

        if (targ.props['isOption.'] && targ.setChecked) targ.setChecked(null, dCfg); // callback is null
      }, 0);
    }
  }
}
utils.fireTrigger = function (comp) {
  if (arguments.length >= 2) fireTrigger_(undefined, comp, arguments[1]);else fireTrigger_(undefined, comp);
};

function chooseIdentical_(iOld) {
  return iOld === identicalId_ ? identicalId() : identicalId_;
}

utils.setChildren = function (comp, children, insertEle, callback) {
  if (typeof insertEle == 'function') {
    callback = insertEle;
    insertEle = undefined;
  }

  var gui = comp.$gui;
  if (!children) children = gui.comps; // pass null, means $gui.comps
  if (insertEle) {
    if (gui.isPanel || comp.widget === topmostWidget_) {
      // fatal error
      console.log('error: invalid argument (insertEle) for panel');
      insertEle = undefined;
    } else {
      if (Array.isArray(insertEle)) {
        if (insertEle.length == 0) insertEle = null;
      } else {
        if (!reactIsValid_(insertEle) || insertEle.props['childInline.'] !== undefined) {
          console.log('error: invalid argument (insertEle)');
          insertEle = null;
        }
      }
    }
  }

  if (!Array.isArray(children)) return; // fatal error

  if (insertEle || insertEle === null) gui.insertEle = insertEle;
  if (children === gui.comps) {
    if (callback) {
      if (gui.inSync) {
        setTimeout(function () {
          callback();
        }, 0);
      } else callback();
    }
    return; // no need analyse
  }

  var bChild = [],
      argLen = children.length;
  for (var i = 0; i < argLen; i++) {
    var item = children[i];
    if (Array.isArray(item)) loadReactTreeEx_(bChild, item, W.$staticNodes, W.$cachedClass);else if (typeof item == 'string') bChild.push(reactCreate_(comp.props['childInline.'] ? Span__ : P__, { 'html.': item })); // item maybe ''
    else if (reactIsValid_(item)) bChild.push(item);
    // else, unknown format, ignore it
  }

  var existNum = 0,
      rmvEx = 0;
  bChild.forEach(function (item, idx) {
    // if (!item) return;

    var sKey = getElementKey_(item);
    if (!sKey) {
      rmvEx += 1;
      return; // ignore clone, change removeNum wait to rescan that will clone 'keyid.'
    }

    if (typeof gui.compIdx[sKey] == 'number') {
      // already exist, ignore clone
      existNum += 1;
      return;
    }

    if (item.props['childInline.'] !== undefined) {
      // is shadow widget node
      var iTmp = parseInt(sKey);
      var dProp = { key: sKey, // no need set 'hookTo.'
        'keyid.': iTmp + '' === sKey ? iTmp : sKey
      };
      bChild[idx] = reactClone_(item, dProp);
    }
    // else, no need clone original react node
  });

  // gui.removeNum only can increase, can not decrease
  gui.removeNum += Math.max(0, gui.comps.length - existNum) + rmvEx;
  gui.comps = bChild;
  if (insertEle || insertEle === null) gui.insertEle = insertEle;

  if (!gui.inSync) {
    if (gui.compState >= 1.5) {
      comp.setState({ id__: chooseIdentical_(comp.state.id__) }, callback); // trigger re-render
    } else {
      // maybe id__ is 1, should process at next tick
      setTimeout(function () {
        comp.setState({ id__: chooseIdentical_(comp.state.id__) }, callback); // trigger re-render
      }, 0);
    }
  } else {
    if (callback) {
      setTimeout(function () {
        callback();
      }, 0);
    }
  }
};

function getTemplate_(sName) {
  if (!sName || typeof sName != 'string') return null;

  var temp = W.$cachedClass[sName];
  if (temp || temp === null) // if temp is null, means invalid WTC
    return temp;

  var ch,
      b = sName.split('.'),
      sAttr = b.shift();
  temp = T[sAttr];
  while (temp && (sAttr = b.shift())) {
    temp = temp[sAttr];
  }
  if (!temp || !temp._extend) W.$cachedClass[sName] = temp = null; // set null, no try next time
  else W.$cachedClass[sName] = temp = createClass_(temp._extend());
  return temp;
}

function getWTC_(cls) {
  // getWTC('*') getWTC('usr.*') getWTC(['*','Panel','usr.Submit','usr2.*'])
  var ret = {},
      tp = typeof cls === 'undefined' ? 'undefined' : _typeof(cls);

  if (tp == 'string') {
    if (!cls) cls = '*';

    var b = cls.split('.'),
        isAll = false;
    if (b[b.length - 1] == '*') {
      isAll = true;
      b.pop();
    }
    var sPath = b.join('.');

    var temp = T,
        sAttr = b.shift(),
        sLast = '';
    if (sAttr) {
      temp = temp[sLast = sAttr];
      while (temp && (sAttr = b.shift())) {
        temp = temp[sLast = sAttr];
      }
    }

    if (temp) {
      if (isAll) {
        if (temp._extend) {
          if (sLast) ret[sLast] = createClass_(temp._extend());
        } else scanAllSub(ret, sPath, temp); // maybe sPath = ''
      } else {
        // !isAll, cls must be full path
        if (temp._extend) {
          var tmp = W.$cachedClass[cls];
          if (tmp !== null && sLast) {
            if (!tmp) tmp = W.$cachedClass[cls] = createClass_(temp._extend());
            ret[sLast] = tmp;
          }
        }
        // else, ignore
      }
    }
    // else, ignore
  } else if (Array.isArray(cls)) {
    var iLen = cls.length;
    for (var i = 0; i < iLen; i += 1) {
      var item = cls[i];
      if (item && typeof item == 'string') Object.assign(ret, getWTC_(item));
    }
  }
  // else, ignore

  return ret;

  function scanAllSub(ret, sPath, temp) {
    var b = Object.keys(temp);
    b.forEach(function (item) {
      var temp_ = temp[item];
      if (!temp_ || !temp_._extend) return;

      var sPath_ = sPath ? sPath + '.' + item : item;
      var tmp = W.$cachedClass[sPath_];
      if (tmp !== null) {
        if (!tmp) tmp = W.$cachedClass[sPath_] = createClass_(temp_._extend());
        ret[item] = tmp;
      }
    });
  }
}
utils.getWTC = getWTC_;

var browserVendorPrefix_ = {
  ie: 'ms',
  firefox: 'Moz',
  opera: 'O',
  chrome: 'Webkit',
  safari: 'Webkit',
  webkit: 'Webkit'
};

ex.regist('vendor', function () {
  return browserVendorPrefix_[vendorId_[0]] || '';
});

ex.regist('vendorId', function () {
  return '-' + (browserVendorPrefix_[vendorId_[0]] || '').toLowerCase() + '-';
});

ex.regist('__design__', function () {
  return parseInt(W.__design__ || 0);
});

ex.regist('__debug__', function () {
  return parseInt(W.__debug__ || 0);
});

ex.regist('time', function (tm) {
  var t;
  if (tm) t = new Date(tm);else t = new Date();
  return t.valueOf();
});

ex.regist('isFalse', function (b) {
  return !b;
});

ex.regist('isTrue', function (b) {
  return !!b;
});

ex.regist('parseInt', function (s) {
  return parseInt(s);
});

ex.regist('parseFloat', function (s) {
  return parseFloat(s);
});

ex.regist('escape', function (s) {
  return escape(s);
});

ex.regist('unescape', function (s) {
  return unescape(s);
});

ex.regist('evalInfo', function () {
  // return [comp,sKey,iTimeId] or undefined
  var ret = undefined;
  var comp = this.component;
  if (!comp) return ret; // return undefined

  var wdgt = comp.widget,
      callspace = wdgt && wdgt.$callspace;
  if (callspace) {
    ret = callspace.exprSpace.$info;
    if (callspace.forSpace) {
      var ret2 = callspace.forSpace.exprSpace.$info;
      if (ret) {
        if (ret2 && ret2[2] >= ret[2]) // choose newest one
          ret = ret2;
      } else ret = ret2;
    }
  }
  return ret;
});

ex.regist('tagValue', function (modifier) {
  // for: ex.update(data,{$set_$merge:{}}) ex.update(data,{a:{},b:{}}}
  if ((typeof modifier === 'undefined' ? 'undefined' : _typeof(modifier)) != 'object') return modifier;

  var tm,
      ret = Object.assign({}, modifier),
      root = ret.$set;
  if (root) {
    if ((typeof root === 'undefined' ? 'undefined' : _typeof(root)) != 'object') return modifier;
    root = ret.$set = Object.assign({}, root);
  } else {
    root = ret.$merge;
    if (root) {
      if ((typeof root === 'undefined' ? 'undefined' : _typeof(root)) != 'object') return modifier;
      root = ret.$merge = Object.assign({}, root);
    } else {
      tm = ex.time();
      Object.keys(ret).forEach(function (sKey) {
        if (sKey[0] == '$') return;
        var item = ret[sKey];
        if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) != 'object') return;

        item = ret[sKey] = Object.assign({}, item);
        var root2 = item.$set;
        if (root2) {
          if ((typeof root2 === 'undefined' ? 'undefined' : _typeof(root2)) != 'object') return;
          root2 = item.$set = Object.assign({}, root2);
          root2.time = tm;
        } else {
          root2 = item.$merge;
          if (root2) {
            if ((typeof root2 === 'undefined' ? 'undefined' : _typeof(root2)) != 'object') return;
            root2 = item.$merge = Object.assign({}, root2);
            root2.time = tm;
          } else {
            if (hasOwn_.call(item, 'value')) item.time = { $set: tm };
            // else, ignore
          }
        }
      });

      return ret;
    }
  }

  tm = ex.time();
  Object.keys(root).forEach(function (sKey) {
    if (sKey[0] != '$') {
      var item = root[sKey];
      if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) == 'object') item.time = tm;
    }
  });

  return ret;
});

ex.regist('tagFired', function () {
  var argLen = arguments.length;
  if (argLen < 2) return '';

  var i,
      data = arguments[0];
  for (i = 1; i < argLen; i++) {
    var item = data[arguments[i]];
    if (!item || !item.time) return '';
  }

  // all meet, reset time
  for (i = 1; i < argLen; i++) {
    data[arguments[i]].time = 0;
  }
  return 'true';
});

ex.regist('setChecked', function (sPath, newOpt) {
  var info = this.evalInfo();
  var comp = info && info[0];
  if (comp) {
    var targ = getCompByPath_(comp, sPath);
    if (targ && targ.props['isOption.']) targ.setChecked(null, newOpt); // callback=null
  }
});

ex.regist('elementOf', function (sPath) {
  var info = this.evalInfo();
  var comp = info && info[0],
      ele = comp && comp.elementOf(sPath);
  return ele || null;
});

function getCurrExprSpace_(ex, comp) {
  var wdgt = comp && comp.widget;
  var callspace = wdgt && wdgt.$callspace;
  if (callspace) {
    if (callspace.forSpace) {
      var info = ex.evalInfo();
      if (info && info[1] == 'for') // in for-expr
        callspace = callspace.forSpace;
    }
    return callspace.exprSpace;
  } else return null;
}

ex.regist('setVar', function (sName, value) {
  if (!sName || typeof sName != 'string') return value; // fatal error

  var comp = this.component,
      space = getCurrExprSpace_(this, comp);
  if (!space) console.log('warning: invalid callspace for ex.setVar(' + sName + ')');else space[sName] = value;
  return value;
});

ex.regist('log', function () {
  // return [comp,sKey,iTimeId] or undefined
  var info = this.evalInfo(),
      sOwner = '';
  if (info) {
    try {
      var comp = info[0],
          wdgt = comp && comp.widget;
      if (wdgt) sOwner = wdgt.getPath() + ':' + info[1];
    } catch (e) {}
  }

  var sOut,
      iLen = arguments.length;
  if (sOwner) sOut = 'ex(' + sOwner + ')>';else sOut = 'ex>';
  if (iLen <= 0) {
    if (sOwner) console.log(sOut);
    return;
  }

  for (var i = 0; i < iLen; i++) {
    sOut += ' ' + arguments[i];
  }
  console.log(sOut);
});

ex.regist('map', function (data, sExpr) {
  if (!Array.isArray(data)) return []; // fatal error
  var itemLen = data.length;
  if (!itemLen) return [];
  if (!sExpr || typeof sExpr != 'string') return data.slice(0);

  var bAst = setupExprAst(sExpr, null, 'map');
  if (!bAst) return [];
  if (bAst[0] == 61) bAst = bAst[1][2]; // ignore headId // expr_items_1 : expr : expr

  var comp = this.component,
      space = getCurrExprSpace_(this, comp); // comp can undefined
  if (space) adjustExprAst(bAst, []);else space = {};

  var bRet = [];
  space.$count = itemLen;
  for (var ii = 0; ii < itemLen; ii++) {
    space.$item = data[ii];
    space.$index = ii;
    try {
      bRet.push(evalInSpace(bAst, space));
    } catch (e) {
      // ignore this item 
      console.log('error: run map() failed ($index=' + ii + ')');
      console.log(e);
    }
  }
  delete space.$item;
  delete space.$index;
  delete space.$count;

  return bRet;
});

ex.regist('filter', function (data, sExpr) {
  if (!Array.isArray(data)) return []; // fatal error
  var itemLen = data.length;
  if (!itemLen) return [];
  if (!sExpr || typeof sExpr != 'string') sExpr = '$item !== null';

  var bAst = setupExprAst(sExpr, null, 'filter');
  if (!bAst) return [];
  if (bAst[0] == 61) bAst = bAst[1][2]; // ignore headId // expr_items_1 : expr : expr

  var comp = this.component,
      space = getCurrExprSpace_(this, comp);
  if (space) adjustExprAst(bAst, []);else space = {};

  var bRet = [];
  space.$count = itemLen;
  for (var ii = 0; ii < itemLen; ii++) {
    var oneItem = space.$item = data[ii];
    space.$index = ii;
    try {
      if (evalInSpace(bAst, space)) bRet.push(oneItem);
    } catch (e) {
      // ignore this item 
      console.log('error: run filter() failed ($index=' + ii + ')');
      console.log(e);
    }
  }
  delete space.$item;
  delete space.$index;
  delete space.$count;

  return bRet;
});

ex.regist('order', function (data) {
  // ex.order(items,"attr",-1) or ex.order(items,["attr",-1])
  if (!Array.isArray(data)) return data;

  var arg,
      bList = null,
      argLen = arguments.length,
      byInc = true;
  if (argLen >= 2) {
    arg = arguments[argLen - 1];
    if (typeof arg == 'number') {
      if (arg < 0) byInc = false;
      argLen -= 1;
    } else if (argLen == 2 && Array.isArray(arg)) {
      bList = arg;
      argLen = bList.length;
      if (argLen >= 1 && typeof (arg = bList[argLen - 1]) == 'number') {
        if (arg < 0) byInc = false;
        argLen -= 1;
      }
    }
  }

  var bAttr = [];
  if (bList) {
    for (var i = 0; i < argLen; i++) {
      arg = bList[i];
      if (arg && typeof arg == 'string') bAttr.push(arg.split('.'));
    }
  } else {
    for (var i = 1; i < argLen; i++) {
      arg = arguments[i];
      if (arg && typeof arg == 'string') bAttr.push(arg.split('.'));
    }
  }

  var attrNum = bAttr.length,
      data2 = data.slice(0); // no change source data
  if (!attrNum) {
    return data2.sort(function (a, b) {
      return byInc ? a === b ? 0 : a > b ? 1 : -1 : a === b ? 0 : a > b ? -1 : 1;
    });
  } else {
    return data2.sort(function (a, b) {
      for (var i = 0, attr; attr = bAttr[i]; i++) {
        var aa = attrOf(a, attr),
            bb = attrOf(b, attr);
        if (aa === bb) continue;else if (aa > bb) return byInc ? 1 : -1;else return byInc ? -1 : 1;
      }
      return 0;
    });
  }

  function attrOf(data, b) {
    var sAttr,
        ret = data,
        i = 0;
    while (sAttr = b[i++]) {
      if (ret) ret = ret[sAttr];else break;
    }
    return ret;
  }
});

ex.regist('jsonp', function (req, initValue) {
  var info = this.evalInfo(),
      comp = null,
      sKey = '';
  if (info) {
    comp = info[0];sKey = info[1];
    if (initValue && comp && hasOwn_.call(comp.duals, sKey)) {
      if (comp.state[sKey] === undefined) comp.duals[sKey] = initValue;
    }
  }

  // req.callback should not pre-defined
  req = Object.assign({}, req);
  req.callback = function (ret) {
    if (comp && sKey && hasOwn_.call(comp.duals, sKey)) comp.duals[sKey] = ret; // ret maybe null, if req.notifyError is true and request failed
  };
  utils.jsonp(req);
  return comp && sKey ? comp.state[sKey] : undefined;
});

ex.regist('ajax', function (req, initValue) {
  var info = this.evalInfo(),
      comp = null,
      sKey = '';
  if (info) {
    comp = info[0];sKey = info[1];
    if (initValue && comp && sKey && hasOwn_.call(comp.duals, sKey)) {
      if (comp.state[sKey] === undefined) comp.duals[sKey] = initValue; // initValue should be {status:xx, data:xx}
    }
  }

  // req.success and req.error should not pre-defined
  req.success = function (ret) {
    if (comp && sKey && hasOwn_.call(comp.duals, sKey)) comp.duals[sKey] = { status: 'success', data: ret };
  };
  req.error = function (xhr, statusText) {
    if (comp && sKey && hasOwn_.call(comp.duals, sKey)) comp.duals[sKey] = { status: statusText || 'error', data: null };
  };
  utils.ajax(req);
  return comp ? comp.state[sKey] : undefined;
});

// Lexer, port from https://github.com/aaditmshah/lexer
//-----------------------------------------------------
function Lexer(defunct) {
  if (typeof defunct !== "function") defunct = Lexer.defunct;

  var tokens = [],
      rules = [],
      remove = 0;

  this.state = 0;
  this.index = 0;
  this.input = "";

  this.addRule = function (pattern, action, start) {
    var global = pattern.global;

    if (!global) {
      var flags = "g";
      if (pattern.multiline) flags += "m";
      if (pattern.ignoreCase) flags += "i";
      pattern = new RegExp(pattern.source, flags);
    }

    if (!Array.isArray(start)) start = [0];

    rules.push({
      pattern: pattern,
      global: global,
      action: action,
      start: start
    });

    return this;
  };

  this.setInput = function (input) {
    remove = 0;
    this.state = 0;
    this.index = 0;
    tokens.length = 0;
    this.input = input;
    return this;
  };

  this.lex = function () {
    if (tokens.length) return tokens.shift();

    this.reject = true;

    while (this.index <= this.input.length) {
      var matches = scan.call(this).splice(remove);
      var index = this.index;

      while (matches.length) {
        if (this.reject) {
          var match = matches.shift();
          var result = match.result;
          var length = match.length;
          this.index += length;
          this.reject = false;
          remove++;

          var token = match.action.apply(this, result);
          if (this.reject) this.index = result.index;else if (typeof token !== "undefined") {
            if (Array.isArray(token)) {
              tokens = token.slice(1);
              token = token[0];
            }
            if (length) remove = 0;
            return token;
          }
        } else break;
      }

      var input = this.input;

      if (index < input.length) {
        if (this.reject) {
          remove = 0;
          var token = defunct.call(this, input.charAt(this.index++));
          if (typeof token !== "undefined") {
            if (Array.isArray(token)) {
              tokens = token.slice(1);
              return token[0];
            } else return token;
          }
        } else {
          if (this.index !== index) remove = 0;
          this.reject = true;
        }
      } else if (matches.length) this.reject = true;else break;
    }
  };

  function scan() {
    var matches = [];
    var index = 0;

    var state = this.state;
    var lastIndex = this.index;
    var input = this.input;

    for (var i = 0, length = rules.length; i < length; i++) {
      var rule = rules[i];
      var start = rule.start;
      var states = start.length;

      if (!states || start.indexOf(state) >= 0 || state % 2 && states === 1 && !start[0]) {
        var pattern = rule.pattern;
        pattern.lastIndex = lastIndex;
        var result = pattern.exec(input);

        if (result && result.index === lastIndex) {
          var j = matches.push({
            result: result,
            action: rule.action,
            length: result[0].length
          });

          if (rule.global) index = j;

          while (--j > index) {
            var k = j - 1;

            if (matches[j].length > matches[k].length) {
              var temple = matches[j];
              matches[j] = matches[k];
              matches[k] = temple;
            }
          }
        }
      }
    }

    return matches;
  }
}

Lexer.defunct = function (chr) {
  throw new Error('Unexpected character (' + chr + ') at offset (' + (this.index - 1) + ')');
};

//---------
var lexer = new Lexer(),
    exprToken_ = [];

function appendToken_(lexeme, id, iLevel) {
  exprToken_.push([id, lexeme, lexer.index - lexeme.length, iLevel]);
  return id;
}

lexer.addRule(/\s+/, function (lexeme) {
  return appendToken_(lexeme, 1, -1); // WHITE
}).addRule(/[0-9]+(?:\.[0-9]+)?\b/, function (lexeme) {
  return appendToken_(lexeme, 2, -1); // NUMBER
}).addRule(/[_$A-Za-z](?:[_$A-Za-z0-9]+)?/, function (lexeme) {
  return appendToken_(lexeme, 3, -1); // ID
}).addRule(/(?:"((?:\\.|[^"])*)"|'((?:\\.|[^'])*)')/, function (lexeme) {
  // '"
  return appendToken_(lexeme, 4, -1); // STRING
}).addRule(/[?]/, function (lexeme) {
  return appendToken_(lexeme, 5, 4); // QUESTION_MARK
}).addRule(/[:]/, function (lexeme) {
  return appendToken_(lexeme, 6, -1); // COLON
}).addRule(/[,]/, function (lexeme) {
  return appendToken_(lexeme, 7, -1); // COMMA
}).addRule(/[{]/, function (lexeme) {
  return appendToken_(lexeme, 8, -1); // L_BRACKET
}).addRule(/[}]/, function (lexeme) {
  return appendToken_(lexeme, 9, -1); // R_BRACKET
}).addRule(/[\[]/, function (lexeme) {
  return appendToken_(lexeme, 10, -1); // L_SQUARE
}).addRule(/[\]]/, function (lexeme) {
  return appendToken_(lexeme, 11, -1); // R_SQUARE
}).addRule(/[(]/, function (lexeme) {
  return appendToken_(lexeme, 12, -1); // L_PARENTHES
}).addRule(/[)]/, function (lexeme) {
  return appendToken_(lexeme, 13, -1); // R_PARENTHES
}).addRule(/[.]/, function (lexeme) {
  return appendToken_(lexeme, 14, 18); // OP
}).addRule(/[*]/, function (lexeme) {
  return appendToken_(lexeme, 14, 14); // OP
}).addRule(/[/]/, function (lexeme) {
  return appendToken_(lexeme, 14, 14); // OP
}).addRule(/[%]/, function (lexeme) {
  return appendToken_(lexeme, 14, 14); // OP
}).addRule(/[+]/, function (lexeme) {
  return appendToken_(lexeme, 14, 13); // OP
}).addRule(/[-]/, function (lexeme) {
  return appendToken_(lexeme, 14, 13); // OP
}).addRule(/[>]{3}/, function (lexeme) {
  return appendToken_(lexeme, 14, 12); // OP
}).addRule(/[>]{2}/, function (lexeme) {
  return appendToken_(lexeme, 14, 12); // OP
}).addRule(/[<]{2}/, function (lexeme) {
  return appendToken_(lexeme, 14, 12); // OP
}).addRule(/[<][=]/, function (lexeme) {
  return appendToken_(lexeme, 14, 11); // OP
}).addRule(/[<]/, function (lexeme) {
  return appendToken_(lexeme, 14, 11); // OP
}).addRule(/[>][=]/, function (lexeme) {
  return appendToken_(lexeme, 14, 11); // OP
}).addRule(/[>]/, function (lexeme) {
  return appendToken_(lexeme, 14, 11); // OP
}).addRule(/[=]{3}/, function (lexeme) {
  return appendToken_(lexeme, 14, 10); // OP
}).addRule(/[!][=]{2}/, function (lexeme) {
  return appendToken_(lexeme, 14, 10); // OP
}).addRule(/[=]{2}/, function (lexeme) {
  return appendToken_(lexeme, 14, 10); // OP
}).addRule(/[!][=]/, function (lexeme) {
  return appendToken_(lexeme, 14, 10); // OP
}).addRule(/[&]{2}/, function (lexeme) {
  return appendToken_(lexeme, 14, 6); // OP
}).addRule(/[&]/, function (lexeme) {
  return appendToken_(lexeme, 14, 9); // OP
}).addRule(/[\^]/, function (lexeme) {
  return appendToken_(lexeme, 14, 8); // OP
}).addRule(/[|]{2}/, function (lexeme) {
  return appendToken_(lexeme, 14, 5); // OP
}).addRule(/[|]/, function (lexeme) {
  return appendToken_(lexeme, 14, 7); // OP
}).addRule(/$/, function (lexeme) {
  return appendToken_(lexeme, 20, -1); // EOF
});

// -------- yacc rules --------
// expr_1 :   number
// expr_2 :   ID
// expr_3 :   string
// expr_4 :   expr  OP  expr
// expr_5 :   expr ?  expr : expr
// expr_6 :   expr (  )                  -->  expr  OP  null
// expr_7 :   (  expr_list  )
// expr_8 :   [  ]
// expr_9 :   [  expr_list  ]
// expr_10 :  {  }
// expr_11 :  { expr_items  }
// expr_12 :  expr  [  expr_list  ]      -->  expr  OP  expr
// expr_13 :  expr ( expr_list )         -->  expr  OP  expr
// expr_list_1 :  expr
// expr_list_2 :  expr_list  ,  expr
// expr_items_1 : expr : expr
// expr_items_2 : expr_item , expr : expr

var bOperandToken_ = [2, 3, 4, 9, 11, 13, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43];

function processYacc(bToken, allowLabel) {
  // first scan: setup AST
  var bPending = [];

  function pushOpExpr(exprL, opCurr, exprR, levelR) {
    if (exprL[0] == 34) {
      var b = exprL[1],
          opPrev = b[1],
          exprLR = b[2];
      var tpLR = exprLR ? exprLR[0] : 0,
          levelL = opPrev[3];
      if (levelL < levelR && tpLR >= 31 && tpLR <= 43) {
        b[2] = [34, [exprLR, opCurr, exprR], exprLR[2]];
        bPending.push(exprL);
        return;
      }
    }
    bPending.push([34, [exprL, opCurr, exprR], exprL[2]]);
  }

  // not keepExpr before: EOF ,  )  ]
  // keepExpr before: {  ?  :  [  (  OP  ]  }
  function adjustOnComma(iLen, keepExpr, joinable) {
    // joinable for: ? [ ( OP
    if (iLen >= 3) {
      var tok4,
          tok5,
          tok1 = bPending[iLen - 1],
          tok2 = bPending[iLen - 2],
          tok3 = bPending[iLen - 3];
      var tp4,
          tp5,
          tp1 = tok1[0],
          tp2 = tok2[0],
          tp3 = tok3[0];
      if (iLen >= 5) {
        // expr ? expr : expr  --> expr_5
        tok4 = bPending[iLen - 4];tp4 = tok4[0];
        tok5 = bPending[iLen - 5];tp5 = tok5[0];
        if (!joinable && tp5 >= 31 && tp5 <= 43 && tp4 == 5 && tp3 >= 31 && tp3 <= 43 && tp2 == 6 && tp1 >= 31 && tp1 <= 43) {
          bPending.splice(iLen - 5, 5, [35, [tok5, tok4, tok3, tok2, tok1], tok5[2]]);
          return true;
        }
      }

      // expr OP expr  --> expr_4
      if (tp3 >= 31 && tp3 <= 43 && tp2 == 14 && tp1 >= 31 && tp1 <= 43) {
        bPending.splice(iLen - 3, 3);
        pushOpExpr(tok3, tok2, tok1, tok2[3]);
        return true;
      }

      // expr_list_2 : expr_list , expr
      if (!joinable && tp3 >= 51 && tp3 <= 52 && tp2 == 7 && tp1 >= 31 && tp1 <= 43) {
        bPending.splice(iLen - 3, 3, [52, [tok3, tok2, tok1], tok3[2]]);
        return true;
      }

      if (!joinable && tp3 >= 31 && tp3 <= 43 && tp2 == 6 && tp1 >= 31 && tp1 <= 43) {
        if (iLen >= 5 && tp5 >= 61 && tp5 <= 62 && tp4 == 7) {
          // expr_items_2 : expr_item , expr : expr
          bPending.splice(iLen - 5, 5, [62, [tok5, tok4, tok3, tok2, tok1], tok5[2]]);
        } else {
          // expr_items_1 : expr : expr
          bPending.splice(iLen - 3, 3, [61, [tok3, tok2, tok1], tok3[2]]);
        }
        return true;
      }
    }

    if (iLen >= 1 && !keepExpr) {
      // can not translate to expr_list if before ':'
      var tok1 = bPending[iLen - 1],
          tp1 = tok1[0];
      if (tp1 >= 31 && tp1 <= 43) {
        // expr  --> expr_list_1
        bPending.splice(iLen - 1, 1, [51, [tok1], tok1[2]]);
        return true;
      }
    }

    return false;
  }

  function processStep(tok) {
    var iType = tok[0];
    if (iType == 3 && tok[1] == 'in') {
      iType = tok[0] = 14; // in: ID --> OP
      tok[3] = 11;
    }

    var iLen = bPending.length;
    if (iType == 20) {
      // EOF
      if (iLen >= 2 && bPending[iLen - 1][0] == 7) {
        // ignore last ,
        iLen -= 1;
        bPending.pop();
      }

      while (adjustOnComma(iLen)) {
        iLen = bPending.length;
      }
    } else if (iType == 2) {
      // number
      if (iLen) {
        var bLast = bPending[iLen - 1];
        if (bLast[0] == 14 && bLast[1] == '-') {
          var addNeg = false;
          if (iLen == 1) addNeg = true;else {
            var bLast2 = bPending[iLen - 2],
                tpLast = bLast2[0];
            if (bOperandToken_.indexOf(tpLast) < 0) addNeg = true;
          }

          if (addNeg) {
            // such like:  3 * -5
            bPending.pop();
            iLen -= 1;
            tok[1] = '-' + tok[1];
          }
        }
      }
      bPending.push([31, [tok], tok[2]]); // 31: expr_1
    } else if (iType == 3 || iType == 4) // ID string
      bPending.push([29 + iType, [tok], tok[2]]); // 32: expr_2, 33:expr_3
    else if (iType == 7) {
        // ,
        while (adjustOnComma(iLen)) {
          iLen = bPending.length;
        }
        bPending.push(tok);
      } else if (iType == 6 || iType == 8) {
        // : {
        while (adjustOnComma(iLen, true)) {
          iLen = bPending.length;
        }
        bPending.push(tok);
      } else if (iType == 5 || iType == 10 || iType == 12 || iType == 14) {
        // ? [  (  OP
        while (adjustOnComma(iLen, true, true)) {
          iLen = bPending.length;
        }
        bPending.push(tok);
      } else if (iType == 11) {
        // ]
        if (iLen >= 2 && bPending[iLen - 1][0] == 7) {
          // ignore last ,
          iLen -= 1;
          bPending.pop();
        }

        while (adjustOnComma(iLen)) {
          iLen = bPending.length;
        }

        if (iLen >= 3) {
          var tok1 = bPending[iLen - 1],
              tok2 = bPending[iLen - 2],
              tok3 = bPending[iLen - 3];
          var tp1 = tok1[0],
              tp2 = tok2[0],
              tp3 = tok3[0];
          if (tp3 >= 31 && tp3 <= 43 && tp2 == 10 && tp1 == 51) {
            tok2[0] = 14;tok2[3] = 18; // change '[' to OP, op level is 18
            tok1 = tok1[1][0]; // get expr from expr_list_1
            bPending.splice(iLen - 3, 3);
            pushOpExpr(tok3, tok2, tok1, 18); // expr [ expr_list ]  --> expr_4 : expr OP expr
            return;
          }
        }

        if (iLen >= 2) {
          var tok1 = bPending[iLen - 1],
              tok2 = bPending[iLen - 2];
          var tp1 = tok1[0],
              tp2 = tok2[0];
          if (tp2 == 10) {
            if (tp1 >= 31 && tp1 <= 43) {
              // [ expr ] --> [ expr_list ] --> expr_9 : [ expr_list ]
              bPending.splice(iLen - 2, 2, [39, [tok2, [51, [tok1], tok1[2]], tok], tok2[2]]);
              return;
            } else if (tp1 >= 51 && tp1 <= 52) {
              // expr_9 : [ expr_list ]
              bPending.splice(iLen - 2, 2, [39, [tok2, tok1, tok], tok2[2]]);
              return;
            }
          }
        }

        if (iLen >= 1) {
          var tok1 = bPending[iLen - 1],
              tp1 = tok1[0];
          if (tp1 == 10) {
            // expr_8 : [ ]
            bPending[iLen - 1] = [38, [tok1, tok], tok1[2]];
            return;
          }
        }

        bPending.push(tok); // should be error
      } else if (iType == 13) {
        // )   // not ignore last ,
        while (adjustOnComma(iLen)) {
          iLen = bPending.length;
        }

        if (iLen >= 3) {
          var tok1 = bPending[iLen - 1],
              tok2 = bPending[iLen - 2],
              tok3 = bPending[iLen - 3];
          var tp1 = tok1[0],
              tp2 = tok2[0],
              tp3 = tok3[0];
          if (tp3 >= 31 && tp3 <= 43 && tp2 == 12 && tp1 >= 51 && tp1 <= 52) {
            tok2[0] = 14;tok2[3] = 17; // change '(' to OP, op level is 17
            bPending.splice(iLen - 3, 3);
            pushOpExpr(tok3, tok2, tok1, 17); // expr ( expr_list )  --> expr_4 : expr OP expr_list
            return;
          }
        }

        if (iLen >= 2) {
          var tok1 = bPending[iLen - 1],
              tok2 = bPending[iLen - 2];
          var tp1 = tok1[0],
              tp2 = tok2[0];
          if (tp2 >= 31 && tp2 <= 43 && tp1 == 12) {
            // expr_6: expr ( )
            tok1[0] = 14;tok1[3] = 17; // change '(' to OP, op level is 17
            bPending.splice(iLen - 2, 2);
            pushOpExpr(tok2, tok1, null, 17); // --> expr_4 : expr OP null
            return;
          } else if (tp2 == 12 && tp1 >= 51 && tp1 <= 52) {
            // expr_7 : ( expr_list )
            bPending.splice(iLen - 2, 2, [37, [tok2, tok1, tok], tok2[2]]);
            return;
          }
        }
        bPending.push(tok); // should be error
      } else if (iType == 9) {
        // }
        if (iLen >= 2 && bPending[iLen - 1][0] == 7) {
          // ignore last ,
          iLen -= 1;
          bPending.pop();
        }

        while (adjustOnComma(iLen, true)) {
          iLen = bPending.length;
        }

        if (iLen >= 2) {
          var tok1 = bPending[iLen - 1],
              tok2 = bPending[iLen - 2];
          var tp1 = tok1[0],
              tp2 = tok2[0];
          if (tp2 == 8 && tp1 >= 61 && tp1 <= 62) {
            // expr_11 : { expr_items }
            bPending.splice(iLen - 2, 2, [41, [tok2, tok1, tok], tok2[2]]);
            return;
          }
        }
        if (iLen >= 1) {
          var tok1 = bPending[iLen - 1],
              tp1 = tok1[0];
          if (tp1 == 8) {
            // expr_10 : { }
            bPending[iLen - 1] = [40, [tok1, tok], tok1[2]];
            return;
          }
        }

        bPending.push(tok); // should be error
      }
    // else do nothing    // ignore expr(31-43) expr_list(51-52) expr_items(61-62)
  }

  var tok;
  while (tok = bToken.shift()) {
    if (tok[0] != 1) processStep(tok);
  }

  if (bPending.length == 0) throw new Error('expression is empty');else {
    tok = bPending[0];
    if (bPending.length == 1) {
      var retType = tok[0];
      if (retType >= 51 && retType <= 52) // expr_list
        return tok;else if (retType == 61 && allowLabel) // expr_items_1 // support all:expr
        return tok;
    }

    if (tok[0] < 20) throw new Error('invalid operand (' + tok[1] + ') at offset (' + tok[2] + ')');

    var i = 0,
        iOffset = tok[2];
    while (i < bPending.length) {
      var item = bPending[i++],
          itemType = item[0];
      if (itemType < 51 || itemType > 52) {
        // not expr_list
        iOffset = item[2];
        break;
      }
    }

    // console.log('AST buffer, len:',bPending.length,JSON.stringify(bPending));
    throw new Error('syntax error at offset (' + iOffset + ')');
  }
}

function evalInSpace(bAst, rootSpace) {
  var tp = bAst[0],
      b = bAst[1];

  if (tp == 31) return parseFloat(b[0][1]);else if (tp == 32) {
    var sId = b[0][1];
    if (sId == 'null') return null;else if (sId == 'undefined') return undefined;else if (sId == 'true') return true;else if (sId == 'false') return false;else if (sId == 'NaN') return NaN;else {
      var ret = rootSpace[sId];
      if (ret === undefined && !hasOwn_.call(rootSpace, sId)) throw new Error('symbol (' + sId + ') not defined');else return ret;
    }
  } else if (tp == 33) {
    var s = b[0][1];
    return s ? s.slice(1, -1) : '';
  } else if (tp == 34) {
    var exprL = b[0],
        op = b[1],
        exprR = b[2],
        sOp = op[1];
    if (sOp == '.') {
      if (exprR[0] != 32) throw new Error('syntax error at offset (' + bAst[2] + '): invalid attribute name');

      var owner = evalInSpace(exprL, rootSpace),
          sAttr = exprR[1][0][1];
      try {
        return owner[sAttr];
      } catch (e) {
        console.log('error: get attribute (' + sAttr + ') failed');
        return undefined;
      }
    } else if (sOp == '[') {
      var owner = evalInSpace(exprL, rootSpace);
      var sAttr = evalInSpace(exprR, rootSpace);
      try {
        return owner[sAttr];
      } catch (e) {
        console.log('error: get attribute ([' + sAttr + ']) failed');
        return undefined;
      }
    } else if (sOp == '(') {
      if (exprL[0] == 32 && exprL[1][0][1] == 'while') {
        var iLoopNum = 0;
        if (!exprR) return iLoopNum; // while();  // no argument

        var cond = evalCondition(exprR);
        while (cond) {
          iLoopNum += 1;
          evalLoopBody(exprR);
          cond = evalCondition(exprR);
        }
        return iLoopNum;
      }

      var bArgs = [];
      if (exprR) evalArgList(bArgs, exprR);

      if (exprL[0] == 34) {
        var b2 = exprL[1];
        if (b2[1][1] == '.') {
          var attrExpr = b2[2];
          if (attrExpr[0] != 32) throw new Error('syntax error at offset (' + attrExpr[2] + '): invalid attribute name');

          var thisObj = evalInSpace(b2[0], rootSpace);
          var subAttr = attrExpr[1][0][1];
          return thisObj[subAttr].apply(thisObj, bArgs); // if not function, will raise error // support pseudo: {apply:fn}
        }
      }

      var fn = evalInSpace(exprL, rootSpace);
      return fn.apply(null, bArgs); // if not function, will raise error // support pseudo: {apply:fn}
    } else if (sOp == '&&') {
      var valueL = evalInSpace(exprL, rootSpace);
      if (!valueL) return valueL; // shortcut
      return evalInSpace(exprR, rootSpace);
    } else if (sOp == '||') {
      var valueL = evalInSpace(exprL, rootSpace);
      if (valueL) return valueL; // shortcut
      return evalInSpace(exprR, rootSpace);
    } else {
      var valueL = evalInSpace(exprL, rootSpace);
      var valueR = evalInSpace(exprR, rootSpace);
      if (sOp == '*') return valueL * valueR;else if (sOp == '/') return valueL / valueR;else if (sOp == '%') return valueL % valueR;else if (sOp == '+') return valueL + valueR;else if (sOp == '-') return valueL - valueR;else if (sOp == '<<') return valueL << valueR;else if (sOp == '>>') return valueL >> valueR;else if (sOp == '>>>') return valueL >>> valueR;else if (sOp == '<') return valueL < valueR;else if (sOp == '<=') return valueL <= valueR;else if (sOp == '>') return valueL > valueR;else if (sOp == '>=') return valueL >= valueR;else if (sOp == 'in') return valueL in valueR;else if (sOp == '==') return valueL == valueR;else if (sOp == '!=') return valueL != valueR;else if (sOp == '===') return valueL === valueR;else if (sOp == '!==') return valueL !== valueR;else if (sOp == '&') return valueL & valueR;else if (sOp == '^') return valueL ^ valueR;else if (sOp == '|') return valueL | valueR;else throw new Error('unknown operator: ' + sOp);
    }
  } else if (tp == 35) {
    var cond = evalInSpace(b[0], rootSpace);
    return evalInSpace(cond ? b[2] : b[4], rootSpace);
  } else if (tp == 37) {
    var bArgs = [];
    evalArgList(bArgs, b[1]);
    return bArgs[bArgs.length - 1];
  } else if (tp == 38) return [];else if (tp == 39) {
    var bArgs = [];
    evalArgList(bArgs, b[1]);
    return bArgs;
  } else if (tp == 40) return {};else if (tp == 41) {
    var ret = {},
        bArgs = [];
    evalKeyValue(bArgs, b[1]);
    bArgs.forEach(function (item) {
      ret[item[0]] = item[1];
    });
    return ret;
  } else if (tp == 51) {
    return evalInSpace(b[0], rootSpace);
  } else if (tp == 52) {
    var bArgs = [];
    evalArgList(bArgs, bAst);
    return bArgs[bArgs.length - 1];
  }

  // expr_items has scaned in expr_11   // no expr_6, expr_12, expr_13
  else throw new Error('syntax error at offset (' + bAst[2] + ')');

  function evalKeyValue(bArgs, expr) {
    var tp = expr[0],
        b = expr[1];
    if (tp == 61) {
      var keyExpr = b[0],
          keyTp = keyExpr[0];
      var key = keyTp == 32 ? keyExpr[1][0][1] : evalInSpace(keyExpr, rootSpace);
      bArgs.push([key, evalInSpace(b[2], rootSpace)]);
    } else if (tp == 62) {
      evalKeyValue(bArgs, b[0]);
      var keyExpr = b[2],
          keyTp = keyExpr[0];
      var key = keyTp == 32 ? keyExpr[1][0][1] : evalInSpace(keyExpr, rootSpace);
      bArgs.push([key, evalInSpace(b[4], rootSpace)]);
    } else throw new Error('syntax error at offset (' + expr[2] + ')');
  }

  function evalArgList(bArgs, expr) {
    // expr can be expr or expr_list
    var tp = expr[0],
        b = expr[1];
    if (tp == 51) bArgs.push(evalInSpace(b[0], rootSpace));else if (tp == 52) {
      evalArgList(bArgs, b[0]);
      bArgs.push(evalInSpace(b[2], rootSpace));
    } else bArgs.push(evalInSpace(expr, rootSpace));
  }

  function evalCondition(expr) {
    var tp = expr[0],
        b = expr[1];
    if (tp == 51) return evalInSpace(b[0], rootSpace);else if (tp == 52) return evalCondition(b[0], rootSpace);else return evalInSpace(expr, rootSpace);
  }

  function evalLoopBody(expr) {
    if (expr[0] == 52) {
      var b = expr[1];
      evalLoopBody(b[0], rootSpace);
      evalInSpace(b[2], rootSpace);
    }
    // else do nothing  // expr_list_1 (51) or expr, used as condition
  }
}

function setupExprAst(sExpr, comp, sKey) {
  var ret = null,
      succ = false;
  exprToken_ = [];

  try {
    lexer.setInput(sExpr);
    while (lexer.lex()) {} // maybe raise exception
    succ = true;
  } catch (e) {
    utils.instantShow('error: lexical analysis failed at ' + (comp ? comp.widget.getPath() : '') + ':' + sKey);
    console.log(e);
  }
  if (!succ) return null;

  try {
    ret = processYacc(exprToken_, true); // maybe raise exception
  } catch (e) {
    utils.instantShow('error: yacc analysis failed at ' + (comp ? comp.widget.getPath() : '') + ':' + sKey);
    console.log(e);
  }
  return ret;
}

// find target component and locate which callspace, pathFlag: -N or sPath
function findComponent_(comp, pathFlag, bInfo, parentIdx) {
  var parentNum = parentIdx || 0; // if parentNum > 0 means access from sub level
  var wdgt = comp.widget;
  if (typeof pathFlag == 'number') {
    var iLastIdx = undefined;
    while (wdgt) {
      var comp_ = wdgt.component,
          idx = comp_ && comp_.props['for.index'];

      if (wdgt.$callspace && hasOwn_.call(wdgt.$callspace, 'flowFlag')) {
        // has callspace
        if (wdgt.$callspace.forSpace) {
          // two spaces in one comp
          if (pathFlag >= -1) {
            if (pathFlag == -1) {
              // go next segment
              if (typeof idx == 'number') iLastIdx = idx;else iLastIdx = undefined;
            } else {
              // pathFlag >= 0
              if (parentNum == 0) {
                // eval at comp directly, ignore forSpace, enter new segment // wdgt.$callspace must not $for
                if (typeof idx == 'number') iLastIdx = idx;else iLastIdx = undefined;
              }
              // else, use last segment's index
            }
            if (bInfo) {
              bInfo.unshift(pathFlag >= 0 && parentNum != 0); // true means uses forSpace
              bInfo.unshift(wdgt.$callspace);
              bInfo.unshift(iLastIdx); // last props['for.index']
            }
            return wdgt.component; // found
          } else pathFlag += 2;
        } else {
          // must not '$$for', can be $for=''
          if (pathFlag >= 0) {
            var flowFlag_ = wdgt.$callspace.flowFlag;
            if ((flowFlag_ == 'for' || flowFlag_ == 'for0') && parentNum == 0) {
              // ignore this $for callspace  // enter new segment
              if (typeof idx == 'number') iLastIdx = idx;else iLastIdx = undefined;

              wdgt = wdgt.parent;
              parentNum += 1;
              continue;
            }

            if (bInfo) {
              bInfo.unshift(false);
              bInfo.unshift(wdgt.$callspace);
              bInfo.unshift(iLastIdx); // use last segment's index
            }
            return wdgt.component; // found
          } else pathFlag += 1;
        }

        if (typeof idx == 'number') iLastIdx = idx;else iLastIdx = undefined;
      } else {
        if (iLastIdx === undefined && typeof idx == 'number') iLastIdx = idx;
      }

      wdgt = wdgt.parent;
      parentNum += 1;
    }
    return null;
  } else {
    // pathFlag must be string, no need find props['for.index']
    while (wdgt) {
      // if parentNum == 0 means find from current node
      if (wdgt.$callspace && hasOwn_.call(wdgt.$callspace, 'flowFlag')) {
        // has callspace
        if (parentNum > 0 || wdgt.$callspace.forSpace) // find from sub node, or from current node and current has two spaces ($$for)
          return getCompByPath_(wdgt.component, pathFlag); // according to nearest callspace
      }

      wdgt = wdgt.parent;
      parentNum += 1;
    }
    return null;
  }
}

function setupExprSpace(space, comp, isEmptyFor) {
  // space is: comp.widget.$callspace.exprSpace
  space.ex = creator.createEx(comp);
  space.Math = Math;

  var indexFunc_ = function indexFunc_(idx, parentIdx) {
    if (idx === undefined) idx = 0;else if (typeof idx != 'number' || isNaN(idx) || idx > 0) {
      console.log('warning: invalid expression: index(' + idx + ')');
      idx = 0;
    }
    // if idx == 0 && isEmptyFor, report error when compiling

    var bInfo = [],
        targ = findComponent_(comp, idx, bInfo, parentIdx);
    return targ ? bInfo[0] : undefined;
  };
  space.index = indexFunc_;

  function makePropsDualsFn(sName) {
    return function (idxOrPath) {
      var path_ = idxOrPath || 0,
          tp = typeof path_ === 'undefined' ? 'undefined' : _typeof(path_);
      if (tp == 'number') {
        if (path_ > 0) path_ = 0;
      } else if (tp != 'string') path_ = 0;

      if (path_ === 0) return comp[sName]; // quick found

      var parentIdx = 0;
      if (indexFunc_ !== space.index) parentIdx = 1; // eval from sub-level component
      var bInfo = [],
          targ = findComponent_(comp, path_, bInfo, parentIdx);
      return targ ? targ[sName] : null;
    };
  }
  space.props = makePropsDualsFn('props');
  space.state = makePropsDualsFn('state');
  space.duals = makePropsDualsFn('duals');

  space.typeof = function (value) {
    return typeof value === 'undefined' ? 'undefined' : _typeof(value);
  };

  space.count = function (idx) {
    if (idx === undefined) idx = 0;else if (typeof idx != 'number' || isNaN(idx) || idx > 0) {
      console.log('warning: invalid expression: count(' + idx + ')');
      idx = 0;
    }
    if (idx === 0 && isEmptyFor) throw new Error('invalid expression: count(0)');

    var parentIdx = 0;
    if (indexFunc_ !== space.index) parentIdx = 1; // eval from sub-level component
    var bInfo = [],
        targ = findComponent_(comp, idx, bInfo, parentIdx),
        callspace = bInfo[1];
    if (targ && callspace) // bInfo[2]: using callspace.forSpace
      return ((bInfo[2] ? callspace.forSpace : callspace)['data-for.path'] || []).length;else return 0;
  };

  space.item = function (idx) {
    if (idx === undefined) idx = 0;else if (typeof idx != 'number' || isNaN(idx) || idx > 0) {
      console.log('warning: invalid expression: item(' + idx + ')');
      idx = 0;
    }
    if (idx === 0 && isEmptyFor) throw new Error('invalid expression: item(0)');

    var parentIdx = 0;
    if (indexFunc_ !== space.index) parentIdx = 1; // eval from sub-level component
    var bInfo = [],
        targ = findComponent_(comp, idx, bInfo, parentIdx),
        callspace = bInfo[1];
    if (targ && callspace) {
      var index = parentIdx ? space.index(idx) : bInfo[0];
      if (typeof index == 'number') // bInfo[2] means use callspace.forSpace
        return ((bInfo[2] ? callspace.forSpace : callspace)['data-for.path'] || {})[index];
    }
    return undefined;
  };
}

var flowExprIndex_ = 1;

function anyPrevIfTrue2(comp) {
  var owner = comp.widget;
  owner = owner && owner.parent;
  if (!owner) return false;

  var ownerObj = owner.component;
  if (!ownerObj) return false;
  var idx = ownerObj.$gui.compIdx[comp.$gui.keyid];
  if (typeof idx != 'number') return false;

  var ret = false,
      comps = ownerObj.$gui.comps,
      bTodo = [];
  idx -= 1;
  while (idx >= 0) {
    var obj = comps[idx--],
        sKey = getElementKey_(obj);
    obj = obj && sKey && owner[sKey];
    obj = obj && obj.component;
    if (obj && obj.$gui.compState) {
      // if compState == 0, not ready yet
      var sFlag = obj.$gui.flowFlag;
      if (sFlag == 'if') {
        if (obj.state[sFlag]) ret = true; // condition fulfilled: any True
        break; // avoid meet previous '$elif'
      } else if (sFlag == 'elif') {
        if (obj.state[sFlag]) {
          ret = true; // condition fulfilled: any True
          break;
        }
      } else break;
    }
  }

  return ret;
}

var reservedCallable_ = ['props', 'state', 'duals', 'item', 'count', 'index'];

function adjustExprAst(bAst, bDepend, isRight) {
  // isRight=true means 'expr.' or 'expr[' prefixed
  //  A) adjust i)item.attr --> item().attr  ii)item[sAttr] --> item()[s]  iii)item --> item()
  //     includes: props duals item count index
  //  B) get all depends of: duals(path).attr
  //  C) get all depends of: item(N) count(N) index(N)

  var dualFlag,
      tp = bAst[0],
      b = bAst[1];
  if (tp >= 51) {
    if (tp == 51) adjustExprAst(b[0], bDepend);else if (tp == 52) {
      adjustExprAst(b[0], bDepend);
      adjustExprAst(b[2], bDepend);
    } else if (tp == 61) {
      adjustExprAst(b[0], bDepend);
      adjustExprAst(b[2], bDepend);
    } else if (tp == 62) {
      adjustExprAst(b[0], bDepend);
      adjustExprAst(b[2], bDepend);
      adjustExprAst(b[4], bDepend);
    }
    // else ignore
  } else if (tp >= 31) {
    if (tp == 32) {
      if (!isRight && (dualFlag = isCallableId(bAst))) {
        // ID --> ID(), such as: props duals count item index
        var iLn = bAst[2],
            idExpr = bAst.slice(0);
        bAst[0] = 34;bAst[1] = [idExpr, [14, '(', iLn, 17], null];
        return bDepend.push([dualFlag, 0]);
      }
      // else, ignore
    } else if (tp == 34) {
      // expr OP expr     expr OP null     expr OP expr_list
      var exprL = b[0],
          op = b[1],
          exprR = b[2],
          opName = op[1];
      if (opName == '.') {
        if (!isRight && (dualFlag = isCallableId(exprL))) {
          // ID --> ID(), such as: props duals count item index
          if (exprR[0] == 32) {
            var sId = exprR[1][0][1]; // exprR[1][0] is ID token
            bDepend.push([dualFlag, 0, sId]);

            // props/duals.ID  -->  props/duals() . ID
            var iLn = exprL[2],
                idExpr = exprL.slice(0);
            exprL[0] = 34;exprL[1] = [idExpr, [14, '(', iLn, 17], null];
          } else adjustExprAst(exprR, bDepend, true);
        } else {
          if (adjustExprAst(exprL, bDepend, isRight)) {
            // duals()/duals(xx)  or  props()/props(xx)
            if (exprR[0] == 32) {
              var sId = exprR[1][0][1],
                  bLast = bDepend[bDepend.length - 1];
              bLast.push(sId); // duals(xx).sId   or   props(xx).sId
              return 0;
            }
          }
          adjustExprAst(exprR, bDepend, true);
        }
      } else if (opName == '[') {
        if (!isRight && (dualFlag = isCallableId(exprL))) {
          // ID[sAttr]
          if (exprR[0] == 33) {
            var sStr = exprR[1][0][1]; // exprR[1][0] is string token
            bDepend.push([dualFlag, 0, sStr.slice(1, -1)]);

            // props/duals[sAttr]  -->  props/duals() [ sAttr
            var iLn = exprL[2],
                idExpr = exprL.slice(0);
            exprL[0] = 34;exprL[1] = [idExpr, [14, '(', iLn, 17], null];
          } else if (dualFlag == 4 && exprR[0] == 31) {
            // item[N]  --> item()[N]
            bDepend.push([dualFlag, 0]);

            var iLn = exprL[2],
                idExpr = exprL.slice(0);
            exprL[0] = 34;
            exprL[1] = [idExpr, [14, '(', iLn, 17], null];
          } else adjustExprAst(exprR, bDepend); // isRight=false
        } else {
          if (adjustExprAst(exprL, bDepend, isRight)) {
            // duals()/duals(xx)  or  props()/props(xx)
            if (exprR[0] == 33) {
              var sStr = exprR[1][0][1],
                  bLast = bDepend[bDepend.length - 1];
              bLast.push(sStr.slice(1, -1)); // props/duals(xx)[sStr]
              return 0;
            }
          }
          adjustExprAst(exprR, bDepend); // isRight=false
        }
      } else if (opName == '(') {
        dualFlag = isCallableId(exprL);
        if (dualFlag) {
          // ID ( expr_list // no check isRight, op-level of '(' is lower than . [ 
          if (exprR === null) // props/duals()
            return bDepend.push([dualFlag, 0]);

          var tpR = exprR[0];
          if (tpR == 51) {
            // expr_list_1
            var subExpr = exprR[1][0],
                subTp = subExpr[0];
            if (subTp == 31) {
              var sNum = subExpr[1][0][1]; // subExpr[1][0] is number token
              return bDepend.push([dualFlag, parseFloat(sNum)]);
            } else if (subTp == 33) {
              var sStr = subExpr[1][0][1]; // subExpr[1][0] is string token
              return bDepend.push([dualFlag, sStr.slice(1, -1)]);
            }
          }

          adjustExprAst(exprR, bDepend); // isRight=false
        } else {
          adjustExprAst(exprL, bDepend); // isRight=false, op-level is lower than . [
          if (exprR !== null) adjustExprAst(exprR, bDepend); // isRight=false
        }
      } else if (opName == 'in') {
        if (exprL[0] != 32) // 32 is expr_2: ID  // no change, avoid change item --> item()
          adjustExprAst(exprL, bDepend); // isRight=false, op-level is lower than . [
        adjustExprAst(exprR, bDepend); // isRight=false
      } else {
        // opName such as: + - * / &&
        adjustExprAst(exprL, bDepend); // isRight=false, op-level is lower than . [
        adjustExprAst(exprR, bDepend); // isRight=false
      }
    } else if (tp == 35) {
      // expr? expr: expr
      adjustExprAst(b[0], bDepend);
      adjustExprAst(b[2], bDepend);
      adjustExprAst(b[4], bDepend);
    } else if (tp == 37) {
      // ( expr_list )
      adjustExprAst(b[1], bDepend);
    } else if (tp == 39) {
      // [ expr_list ]
      adjustExprAst(b[1], bDepend);
    } else if (tp == 41) {
      // { expr_items }
      adjustExprAst(b[1], bDepend);
    }
    // else ignore
  }
  // else ignore

  return 0;

  function isCallableId(expr) {
    if (expr[0] == 32) {
      var sId = expr[1][0][1],
          iPos = reservedCallable_.indexOf(sId);
      if (iPos >= 0) return iPos + 1; // props:1, state:2, duals:3, item:4, count:5,index:6
    }
    return 0;
  }
}

function getKeyChildExprAst_(comp, sExpr, attrName) {
  // attrName: 'key' or 'children'
  // step 1: setup AST
  var bAst = setupExprAst(sExpr, comp, attrName);
  if (bAst) {
    if (bAst[0] == 61) bAst = bAst[1][2]; // expr_items_1 : expr : expr  // ignore 'all:' or 'strict:' head
    adjustExprAst(bAst, []);

    var bInfo = [],
        ownerObj = findComponent_(comp, 0, bInfo, 1),
        ownerSpace = bInfo[1];
    if (!ownerObj || !ownerSpace) return null;

    if (bInfo[2]) ownerSpace = ownerSpace.forSpace;
    return function (comp, idx) {
      var space = ownerSpace.exprSpace,
          oldIndex = space.index;
      space.index = function (N) {
        if (N === undefined || N === 0) return idx;else return oldIndex(N, 1);
      };

      space.$info = [comp, attrName, ex.time()];
      try {
        return evalInSpace(bAst, space);
      } finally {
        // delete space.$info;   // keep for asynchrony task
        space.index = oldIndex; // restore to old function
      }
    };
  }

  return null;
}

var oneTickFlowId_ = 0;

function renewFuncOfExpr_(comp, sKey, sExpr, isExprSetter) {
  // step 1: setup AST
  var headId = 'any';
  var bAst = setupExprAst(sExpr, comp, sKey);

  // step 2: scan AST and adjust
  if (bAst) {
    if (bAst[0] == 61) {
      // expr_items_1 : expr : expr
      headId = bAst[1][0];
      bAst = bAst[1][2];

      if (headId[0] == 32) // expr_2 : ID
        headId = headId[1][0][1];
      if (headId !== 'all' && headId !== 'strict') headId = 'any';
    }

    var ctrlFlag = ctrlExprCmd_.indexOf(sKey);
    if (ctrlFlag >= 0 && headId != 'any') {
      // can not use 'all:expr' or 'strict:expr' in $for $if $elif $else
      console.log("error: invalid using '" + headId + ":' at " + comp.widget.getPath() + ':' + sKey);
      headId = 'any';
    }

    var bDepend = [];
    adjustExprAst(bAst, bDepend);

    if (sKey == 'trigger') {
      var sFireType = comp.props.fireType || 'auto';
      if (sFireType === 'onsite') {
        // gui.syncTrigger > 1
        bDepend = []; // temporary eval $trigger, no listen
        comp.$gui.syncTrigger = 3; // 2 for temporary no recall fireTrigger_()
      } else if (sFireType === 'none') comp.$gui.syncTrigger = 0;else comp.$gui.syncTrigger = 1; // 'auto', no reverse eval $trigger, auto fire action
    }

    // step 3: setup dDepend = {sPath:[comp,attr1,attr2,...]}  bDepend2 = [-2,-1,...]
    var dDepend = {},
        bDepend2 = [];
    bDepend.forEach(function (item) {
      var sAttr,
          iType = item[0],
          pathFlag = item[1];
      if (iType >= 4 && typeof pathFlag == 'number') {
        // item() count() index() // under $for
        if (pathFlag <= 0 && bDepend2.indexOf(pathFlag) < 0) // 0, -1, -2, ...
          bDepend2.push(pathFlag);
        return;
      }

      if (iType != 3 || (sAttr = item[2]) === undefined) return; // not duals, or not duals.xx / duals[xx]

      if (typeof pathFlag == 'number') {
        if (!(pathFlag <= 0)) {
          // NaN <= 0 is false
          console.log('error: invalid using duals(' + pathFlag + ') at ' + comp.widget.getPath() + ':' + sKey);
          return;
        }
      } // else, pathFlag must be string

      var b = dDepend[pathFlag];
      if (!b) b = dDepend[pathFlag] = [];
      if (b.length == 0) {
        var bInfo = [],
            targ = findComponent_(comp, pathFlag, bInfo, 0);
        if (!targ) console.log('error: can not find duals(' + pathFlag + ') at ' + comp.widget.getPath() + ':' + sKey);else b.push(targ, sAttr);
      } else {
        if (b.indexOf(sAttr, 1) < 0) // no duplicate
          b.push(sAttr);
      }
    });
    bDepend2.sort(function (a, b) {
      return a - b;
    });

    // step 4: add source duals listen
    var keyArrive = {};
    Object.keys(dDepend).forEach(function (sHistoryKey) {
      // sHistoryKey is: 0,-1...
      var b = dDepend[sHistoryKey],
          obj = b && b[0];
      if (!obj) return; // obj can be undefined since findComponent_() maybe failed

      var b2 = b.slice(1);
      if (headId != 'any') {
        b2.forEach(function (item) {
          keyArrive[sHistoryKey + ':' + item] = false; // false means this dual not fired yet 
        });
      }

      obj.listen(b2, function (value, oldValue, currKey) {
        // value, oldValue not used
        if (!comp.isHooked) {
          obj.unlisten('*', comp);
          return;
        }

        if (headId == 'any') {
          var newAttrs = comp.state.exprAttrs.slice(0);
          if (newAttrs.indexOf(sKey) < 0) // ensure no duplicated
            newAttrs.push(sKey);
          if (ctrlExprCmd_.indexOf(sKey) > 0) {
            // $if $elif $else
            if (oneTickFlowId_ == 0) {
              oneTickFlowId_ = ++flowExprIndex_; // use same ID in same tick
              setTimeout(function () {
                oneTickFlowId_ = 0;
              }, 0);
            }
            comp.$gui.flowExprId = oneTickFlowId_; // for only run one time
          }
          comp.setState({ exprAttrs: newAttrs });
        } else {
          var sKey2 = sHistoryKey + ':' + currKey;
          if (hasOwn_.call(keyArrive, sKey2)) {
            if (headId == 'strict' && keyArrive[sKey2]) // only log error, not throw
              console.log('error: conflict in strict mode, duals(' + sHistoryKey + ').' + currKey + ' is fired more than one time.');
            keyArrive[sKey2] = true;

            var arriveAll = true,
                bList = Object.keys(keyArrive);
            for (var i = bList.length - 1; i >= 0; i--) {
              if (!keyArrive[bList[i]]) {
                arriveAll = false;
                break;
              }
            }

            if (arriveAll) {
              for (var i = bList.length - 1; i >= 0; i--) {
                // reset flag
                keyArrive[bList[i]] = false;
              }

              var newAttrs = comp.state.exprAttrs.slice(0);
              if (newAttrs.indexOf(sKey) < 0) // ensure no duplicated  // sKey must not: for if elif else
                newAttrs.push(sKey);
              comp.setState({ exprAttrs: newAttrs });
            }
          }
        }
      });
    });

    // step 5: add duals['for'] listen
    if (bDepend2.length) {
      if (headId == 'any') listenParentFor(comp, sKey, bDepend2[0], bDepend2);
      // else, ignore listen item/index/count
    }

    // step 6: return update-expr function
    var bInfo = [],
        ownerObj = findComponent_(comp, 0, bInfo, 0);
    var itemIndex = bInfo[0],
        callspace = bInfo[1];
    if (!ownerObj || !callspace) {
      console.log('warning: locate current callspace failed.');
      return [null, headId];
    }
    if (bInfo[2]) callspace = callspace.forSpace;

    var isHtmlTxt = false;
    var forExpr = null,
        filterExpr = null,
        orderList = null;
    if (sKey == 'html') isHtmlTxt = true;else {
      if (ctrlFlag == 0) {
        // $for
        var bForArg = [],
            bAst_ = bAst,
            forTp = bAst_[0],
            bSub = bAst_[1];
        if (forTp == 51 && bSub[0][0] == 37) {
          // (expr,expr, ...) // expr_7 : ( expr_list )
          bAst_ = bSub[0][1][1];
          forTp = bAst_[0];
          bSub = bAst_[1];
        }

        if (forTp == 51) // expr_list_1 : expr
          forExpr = bSub[0];else if (forTp == 52) {
          // expr_list_2 : expr_list , expr
          while (forTp == 52) {
            bForArg.unshift(bSub[2]);
            bAst_ = bSub[0];forTp = bAst_[0];bSub = bAst_[1];
          }
          if (forTp == 51) forExpr = bSub[0];
          // else, forExpr = null;
        } else forExpr = bAst_; // should be: item in expr

        if (forExpr && forExpr[0] == 34 && (bSub = forExpr[1])[1][1] == 'in') // item in expr
          forExpr = bSub[2];else forExpr = null;
        if (!forExpr) console.log('error: invalid expression ($for) at ' + comp.widget.getPath());else {
          while (bForArg.length) {
            var argAst = bForArg.pop(),
                argTp = argAst[0];
            if (argTp == 31) {
              if (!orderList) orderList = [];
              orderList.unshift(parseFloat(argAst[1][0][1]));
            } else if (argTp == 33) {
              if (!orderList) orderList = [];
              orderList.unshift(argAst[1][0][1].slice(1, -1));
            } else {
              if (bForArg.length) {
                console.log('warning: invalid filter expression ($for) at ' + comp.widget.getPath());
                filterExpr = null;
                break;
              }
              filterExpr = argAst;
            }
          }
        }
      }
    }

    return [function (comp, flowDirFlag) {
      var space = callspace.exprSpace,
          oldIndex = space.index;
      space.index = function (N) {
        if (N === undefined || N === 0) return itemIndex;else return oldIndex(N, 1);
      };

      space.$info = [comp, sKey, ex.time()];
      try {
        if (ctrlFlag == 0) {
          // $for
          comp.$gui.flowExprId0 = comp.$gui.flowExprId = flowExprIndex_; // no use yet
          if (forExpr) {
            var bForData = evalInSpace(forExpr, space);
            if (Array.isArray(bForData)) {
              if (filterExpr) {
                var bb = [],
                    itemLen = bForData.length;
                if (itemLen) {
                  // has length
                  space.$count = itemLen;
                  for (var ii = 0; ii < itemLen; ii++) {
                    var oneItem = space.$item = bForData[ii];
                    space.$index = ii;
                    try {
                      if (evalInSpace(filterExpr, space)) bb.push(oneItem);
                    } catch (e) {
                      // ignore this item 
                      console.log('error: run filter failed ($index=' + ii + ' in ' + comp.widget.getPath() + ')');
                      console.log(e);
                    }
                  }
                  delete space.$index;
                  delete space.$item;
                  delete space.$count;
                }
                bForData = bb;
              }
              if (orderList) bForData = ex.order(bForData, orderList);
              comp.state[sKey] = bForData;
            } else {
              console.log("error: result of '$for' (" + comp.widget.getPath() + ") should be array");
              comp.state[sKey] = [];
            }
          } else comp.state[sKey] = [];
        } else if (ctrlFlag >= 1) {
          // $if $elif $else
          var exprId = comp.$gui.flowExprId;
          flowDirFlag = flowDirFlag || 0; // 0:init, 1:no prev, 2:no next
          if (ctrlFlag == 2) {
            // $elif
            var currTrue = false,
                needUpdate = false;
            if (exprId !== comp.$gui.flowExprId0) needUpdate = true;else if (flowDirFlag) {
              // from updateAnyPostElse() or anyPrevIfTrue()
              if (flowExprIndex_ > comp.$gui.flowExprId0) needUpdate = true;
            }
            comp.$gui.flowExprId0 = comp.$gui.flowExprId = flowExprIndex_; // avoid recursion

            if (needUpdate) {
              var newValue,
                  oldValue = comp.state['elif'];
              if (flowDirFlag != 1 && anyPrevIfTrue(comp, exprId)) {
                // previous $if or $elif must have same 'for.index'
                currTrue = true;
                newValue = comp.state['elif'] = false;
              } else {
                newValue = comp.state['elif'] = evalInSpace(bAst, space);
                currTrue = !!newValue;
              }
              if (newValue && oldValue !== newValue && comp.props['hasStatic.']) {
                setTimeout(function () {
                  renewStaticChild(comp, true);
                }, 0);
              }
            } else {
              // no need update
              if (comp.state['elif'] || flowDirFlag != 1 && anyPrevIfTrue(comp, exprId)) currTrue = true;
            }
            if (flowDirFlag != 2) updateAnyPostElse(comp, currTrue, exprId);
          } else if (ctrlFlag == 1) {
            // if
            var needUpdate = false;
            if (exprId !== comp.$gui.flowExprId0) needUpdate = true;else if (flowDirFlag) {
              // in updateAnyPostElse() or anyPrevIfTrue()
              if (flowExprIndex_ > comp.$gui.flowExprId0) needUpdate = true;
            }
            comp.$gui.flowExprId0 = comp.$gui.flowExprId = flowExprIndex_; // avoid recursion

            if (needUpdate) {
              var oldValue = comp.state['if'];
              var newValue = comp.state['if'] = evalInSpace(bAst, space);
              if (newValue && oldValue !== newValue && comp.props['hasStatic.']) {
                setTimeout(function () {
                  renewStaticChild(comp, true);
                }, 0);
              }
            }
            // else , ignore
            if (flowDirFlag != 2) updateAnyPostElse(comp, !!comp.state['if'], exprId);
          }
          // else, unknown error, ignore
        } else {
          if (isExprSetter) {
            var oldSync = comp.$gui.syncTrigger;
            if (oldSync) {
              // sKey must be 'trigger'
              var oldTrigger = comp.state.trigger;
              if (oldSync <= 2) // 'auto' or ('onsite' and called from fireTrigger_())
                comp.duals[sKey] = evalInSpace(bAst, space);

              var noFire = false;
              if (oldSync !== 1) {
                if (oldSync === 2) {
                  // called from fireTrigger_()
                  noFire = true;
                  comp.$gui.syncTrigger = 3;
                } else comp.$gui.syncTrigger = identicalId_; // means no need re-eval $trigger
              } // else, oldSync == 1, should fire

              if (!noFire) fireTrigger_(oldTrigger, comp); // not force trigger, only when state.trigger changed
            } else comp.duals[sKey] = evalInSpace(bAst, space);
          } else comp.state[sKey] = evalInSpace(bAst, space);
          if (isHtmlTxt) comp.duals['html.'] = comp.state[sKey];
        }
      } finally {
        // delete space.$info;   // keep for asynchrony task
        space.index = oldIndex; // restore to old function
      }
    }, headId];
  }
  return [null, headId];

  function anyPrevIfTrue(comp, exprId) {
    var owner = comp.widget;
    owner = owner && owner.parent;
    if (!owner) return false;

    var ownerObj = owner.component;
    if (!ownerObj) return false;
    var idx = ownerObj.$gui.compIdx[comp.$gui.keyid];
    if (typeof idx != 'number') return false;

    var ret = false,
        comps = ownerObj.$gui.comps,
        bTodo = [],
        hasEval = false;
    idx -= 1;
    while (idx >= 0) {
      var obj = comps[idx--],
          sKey_ = getElementKey_(obj);
      obj = obj && sKey_ && owner[sKey_];
      obj = obj && obj.component;
      if (obj && obj.$gui.compState) {
        // if compState == 0, not ready yet
        var sFlag = obj.$gui.flowFlag;
        if (sFlag == 'if' || sFlag == 'elif') {
          var oldExprId = obj.$gui.flowExprId0;
          if (!hasEval && (obj.$gui.flowExprId !== oldExprId || exprId > oldExprId)) bTodo.unshift([sFlag, obj]); // wait to update
          else {
              // current and all previous if/elif must be updated, since we sync-previous every time
              hasEval = true;
              if (obj.state[sFlag]) ret = true; // condition fulfilled: any True
            }
          if (sFlag == 'if') break; // avoid meet previous '$elif'
        } else break;
      }
    }

    if (bTodo.length) {
      bTodo.forEach(function (item) {
        var sFlag = item[0],
            obj = item[1],
            fn = obj.$gui.exprAttrs[sFlag];
        if (ret || !fn) {
          if (obj.state[sFlag]) {
            // true --> false
            setTimeout(function () {
              obj.state[sFlag] = true;
              var dState = {};dState[sFlag] = false;
              obj.setState(dState);
            }, 0); // fire render in next tick
          }
          obj.state[sFlag] = false;
          obj.$gui.flowExprId0 = obj.$gui.flowExprId = flowExprIndex_; // set as newest
        } else {
          // fn must exists
          try {
            var oldValue = obj.state[sFlag];
            fn(obj, 1); // auto set newest flowExprId
            var newValue = obj.state[sFlag];
            if (newValue) ret = true;

            if (!oldValue != !newValue) {
              setTimeout(function () {
                obj.state[sFlag] = oldValue;
                var dState = {};dState[sFlag] = newValue;
                obj.setState(dState, function () {
                  if (newValue && obj.props['hasStatic.']) {
                    renewStaticChild(obj, true);
                  }
                });
              }, 0); // fire render in next tick
            }
          } catch (e) {
            console.log(e);
          }
        }
      });
    }
    return ret;
  }

  function updateAnyPostElse(comp, currTrue, exprId) {
    var owner = comp.widget;
    owner = owner && owner.parent;
    if (!owner) return;

    var ownerObj = owner.component;
    if (!ownerObj) return;
    var idx = ownerObj.$gui.compIdx[comp.$gui.keyid],
        comps = ownerObj.$gui.comps;
    if (typeof idx != 'number') return;

    var bTodo = [],
        iLen = comps.length;
    for (var i = idx + 1; i < iLen; i += 1) {
      var item = comps[i],
          sKey_ = item && getElementKey_(item);
      var obj = sKey_ && owner[sKey_];
      obj = obj && obj.component;
      if (obj && obj.$gui.compState) {
        // if compState == 0, not ready yet
        var sFlag = obj.$gui.flowFlag;
        if (sFlag == 'elif' || sFlag == 'else') {
          var oldExprId = obj.$gui.flowExprId0;
          if (obj.$gui.flowExprId !== oldExprId || exprId > oldExprId) bTodo.push([sFlag, obj]);else break; // no need update, not scan next to avoid recursion
          if (sFlag == 'else') break;
        } else break;
      }
    }

    bTodo.forEach(function (item) {
      var sFlag = item[0],
          obj = item[1]; // sFlag only can be: elif else
      var fn = sFlag == 'elif' ? obj.$gui.exprAttrs[sFlag] : null;

      if (currTrue || sFlag == 'elif' && !fn) {
        // take as false if meet invalid fn for elif
        obj.$gui.flowExprId0 = obj.$gui.flowExprId = flowExprIndex_; // set as newest
        if (obj.state[sFlag]) {
          // true --> false
          obj.state[sFlag] = false;
          setTimeout(function () {
            obj.state[sFlag] = true;
            var dState = {};dState[sFlag] = false;
            obj.setState(dState);
          }, 0); // fire render in next tick
        } // else, ignore
      } else {
        // need update this node
        if (sFlag == 'elif') {
          // fn must exists
          try {
            var oldValue = obj.state[sFlag];
            fn(obj, 2); // auto set newest flowExprId
            var newValue = obj.state[sFlag];
            if (newValue) currTrue = true;

            if (!oldValue != !newValue) {
              setTimeout(function () {
                obj.state['elif'] = !newValue;
                obj.setState({ 'elif': newValue }, function () {
                  if (newValue && obj.props['hasStatic.']) {
                    renewStaticChild(obj, true);
                  }
                });
              }, 0); // fire render in next tick
            }
          } catch (e) {
            console.log(e);
          }
        } else {
          // is $else
          // currTrue = true;  // no need assign since it is last one
          obj.$gui.flowExprId0 = obj.$gui.flowExprId = flowExprIndex_;
          if (!obj.state['else']) {
            // false --> true
            obj.state['else'] = true;
            setTimeout(function () {
              obj.state['else'] = false;
              obj.setState({ 'else': true }, function () {
                if (obj.props['hasStatic.']) {
                  renewStaticChild(obj, true);
                }
              });
            }, 0); // fire render in next tick
          } // else, ignore
        }
      }
    });
  }

  function listenParentFor(comp, sKey, iTo, bDepend) {
    var iCurr = bDepend[bDepend.length - 1];
    var bInfo = [],
        targ = findComponent_(comp, iCurr, bInfo, 0);
    if (!targ) {
      console.log('error: can not listen (' + iCurr + ':for) for ' + comp.widget.getPath() + ':' + sKey);
      return;
    }

    var wdgt = targ.widget,
        callspace = bInfo[1],
        hasTwoSpace = bInfo[2];
    var obj,
        listenNum = 0;
    while (wdgt && callspace) {
      if (bDepend.indexOf(iCurr) >= 0 && (obj = wdgt.component) && (obj.props['$for'] || obj.props['$$for'])) {
        obj.listen('for', function (value, oldValue) {
          // value, oldValue not used
          if (!comp.isHooked) {
            obj.unlisten('*', comp);
            return;
          }

          var newAttrs = comp.state.exprAttrs.slice(0);
          if (newAttrs.indexOf(sKey) < 0) // ensure no duplicated
            newAttrs.push(sKey);
          if (ctrlExprCmd_.indexOf(sKey) > 0) {
            // $if $elif $else
            if (oneTickFlowId_ == 0) {
              oneTickFlowId_ = ++flowExprIndex_; // use same ID in same tick
              setTimeout(function () {
                oneTickFlowId_ = 0;
              }, 0);
            }
            comp.$gui.flowExprId = oneTickFlowId_; // the flag for only run one time
          }
          comp.setState({ exprAttrs: newAttrs });
        });
        listenNum += 1;
      }

      if (hasTwoSpace) {
        hasTwoSpace = false; // reuse current wdgt and callspace
        iCurr -= 1;
      } else {
        wdgt = wdgt.parent;
        while (wdgt) {
          callspace = wdgt.$callspace;
          if (!callspace) wdgt = wdgt.parent;else {
            hasTwoSpace = !!callspace.forSpace;
            iCurr -= 1;
            break;
          }
        }
      }
      if (iCurr < iTo) break;
    }

    if (listenNum < bDepend.length) console.log('error: not all source ($for) is watched for ' + comp.widget.getPath() + ':' + sKey);
  }
}

function triggerConnTo_(bConn, value, oldValue, sKey) {
  for (var i = 0, item; item = bConn[i]; i++) {
    try {
      var targ = item[0],
          keyOrFn = item[1];
      if (item[2]) {
        // isDual
        if (targ) targ.duals[keyOrFn] = value;
      } else {
        if (targ) {
          if (targ[keyOrFn]) targ[keyOrFn](value, oldValue, sKey);
        } else {
          if (typeof keyOrFn == 'function') keyOrFn(value, oldValue, sKey);
        }
      }
    } catch (e) {
      console.log(e);
    }
  }
}

function triggerDual_(comp, attr, oldValue) {
  var gui = comp.$gui,
      bConn = gui.connectTo[attr];
  if (bConn && gui.compState >= 2) {
    // trigger when duals.xx ready
    setTimeout(function () {
      triggerConnTo_(bConn, comp.state[attr], oldValue, attr);
    }, 0);
  }
}
utils.triggerDual = triggerDual_;

function dualFuncOfGetSet_(comp, attr, superSet, setFn, baseDual) {
  var gui = comp.$gui,
      isId__ = attr == 'id__';
  if (isId__) {
    if (baseDual) {
      baseDual = undefined;
      console.log('error: can not apply base.setter to duals.id__');
    }
    if (superSet && setFn) gui.hasIdSetter = true;
  }

  if (baseDual) {
    if (superSet) baseDual.setter = superSet;else {
      baseDual.setter = function (value, oldValue) {
        comp.state[attr] = value;
      };
    }
  }
  return [getterFunc.bind(comp), setterFunc.bind(comp)];

  function getterFunc() {
    return this.state[attr];
  }

  function setterFunc(value) {
    if (!this.state) {
      gui.initDuals.push([attr, value]); // maybe undefine later, but used only when this.duals.attr exists
      return;
    }

    var oldValue, isTop;
    if (arguments.length >= 2) {
      oldValue = arguments[1];
      isTop = false;
    } else {
      // is topmost level
      oldValue = this.state[attr];
      if (oldValue === value) return; // if same to old, just ignore
      isTop = true;
    }

    var triggerLsn = false;
    if (isId__ && value <= 2) {
      if (isTop) this.state.id__ = gui.id__ = value;
      if (superSet) superSet(value, oldValue); // id__ not support 'base.setter'
      if (setFn) setFn(value, oldValue, attr);
      if (value == 1) gui.id2__ = 0; // next auto insert duals.id__ = identicalId() 
      triggerLsn = !superSet && value != 0;
    } else {
      if (gui.inSync) {
        if (gui.compState <= 1) {
          // delay assignment when duals.id__ = 1
          gui.initDuals.push([attr, value]);
          return;
        }
        // else, compState must be >= 1.5

        if (superSet) {
          if (!baseDual) {
            if (isTop) this.state[attr] = value;else value = this.state[attr];
            superSet(value, oldValue);
          }
          // else, call super by base.setter()
        } else {
          if (isTop && !baseDual) this.state[attr] = value;else value = this.state[attr]; // try using newest value
          triggerLsn = true;
        }
        if (setFn) setFn(value, oldValue, attr);
      } else {
        // current not in comp.render()
        var bNew = gui.duals_;
        if (bNew) // still in pending
          bNew.push([attr, value]);else {
          if (this.state.id__ == 2 && !isId__) // re-render it since id__ == 2 will quit render
            gui.id2__ = 0; // force next render auto call duals.id__ = xx

          bNew = gui.duals_ = this.state.duals.slice(0);
          bNew.push([attr, value]);
          comp.setState({ duals: bNew });
        }
      }
    }

    // only trigger listen in inner-most setter-func // avoid trigger twice
    if (triggerLsn && gui.compState >= 2) {
      // only when duals.xx ready and not unmount
      var bConn = gui.connectTo[attr];
      if (bConn) {
        setTimeout(function () {
          triggerConnTo_(bConn, comp.state[attr], oldValue, attr);
        }, 0);
      }
    }
  }
}

function syncProps_(comp) {
  var ret = false,
      firstRender = false;
  var exprDict,
      gui = comp.$gui,
      duals = comp.duals;

  gui.inSync = true;

  try {
    if (gui.compState == 0) {
      firstRender = true;
      gui.compState = 1; // first render, if gui.compState = 2 means second or later render
    }

    // setup gui.duals and regist tagAttrs to duals
    var sCtrlFlow = gui.flowFlag;
    var duals0 = gui.duals,
        duals2 = comp.state.duals;
    if (firstRender) {
      ret = true;
      if (gui.hasIdSetter) duals.id__ = 1;else {
        // simulate duals.id__ assign, but no trigger setter
        comp.state.id__ = 1;
        gui.id__ = 1;
      }

      var dHasDual = {},
          bWaitPass = [];
      Object.keys(duals).forEach(function (sKey) {
        var item = comp.props[sKey];
        if (item !== undefined) {
          // use props.xxx
          duals0[sKey] = item; // record prop.xxx
          bWaitPass.push([sKey, item]);
        }
        dHasDual[sKey] = true;
      });

      // check child of template when in __design__
      var exprAttrs0 = gui.exprAttrs,
          isExprList = Array.isArray(exprAttrs0);
      if (isExprList || sCtrlFlow) {
        if (W.__design__ && underTemplate_(comp.widget)) {
          gui.forExpr = 0; // ignore $for
          sCtrlFlow = gui.flowFlag = '';
          exprAttrs0.splice(0); // ignore all $attr
          comp.state.exprAttrs = [];
        }
      }

      // scan expr attr list
      var bExpr0 = [],
          bExpr = [];
      var exprAttrs2 = comp.state.exprAttrs;
      exprDict = gui.exprAttrs = {}; // exprDict = {attr:updateFunc(comp)}
      if (isExprList) {
        exprAttrs0.forEach(function (sKey, idx) {
          var sExpr = comp.props['$' + sKey],
              isDual = false;
          if (!sExpr && sKey == 'for' && gui.forExpr === 2) sExpr = comp.props['$$for'];

          if (!sExpr) {
            if (sKey != 'for') // $for='' is OK
              console.log('warning: invalid dual attribute ($' + sKey + ').');
            return;
          }

          if (sKey.indexOf('dual-') == 0) {
            var iPos = exprAttrs2.indexOf(sKey);
            if (iPos >= 0) exprAttrs2.splice(iPos, 1);

            var dualKey = sKey.slice(5).replace(_hyphenPattern, function (_, chr) {
              return chr.toUpperCase();
            });
            if (!dualKey) return;

            isDual = true;
            sKey = dualKey;
          }
          var bothPropExpr = comp.props[sKey] !== undefined;
          if (bothPropExpr) {
            if (!dHasDual[sKey]) {
              console.log('warning: dual attribute ($' + sKey + ') is confliction.');
              return;
            }
            // else, both dual-setter and :expr defined  // has record to bWaitPass
          }
          if (isDual) exprAttrs2.push(sKey); // dual-aa-bb --> aaBb

          if (sKey != 'data') {
            // not ($data or $dual-data)
            var iFlag_ = supportedAttr_[sKey];
            if (iFlag_ && iFlag_ != 5 && !bothPropExpr) gui.tagAttrs.push(sKey);
          }

          bExpr0.push(sKey);
          bExpr.push([sKey, sExpr]);
        });
      }

      // assign dual-init value
      var i,
          item,
          initDuals0 = gui.initDuals0;
      gui.initDuals0 = [];
      for (i = 0; item = initDuals0[i]; i++) {
        comp.state[item[0]] = item[1]; // assign dual-init value
      }

      // define dual-attr
      var exprDualSetter = {};
      var dualAttrList = Object.keys(gui.dualAttrs);
      duals0.children = comp.props.children;
      if (bExpr0.length || dualAttrList.length || gui.tagAttrs.length || gui.dataset.length) {
        var iRmvData_ = -1;
        var b = [bExpr0, dualAttrList, gui.tagAttrs, gui.dataset];
        for (var i = 0, bAttr; bAttr = b[i]; i++) {
          bAttr.forEach(function (sKey) {
            if (i == 0) {
              // comp.state[sKey] = undefined;  // '$expr' default is undefined
              // if (dHasDual[sKey]) return;    // only $expr can override-define
              dHasDual[sKey] = true;
              // already record duals0[sKey] when duals.$attr and props.attr both used
            } else if (i == 1) {
              // dual-xxx
              var redefined = false;
              if (comp.props[sKey] !== undefined) redefined = true;else if (dHasDual[sKey] && duals0[sKey] !== undefined) redefined = true;
              if (redefined) {
                console.log('warning: dual attribute (' + sKey + ') is confliction.');
                return;
              }
              // else, can redefine by: defineDual('attr') and props['dual-attr']

              dHasDual[sKey] = true;
              if (sKey != 'data') {
                // not 'dual-data'
                var iFlag_ = supportedAttr_[sKey];
                if (iFlag_ && iFlag_ != 5) gui.tagAttrs.push(sKey);
              }

              var value_ = duals0[sKey] = comp.props[gui.dualAttrs[sKey]];
              if (hasOwn_.call(duals, sKey)) {
                bWaitPass.push([sKey, value_]);
                return; // setter must defined
              } else comp.state[sKey] = value_;
            } else {
              // tagAttr, dataset
              if (dHasDual[sKey]) {
                if (i == 2 && sKey == 'data') // from gui.tagAttrs, and has duals.data
                  iRmvData_ = gui.tagAttrs.indexOf(sKey);
                return; // if define duals for tagAttr/dataset, you should handover its props init
              }

              dHasDual[sKey] = true;
              var value_ = duals0[sKey] = comp.props[sKey];
              if (hasOwn_.call(duals, sKey)) {
                bWaitPass.push([sKey, value_]);
                return; // setter must defined
              } else comp.state[sKey] = value_; // same as default dual-setter
            }

            var oldDesc = Object.getOwnPropertyDescriptor(duals, sKey);
            if (!oldDesc) {
              var bFn = dualFuncOfGetSet_(comp, sKey); // no super setter and no custom setter
              Object.defineProperty(duals, sKey, { enumerable: true, configurable: true,
                get: bFn[0], set: bFn[1]
              });
            } else {
              // dual-setter has defined, just reuse oldDesc
              if (i == 0) exprDualSetter[sKey] = true; // result of $expr assign to duals.expr, not state.expr
            }
          });
        }
        if (iRmvData_ >= 0) gui.tagAttrs.splice(iRmvData_, 1); // not take props.data as string
      }

      var ownerWdgt;
      if (gui.forExpr && (ownerWdgt = comp.widget)) {
        // if compWdgt.$callspace.forSpace === gui.forExpr means $for in acting
        var exprSpace;
        if (gui.forExpr == 2) {
          // is 'rfor'
          ownerWdgt.$callspace = { flowFlag: 'ref', forSpace: null };
          ownerWdgt.$callspace['data-rfor.path'] = '';
          exprSpace = ownerWdgt.$callspace.exprSpace = {};
          setupExprSpace(exprSpace, comp);
        }

        exprSpace = {};
        var forExpr_ = { flowFlag: 'for', exprSpace: exprSpace }; // gui.forExpr (boolean) --> callspace
        var forExprStr = comp.props[gui.forExpr == 2 ? '$$for' : '$for'],
            useForSpace = true;
        if (ownerWdgt.$callspace) {
          if (forExprStr) ownerWdgt.$callspace.forSpace = gui.forExpr = forExpr_;else {
            delete gui.forExpr;
            useForSpace = false;
          }
        } else {
          ownerWdgt.$callspace = forExpr_;
          if (!forExprStr) {
            delete gui.forExpr;
            forExpr_.flowFlag = 'for0'; // flowFlag: ref for for0
          } else gui.forExpr = forExpr_;
        }
        if (useForSpace) setupExprSpace(exprSpace, comp, !forExprStr);

        // if !gui.forExpr: 'for' must not in bExpr0 and bExpr
        if (gui.forExpr) {
          var comps_ = gui.comps2 = gui.comps; // backup for dynamic setup
          var exprKeys_ = gui.exprKeys = [];
          var exprChild_ = gui.exprChild = [];
          for (var i = comps_.length - 1; i >= 0; i -= 1) {
            var child = comps_[i];
            if (child) {
              if (hasClass_(child.props.className, 'rewgt-static')) {
                exprKeys_.unshift(null);
                exprChild_.unshift(null);
                continue;
              }

              var sKeyExpr = child.props['$key'],
                  fn = null;
              if (sKeyExpr && typeof sKeyExpr == 'string') {
                fn = getKeyChildExprAst_(comp, sKeyExpr, 'key');
                if (!fn) console.log("error: invalid '$key' expression: " + sKeyExpr);
              } else console.log("error: no '$key' defined for child element in '$for' loop.");
              if (fn) {
                exprKeys_.unshift(fn);

                var sChildExpr = child.props['$children'],
                    fn2 = null;
                if (sChildExpr && typeof sChildExpr == 'string') {
                  fn2 = getKeyChildExprAst_(comp, sChildExpr, 'children');
                  if (!fn2) console.log("error: invalid '$children' expression: " + sChildExpr);
                }
                exprChild_.unshift(fn2);

                continue; // avoid call comps_.splice(i,1);
              }
            }
            comps_.splice(i, 1);
          }

          gui.comps = [];gui.compIdx = {}; // no need save compIdx, since it would be adjusted
        }
      }

      if (bExpr.length) {
        gui.flowExprId0 = 0;
        gui.flowExprId = 1; // means wait to update

        bExpr.forEach(function (item) {
          var sKey = item[0];
          var b = renewFuncOfExpr_(comp, sKey, item[1], exprDualSetter[sKey]); // item[1] is sExpr
          var fn = b[0],
              headId = b[1];
          if (!fn) console.log('warning: compile expression ($' + sKey + ') failed.');else {
            if (headId != 'any') {
              var delayExpr = gui.syncExpr;
              if (!delayExpr) delayExpr = gui.syncExpr = [];
              gui.syncExpr.push([sKey, fn]); // regist in didMount, avoid calling in first render
            } else exprDict[sKey] = fn; // add to $gui.exprAttrs, includes: $for $if $elif

            if (sKey.indexOf('data-') == 0 || sKey.indexOf('aria-') == 0) gui.dataset2.push(sKey); // add data-* aria-* to node.dataset
          }
        });
      }

      gui.compState = 1.5; // 1.5 means can assign duals.xx, but no trigger listen

      var passLen = bWaitPass.length;
      gui.initDuals.forEach(function (item2) {
        var sKey = item2[0],
            iPos = bWaitPass.findIndex(function (a) {
          return a[0] === sKey;
        });
        if (iPos >= 0 && iPos < passLen) {
          bWaitPass.splice(iPos, 1); // overwrite initial props-assign
          passLen -= 1;
        }
        bWaitPass.push(item2);
      });
      gui.initDuals = [];
      // gui.duals_ = null;  // default is undefined

      while (item = bWaitPass.shift()) {
        duals[item[0]] = item[1]; // assign by setter
      }

      gui.compState = 2;
    } else {
      // not first render
      // gui.compState = 2;  // already is 2
      exprDict = gui.exprAttrs;
      gui.duals_ = null;

      var duaItem;
      while (duaItem = duals2.shift()) {
        duals[duaItem[0]] = duaItem[1]; // do this.duals.xxx = value before props re-assign
      }
    }

    var exprAttrs2 = comp.state.exprAttrs,
        bConns = [];
    if (exprAttrs2.length) {
      var item,
          iPos = exprAttrs2.indexOf('data');
      if (iPos >= 0) {
        item = exprAttrs2[iPos];
        exprAttrs2.splice(iPos, 1);
        assignOneDual(bConns, item);
        exprAttrs2 = comp.state.exprAttrs; // 'duals.data = xx' maybe change state.exprAttrs
      }

      while (item = exprAttrs2.shift()) {
        assignOneDual(bConns, item);
      }
    }

    if (sCtrlFlow || gui.forExpr) {
      var ownerWdgt,
          hasCond = false,
          ctrlValue = true;
      if (sCtrlFlow) {
        ctrlValue = comp.state[sCtrlFlow];
        if (sCtrlFlow == 'if' || sCtrlFlow == 'elif') {
          // will auto update nearby $elif $else, except when target not ready yet
          hasCond = true;
          comp['hide.'] = !ctrlValue;
        } else if (sCtrlFlow == 'else') {
          if (firstRender) {
            // ensure comp.state['else'] is correct, maybe not updated by previous $if $elif since this node ready yet
            gui.flowExprId0 = gui.flowExprId = flowExprIndex_; // assign first to avoid recursion
            ctrlValue = comp.state['else'] = !anyPrevIfTrue2(comp); // check by none-eval
          }
          hasCond = true;
          comp['hide.'] = !ctrlValue;
        }
      }

      if (gui.forExpr && (ownerWdgt = comp.widget)) {
        // has '$for' expression
        // set items to callspace
        ctrlValue = comp.state['for'];
        if (!Array.isArray(ctrlValue) || ctrlValue.length == 0) ctrlValue = [];
        gui.forExpr['data-for.path'] = ctrlValue;

        // setup gui.comps and gui.compIdx
        var newCompIdx = {},
            newComps = [],
            comps_ = gui.comps2;
        var exprKeys_ = gui.exprKeys,
            exprChild_ = gui.exprChild;
        var currNode,
            hasStatic = false,
            childInline = comp.props['childInline.'];
        ctrlValue.forEach(function (item, idx) {
          for (var i = 0, child; child = comps_[i]; i += 1) {
            var fn = exprKeys_[i];
            if (!fn) {
              hasStatic = true; // rewgt-static
              var ele,
                  keyid = 'static-' + idx,
                  dProp = Object.assign({}, child.props);
              dProp['keyid.'] = keyid;dProp.key = keyid; // no 'hookTo.' for static node
              // if div.rewgt-static --> span.rewgt-static
              newCompIdx[keyid] = newComps.push(reactCreate_(childInline ? 'span' : 'div', dProp)) - 1;
            } else {
              var childInline2 = child.props['childInline.'];
              if (childInline2 !== undefined) {
                // not pure react element (such as: <div>)
                if (childInline) {
                  if (!childInline2) continue; // invalid element
                } else {
                  // if not childInline, only support rewget-static/rewgt-panel/rewgt-unit
                  if (!hasClass_(child.props.className, ['rewgt-panel', 'rewgt-unit'])) continue;
                }
              }
              if (child.props['isReference.']) continue; // not support RefXXX under $for

              var fn2 = exprChild_[i],
                  forChild = null;
              if (fn2) {
                try {
                  forChild = fn2(comp, idx);
                  if (!forChild) forChild = null;else if (!reactIsValid_(forChild) && !Array.isArray(forChild) && typeof forChild != 'string') forChild = null;
                } catch (e) {
                  // failed, forChild must be null
                  console.log("error: caculate '$children' (" + (i + 1) + ' of ' + comps_.length + ') failed.');
                  console.log(e);
                }
              }

              var keyid,
                  succ = false;
              try {
                keyid = fn(comp, idx);
                if (typeof keyid != 'number') keyid = keyid + '';
                succ = true;
              } catch (e) {
                console.log("error: caculate '$key' (" + (i + 1) + ' of ' + comps_.length + ') failed.');
                console.log(e);
              }

              if (succ) {
                var childEle,
                    childProp = { 'hookTo.': ownerWdgt, 'keyid.': keyid, key: keyid + '', 'for.index': idx };
                if (forChild) {
                  // forChild can be: Element, bElementList, sTextString
                  if (reactIsValid_(forChild) || typeof forChild == 'string') childEle = reactClone_(child, childProp, forChild);else // forChild must be Array
                    childEle = reactClone_.apply(null, [child, childProp].concat(forChild));
                } else childEle = reactClone_(child, childProp);
                newCompIdx[keyid] = newComps.push(childEle) - 1;
              }
              // else, just ignore
            }
          }
        });

        if (hasStatic) {
          setTimeout(function () {
            renewStaticChild(comp, true);
          }, 0); // renew static node after didMount
        }

        if (gui.comps.length != 0 || newComps.length != 0) gui.removeNum += 1; // will fire duals.childNumId
        gui.compIdx = newCompIdx;gui.comps = newComps;
      }
    }

    if (bConns.length && gui.compState >= 2) {
      // not unmount
      setTimeout(function () {
        bConns.forEach(function (item) {
          triggerConnTo_(item[0], item[1], item[2], item[3]); // triggerConnTo_(bConn,value,oldValue,sKey)
        });
      }, 0);
    }

    if (firstRender && W.__debug__) {
      var fn = comp.props.setup__;
      if (typeof fn == 'function') {
        try {
          fn.apply(comp);
        } catch (e) {
          console.log(e);
        }
      }
    }

    if (gui.id__ === comp.state.id__) {
      if (gui.id2__ == 0) // not fired by duals.id__ = xx
        duals.id__ = identicalId_ !== comp.state.id__ ? identicalId_ : identicalId();
      // else, in duals.id__ assigning // ignore
    } else {
      var iTmp = comp.state.id__;
      comp.state.id__ = iTmp - 1; // iTmp-1 >= 3 because identicalId() >= 4, force make different
      duals.id__ = iTmp; // setter of duals.id__ must run since state.id__ changed
    }
    gui.id2__ = 0; // gui.id2__ == 0 means finish one loop // gui.id2__ != 0 means by 'duals.id__ = xx', else, changing by setState({id__})

    if (gui.isChildExpr && gui.children2 !== comp.props.children) {
      gui.removeNum += gui.comps.length; // wait to rescan in duals.childNumId
      gui.children2 = comp.props.children;
      gui.comps = children2Arr_(comp.props.children);
    }
    duals.childNumId = gui.comps.length + (gui.removeNum << 16);
  } catch (e) {
    if (firstRender) gui.compState = 2;
    console.log(e);
  }

  gui.inSync = false;
  return ret; // if return true means comp.state.xxx is changed

  function assignOneDual(bConns, item) {
    var fn = exprDict[item];
    if (!fn) return;
    try {
      var bConn = gui.connectTo[item];
      if (bConn) {
        // this action is listened
        var oldValue = comp.state[item];
        fn(comp); // try update with expression
        var newValue = comp.state[item];
        if (newValue !== oldValue) // succ update expression and get a new value
          bConns.push([bConn, newValue, oldValue, item]); // wait to fire listen-function
      } else fn(comp);
    } catch (e) {
      console.log(e);
    }
  }

  function underTemplate_(wdgt) {
    var comp = wdgt && wdgt.component;
    if (comp) {
      if (comp.props['isTemplate.']) return true;else return underTemplate_(wdgt.parent);
    } else return false;
  }
}

// utils.popWin
//----------

function getPopFrameOpt_(obj, popOption) {
  var frameEle = null,
      dFrame = popOption.frame || {},
      framePath = dFrame.path;
  if (framePath) {
    frameEle = obj.componentOf(framePath);
    frameEle = frameEle && frameEle.fullClone();
    if (!frameEle) {
      if (!W.__design__) delete popOption.frame; // next time use default frame
      console.log('warning: can not locate popup frame (' + framePath + ').');
    }
  }
  return frameEle || null;
}

utils.popWin = {
  showWindow: function showWindow(ele, popOption, callback, optComp) {
    // callback is called only when window success showing
    if (W.__design__ && (inFirstLoading_ || inReactReloading_)) {
      if (callback) callback();
      return;
    }

    var popWin = topmostWidget_ && topmostWidget_['$pop'];
    var popObj = popWin && popWin.component;
    if (!popObj || !ele) return; // fatal error

    if (!hasClass_(ele.props.className, ['rewgt-panel', 'rewgt-unit'])) {
      utils.instantShow('error: only panel, div, paragraph can use as popup window.');
      return;
    }

    var popFrame = popOption.frameElement || null;
    if (!popFrame && optComp) popFrame = getPopFrameOpt_(optComp, popOption);
    var oldChecked = undefined;
    if (optComp && optComp.props['isOption.'] && hasOwn_.call(optComp.state, 'data-checked')) oldChecked = optComp.state['data-checked'];

    // ele should come from template or compObj.fullClone()
    popObj.setChild(reactCreate_(MaskPanel__, { popOption: popOption, popFrame: popFrame }, ele), function () {
      if (W.__design__) {
        if (containNode_ && containNode_.setDesignModal) containNode_.setDesignModal(true);
        if (oldChecked !== undefined && optComp) {
          setTimeout(function () {
            optComp.state['data-checked'] = oldChecked; // not leave data-checked=1
          }, 300);
        }
      }
      if (callback) callback();
    });
  },

  listWindow: function listWindow() {
    var popWin = topmostWidget_ && topmostWidget_['$pop'];
    var popObj = popWin && popWin.component;
    if (!popObj) return [];

    var bRet = [],
        comps = popObj.$gui.comps;
    comps.forEach(function (item) {
      if (!item) return;
      var sKey = getElementKey_(item);
      if (sKey) {
        var iTmp = parseInt(sKey);
        if (iTmp + '' === sKey) sKey = iTmp; // key --> keyid
        bRet.push([sKey, item.props.popOption]);
      }
    });
    return bRet;
  },

  closeAll: function closeAll(callback) {
    // force close all poped window
    function doCallback() {
      if (callback) callback();
    }

    var popWin = topmostWidget_ && topmostWidget_['$pop'];
    var popObj = popWin && popWin.component;
    if (!popObj) return doCallback();

    var bArgs = [],
        comps = popObj.$gui.comps,
        idx = comps.length - 1;
    popObj.$gui.comps.forEach(function (ele) {
      if (ele) {
        var sKey = getElementKey_(ele);
        if (sKey) bArgs.unshift('-' + sKey);
      }
    });

    if (bArgs.length) {
      bArgs.push(doCallback);
      popObj.setChild.apply(popObj, bArgs);
    } else return doCallback();
  },

  popWindow: function popWindow(retData) {
    var popWin = topmostWidget_ && topmostWidget_['$pop'];
    var popObj = popWin && popWin.component;
    if (!popObj) return;

    var targObj = null,
        comps = popObj.$gui.comps,
        idx = comps.length - 1;
    while (idx >= 0) {
      var item = comps[idx],
          sKey = item && getElementKey_(item);
      if (sKey) {
        item = popWin[sKey];
        if (item) {
          targObj = item.component;
          if (targObj) break;
        }
      }
      idx -= 1;
    }
    if (!targObj) return;

    var optPath = targObj.props.optPath || '';
    var keyid = targObj.$gui.keyid,
        opt_ = targObj.state.popOption;
    if (arguments.length == 0) {
      // try use beforeClose() get return data
      var fn = opt_ && opt_.beforeClose;
      if (typeof fn == 'function') retData = fn();
    }

    var callback = opt_ && opt_.callback;
    popObj.setChild('-' + keyid, function () {
      if (typeof callback == 'function') callback(retData);
    });
  }
};

// schema, dump / load react tree
//-------------------------------
function getCompRenewProp_(oneObj) {
  var template = oneObj._;
  if (!template) return null;

  var bStated = template._statedProp || [];
  var bSilent = template._silentProp || [];
  var hasHtmlTxt = template._htmlText;
  var props = Object.assign({}, oneObj.props);

  bStated.forEach(function (item) {
    if (hasOwn_.call(props, item)) props[item] = oneObj.state[item];
  });
  bSilent.forEach(function (item) {
    delete props[item];
  });

  if (hasHtmlTxt) {
    var sHtml = oneObj.state['html.'];
    if (!sHtml || typeof sHtml != 'string') delete props['html.'];else props['html.'] = sHtml;
  } else delete props['html.'];

  delete props['data-unit.path'];
  delete props['data-span.path'];
  delete props.children;

  return props;
}
creator.getCompRenewProp = getCompRenewProp_;

function deepCloneReactEle_(srcEle, dProp, compWdgt, compObj) {
  // compObj must not a linker
  // return reactClone_(srcEle,dProp);  // can not directly clone

  var gui = compObj.$gui,
      hasFor = !!gui.forExpr;
  var bComp = hasFor ? gui.comps2 : gui.comps,
      bArgs = [];
  var childInline = compObj.props['childInline.'];

  bComp.forEach(function (child) {
    if (!child) return;
    if (hasFor || child.props['isReference.']) {
      // add unlinked-linker
      bArgs.push(child);
      return;
    }

    if (hasClass_(child.props.className, 'rewgt-static')) {
      var props = Object.assign({}, child.props); // no subObj.props
      delete props['keyid.'];delete props.key;
      delete props.onMouseDown;
      delete props.onDoubleClick;

      // try clone static node
      var idx,
          sName = props.name;
      if (typeof (idx = parseInt(sName)) == 'number' && idx >= 0x100000) {
        // local --> global
        var bList = compObj.$gui.statics;
        bList = bList && bList[sName];

        if (Array.isArray(bList)) {
          var bNew = bList.map(function (item) {
            return item.cloneNode(true);
          });
          idx = W.$staticNodes.push(bNew) - 1; // take gui.removeNum == 0
          props.name = idx + '';
        }
      }
      // else, reuse W.$staticNodes[idx]; // no change

      bArgs.push(reactCreate_(childInline ? 'span' : 'div', props));
      return;
    }

    var sKey = getElementKey_(child);
    var subWdgt = sKey && compWdgt[sKey],
        subObj = subWdgt && subWdgt.component;
    if (!subObj) return; // invalid component

    if (subObj.props['isTemplate.'] && !W.__design__) {
      var tempObj = subObj.$gui.template;
      if (tempObj instanceof templateNode) return reactClone_(child, { template: tempObj }, null);else return; // invalid template
    }

    var props = getCompRenewProp_(subObj);
    if (props) bArgs.push(deepCloneReactEle_(child, props, subWdgt, subObj)); // subObj must not linker
    // else, ignore: linked linker, invalid subObj._
  });

  if (bArgs.length == 0) return reactClone_(srcEle, dProp, null);else {
    bArgs.unshift(dProp);
    bArgs.unshift(srcEle);
    return reactClone_.apply(null, bArgs);
  }
}
creator.deepCloneReactEle = deepCloneReactEle_;

function quickCheckEqual_(a, b) {
  var iLen;
  if (a === b) return true;else if (Array.isArray(a)) {
    if (Array.isArray(b) && (iLen = a.length) == b.length) {
      for (var i = 0; i < iLen; i++) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }
  } else if (a && (typeof a === 'undefined' ? 'undefined' : _typeof(a)) == 'object') {
    if (b && (typeof b === 'undefined' ? 'undefined' : _typeof(b)) == 'object') {
      var bListA = Object.keys(a);
      var bListB = Object.keys(b);
      if ((iLen = bListA.length) != bListB.length) return false;
      for (var i = 0; i < iLen; i++) {
        var item = bListA[i];
        if (a[item] !== b[item]) return false;
      }
      return true;
    }
  }
  return false;
}

function dumpReactTree_(bRet, wdgt, sPath) {
  // for topmost, bRet[0] is result
  if (!wdgt) {
    wdgt = topmostWidget_;
    if (!wdgt) return;
    sPath = '';
  }

  var compObj = wdgt.component,
      isTopmost = wdgt === topmostWidget_;
  sPath += '.' + (compObj ? compObj.$gui.keyid : 'undefined');
  if (!compObj) {
    console.log('warning: widget (' + sPath + ') is null.');
    return;
  }

  // step 1: find className, props
  var dProp = {},
      iFlag = 0; // 0:panel, 1:unit(div), 2:paragraph, 3:span
  var objState = compObj.state,
      objGui = compObj.$gui;
  var sClsName,
      sLink = objState['data-unit.path'];
  if (sLink !== undefined) {
    sClsName = 'RefDiv';
    iFlag = 2;
  } else {
    sLink = objState['data-span.path'];
    if (sLink !== undefined) {
      sClsName = 'RefSpan';
      iFlag = 3;
    }
  }

  if (sLink !== undefined) {
    // is linker
    var oldProp = sLink ? compObj.props['link.props'] : null;
    if (oldProp) {
      // has linked
      Object.assign(dProp, oldProp);

      if (!compObj._._htmlText) delete dProp['html.'];

      var sKey = dProp['keyid.'];
      delete dProp['keyid.'];
      delete dProp.key;
      if (typeof sKey == 'string') {
        if (sKey[0] == '$') {
          sKey = sKey.slice(1);
          if (sKey !== parseInt(sKey) + '') dProp.key = sKey;
          // else, is number, dProp.key removed
        } else dProp.key = sKey; // save 'key', not 'keyid.'
      }
      // else, not string, dProp.key removed

      var shadowTemp = getWidgetTempInfo(compObj._);
      var bStated = shadowTemp[1],
          bSilent = shadowTemp[2];
      bStated.forEach(function (item) {
        if (hasOwn_.call(dProp, '$' + item)) // such as $width=expr
          delete dProp[item];else {
          if (hasOwn_.call(dProp, item)) // only fetch back items that in 'link.props'
            dProp[item] = objState[item];
        }
      });
      bSilent.forEach(function (item) {
        delete dProp[item];
      });

      Object.keys(dProp).forEach(function (item) {
        if (dProp[item] === undefined) delete dProp[item]; // remove all 'undefined' value
      });

      if (dProp.style && Object.keys(dProp.style).length == 0) delete dProp.style;

      dProp['$'] = sLink;
      bRet.push([sClsName, dProp, iFlag]);
    }
    // else, system error, unknown format
  } else if (compObj.props['isReference.']) ; // ignore unlinked RefDiv/RefSpan
  else {
      var keyid = objGui.keyid;
      var sKey = typeof keyid == 'string' ? keyid : ''; // if keyid is number, sKey = ''
      var shadowTemp = getWidgetTempInfo(compObj._);
      var bStated = shadowTemp[1],
          bSilent = shadowTemp[2],
          dDefault = shadowTemp[3];
      var hasHtmlTxt = shadowTemp[4],
          bDefault = Object.keys(dDefault);
      sClsName = shadowTemp[0];

      if (compObj.props['childInline.']) {
        if (hasClass_(compObj.props.className, 'rewgt-unit')) iFlag = 2;else iFlag = 3;
      } else {
        if (hasClass_(compObj.props.className, 'rewgt-unit')) iFlag = 1;
        // else iFlag = 0;
      }

      Object.assign(dProp, compObj.props);
      bStated.forEach(function (item) {
        // NOT take data-* aria-* as stated props
        if (hasOwn_.call(dProp, '$' + item)) // such as $width=expr
          delete dProp[item];else {
          // if (hasOwn_.call(dProp,item)) // maybe last time prop.xx is default
          dProp[item] = objState[item];
        }
      });
      bSilent.forEach(function (item) {
        delete dProp[item];
      });
      bDefault.forEach(function (sAttr) {
        var value = dDefault[sAttr];
        if (value === undefined) {
          // 'undefined' match any of none-number
          if (typeof dProp[sAttr] != 'number') delete dProp[sAttr];
        } else if (quickCheckEqual_(value, dProp[sAttr])) delete dProp[sAttr];
      });

      delete dProp.children;
      delete dProp['hasStatic.']; // can restore by analyse

      Object.keys(dProp).forEach(function (item) {
        // includes 'isPre.'
        var value = dProp[item];
        if (value === undefined) delete dProp[item]; // remove all 'undefined' value
        else if (typeof value == 'function') {
            delete dProp[item];
            if (!isUnderLinker(compObj.widget)) console.log('warning: can not dump function property (' + item + ')');
          }
      });
      delete dProp.key;
      if (sKey) dProp.key = sKey;
      if (isTopmost) {
        delete dProp.left;
        delete dProp.top;
      }
      if (dProp.style && Object.keys(dProp.style).length == 0) delete dProp.style;

      // step 2: scan children
      var bSubRet = [];
      if (!compObj.props['noSaveChild.'] && sLink === undefined) {
        var hasFor = !!objGui.forExpr,
            compNode = null;
        var bComp = hasFor ? objGui.comps2 : objGui.comps;
        bComp.forEach(function (child) {
          if (!child) return;
          if (hasFor) {
            scanOneLevelEle(bSubRet, child, iFlag);
            return;
          }

          var sKey = getElementKey_(child);
          if (!sKey) return;

          if (isTopmost && sKey[0] == '$') {
            if (sKey == '$pop') return; // ignore popup window widget
            if (sKey[1] == '$' && child.props['isTemplate.']) return; // ignore .body.$$template
          }

          var child_ = wdgt[sKey];
          if (child_) dumpReactTree_(bSubRet, child_, sPath);else {
            if (hasClass_(child.props.className, 'rewgt-static')) {
              if (!compNode) compNode = compObj.getHtmlNode();
              var sName = child.props.name,
                  bHtml = [];
              if (compNode && sName) {
                var node = compNode.querySelector('.rewgt-static[name="' + sName + '"]');
                if (node) {
                  for (var i = 0, subItem; subItem = node.children[i]; i += 1) {
                    bHtml.push(subItem.outerHTML);
                  }
                }
              }
              if (bHtml.length) bSubRet.push(['', { 'html': bHtml }, iFlag]); // iFlag is owner's flag // sTempName is '', means it is static text
            }
            // else, unknown format, ignore
          }
        });
      }

      if (hasHtmlTxt) {
        if (bSubRet.length) delete dProp['html.'];else {
          var sHtml = compObj.state['html.'];
          if (!sHtml || typeof sHtml != 'string') delete dProp['html.'];else dProp['html.'] = sHtml;
        }
      } else delete dProp['html.'];

      var bWgtInfo = [sClsName, dProp, iFlag];
      if (bSubRet.length) {
        bSubRet.unshift(bWgtInfo);
        bRet.push(bSubRet);
      } else bRet.push(bWgtInfo); // no child: typeof item[0] == 'string'
    }

  function getWidgetTempInfo(t) {
    return [t._className, t._statedProp || [], t._silentProp || [], t._defaultProp || {}, t._htmlText];
  }

  function isUnderLinker(wdgt) {
    if (!wdgt) return false;

    var comp = wdgt.component;
    if (comp && (comp.props['data-unit.path'] || comp.props['data-span.path'])) return true;else return isUnderLinker(wdgt.parent);
  }

  function scanOneLevelEle(bRet, ele, iFlag) {
    if (hasClass_(ele.props.className, 'rewgt-static')) {
      var sName = ele.props.name,
          idx = parseInt(sName);
      if (typeof idx == 'number' && idx < 0x100000) {
        // from global
        var bList = W.$staticNodes[idx];
        if (Array.isArray(bList)) {
          var bHtml = [];
          for (var i2 = 0, item2; item2 = bList[i2]; i2++) {
            bHtml.push(item2.outerHTML);
          }
          if (bHtml.length) bRet.push(['', { 'html': bHtml }, iFlag]); // iFlag is owner's flag
        }
      }
    } else {
      var eleType = ele.type,
          evSet = eleType && eleType.prototype.$eventset;
      if (evSet) {
        var clsName = evSet[2],
            dProp = Object.assign({}, ele.props);
        var bChild = dProp.children;
        delete dProp.children;

        // dProp includes default props, but no 'keyid.' 'hookTo.'
        var subFlag = 0;
        if (dProp['childInline.']) {
          if (hasClass_(dProp.className, 'rewgt-unit')) subFlag = 2;else subFlag = 3;
        } else {
          if (hasClass_(dProp.className, 'rewgt-unit')) subFlag = 1;
          // else subFlag = 0;
        }
        Object.keys(dProp).forEach(function (sKey) {
          if (sKey.slice(-1) == '.') delete dProp[sKey];
        });

        var bSubRet = [];
        if (bChild) {
          if (!Array.isArray(bChild)) bChild = [bChild];
          bChild.forEach(function (child) {
            if (!child) return;
            scanOneLevelEle(bSubRet, child, subFlag);
          });
        }

        var bInfo = [clsName, dProp, subFlag];
        if (bSubRet.length) {
          bSubRet.unshift(bInfo);
          bRet.push(bSubRet);
        } else bRet.push(bInfo);
      }
    }
  }
}

var lastDesignTask_ = null;
var lastDesignTaskId_ = 0;

function popDesigner_(comp, sWhich, toolOpt, baseUrl) {
  if (!containNode_ || !sWhich) return false;
  if (!containNode_.showDesignDlg) return false;

  var compObj = comp;
  if (typeof comp == 'string') {
    compObj = W.W(comp);
    compObj = compObj && compObj.component;
    if (!compObj || !compObj.props) return false;
  }
  if (!compObj) return false;

  if (!toolOpt) {
    var opt = compObj._._getGroupOpt(compObj),
        bList = opt.tools || [];
    toolOpt = bList.find(function (item) {
      // item:{name,title,icon,url,halfScreen,noMove,clickable,get,set,left,top,width,height}
      return item.name === sWhich;
    });
    if (!toolOpt || !toolOpt.get || !toolOpt.set) return false;

    toolOpt = Object.assign({}, toolOpt); // avoid modify opt.tools
    if (!baseUrl) baseUrl = opt.baseUrl || '';
  }

  // compObj can be HTMLElement or react component
  var inValue = toolOpt.get(compObj); // inValue should be null or json-able data
  if (inValue === null) return false;

  lastDesignTaskId_ += 1;
  lastDesignTask_ = [lastDesignTaskId_, compObj, toolOpt]; // compObj maybe changed to node
  containNode_.showDesignDlg(lastDesignTaskId_, toolOpt, inValue, baseUrl);
  return true;
}

function saveDesigner_(beClose, taskId, outValue) {
  if (lastDesignTask_ && lastDesignTask_[0] == taskId) {
    var compObj = lastDesignTask_[1],
        toolOpt = lastDesignTask_[2];
    if (beClose) lastDesignTask_ = null;
    toolOpt.set(compObj, outValue, beClose);
  }
}

function staticMouseDown(event) {
  event.preventDefault(); // avoid double click selecting
}
creator.staticMouseDown = staticMouseDown;

function staticDbClick(event) {
  if (!containNode_) return;
  var wdgt = this.widget; // 'this' should be owner component
  var sPath = wdgt && wdgt.getPath();
  if (!sPath) return;
  var tillNode = this.getHtmlNode();
  if (!tillNode) return;

  var sName = '',
      staticNode = event.target;
  while (staticNode) {
    if (staticNode === tillNode) break;
    if (staticNode.classList.contains('rewgt-static')) {
      if (!staticNode.getAttribute('data-marked')) // avoid design editing 
        sName = staticNode.getAttribute('name'); // static-node id
      break;
    }
    staticNode = staticNode.parentNode;
  }
  if (!sName) return;

  event.stopPropagation();
  event.preventDefault();

  popDesigner_(staticNode, 'default', {
    name: 'default',
    title: 'edit content',
    url: creator.appBase() + '/edit_static.html', halfScreen: true,
    // icon: '', noMove: false,
    // left: 0.05, top: 0.05,
    width: 0.96,
    height: 0.9,
    clickable: false,

    get: function get(node) {
      return [node.innerHTML, sPath, sName];
    },

    set: function set(node, outValue, beClose) {
      var sHtml = outValue[0] || '',
          sPath = outValue[1],
          sName = outValue[2];
      if (!sPath || !sName) return; // ignore

      var compObj = W.W(sPath);
      compObj = compObj && compObj.component;
      if (!compObj) return;

      var compNode = compObj.getHtmlNode(),
          staticNode = null;
      if (compNode) staticNode = compNode.querySelector('.rewgt-static[name="' + sName + '"]');
      if (staticNode === node) {
        // static node still available
        staticNode.innerHTML = sHtml;

        // save to W.$staticNodes
        var idx = parseInt(sName);
        if (typeof idx == 'number') {
          var gui = compObj.$gui,
              dStatic = gui.statics,
              bList = [];
          if (!dStatic) dStatic = gui.statics = {};
          for (var i = 0, item; item = staticNode.children[i]; i += 1) {
            bList.push(item);
          }

          if (idx >= 0x100000) dStatic[sName] = bList;else {
            // global --> local
            var iLen = gui.comps.length,
                newName = 0x100000 + gui.removeNum + iLen + '';
            for (var i = 0; i < iLen; i++) {
              var child = gui.comps[i];
              if (child && hasClass_(child.props.className, 'rewgt-static') && child.props.name === sName) {
                gui.comps[i] = reactClone_(child, { name: newName }); // for dumpReactTree
                break;
              }
            }

            dStatic[newName] = bList;
            staticNode.setAttribute('name', newName);
          }
        }

        // notify backup current doc
        if (W.__design__) {
          if (containNode_.notifyBackup) containNode_.notifyBackup(''); // wdgtPath = '' means not refresh selected prop-editor
        }
      }
    }
  }, '');
}
creator.staticDbClick = staticDbClick;

function loadReactTreeEx_(bRet, bTree, bStatic, dTempSet, sPrefix) {
  var iTagType = 0; // 0:WTC 1:tag 2:ReactClass 3:ReactElement

  function getTemplate(sName, sPrefix) {
    var tp = typeof sName === 'undefined' ? 'undefined' : _typeof(sName);
    if (tp != 'string') {
      if (reactIsValid_(sName)) {
        iTagType = 3;
        return sName; // sName is ReactElement
      } else if (tp == 'function') {
        iTagType = 2;
        return sName;
      } else return null; // error
    }

    var temp,
        shadowCls = sPrefix ? W.$main[sPrefix] : null;
    if (!shadowCls) {
      // if has shadowCls, not use cached template
      temp = dTempSet[sName];
      if (temp || temp === null) {
        iTagType = 0;
        return temp;
      }
    }

    var ch,
        b = sName.split('.'),
        sAttr = b.shift();
    if (b.length == 0 && ((ch = sAttr[0]) < 'A' || ch > 'Z')) {
      iTagType = 1;
      return sAttr; // createClass_(sAttr); // such as: ['div',{}]
    } else iTagType = 0;

    temp = T[sAttr];
    while (temp && (sAttr = b.shift())) {
      temp = temp[sAttr];
    }
    if (!temp || !temp._extend) dTempSet[sName] = temp = null; // set null, no try next time
    else {
        if (shadowCls) temp = createClass_(temp._extend(shadowCls));else dTempSet[sName] = temp = createClass_(temp._extend());
      }
    return temp;
  }

  function createSysEle(bRet, bChild, iFrom) {
    var iLen = bChild.length;
    for (var i = iFrom; i < iLen; i++) {
      var item = bChild[i];
      if (!item) continue;

      var tp = typeof item === 'undefined' ? 'undefined' : _typeof(item);
      if (tp == 'string') {
        bRet.push(item); // react take it as text node
        continue;
      } else if (reactIsValid_(item)) {
        bRet.push(item);
        continue;
      } else if (tp == 'function') {
        bRet.push(reactCreate_(item));
        continue;
      }

      if (Array.isArray(item) && item.length >= 1) {
        var sName,
            dProp,
            firstItem = item[0],
            iChildNum = 0,
            isNoneProp = false;
        if (Array.isArray(firstItem)) {
          iChildNum = item.length - 1;
          sName = firstItem[0];
          dProp = firstItem[1];
        } else {
          // iChildNum = 0;
          sName = firstItem;
          dProp = item[1];
        }
        if (!dProp) {
          isNoneProp = true;
          dProp = {};
        }

        var isEle = false,
            tp2 = typeof sName === 'undefined' ? 'undefined' : _typeof(sName);
        if (tp2 == 'string') {
          var ch = sName[0];
          if (ch >= 'A' && ch <= 'Z' || sName.indexOf('.') >= 0) {
            console.log('warning: unknown react class (' + sName + ')');
            continue;
          }
        } else if (reactIsValid_(sName)) isEle = true;else if (tp2 != 'function') {
          console.log('warning: unknown react class');
          continue;
        }

        // sName can be React Class, or sTag
        if (iChildNum) {
          var bRet_ = [];
          createSysEle(bRet_, item, 1);
          if (isEle) bRet.push(reactClone_(sName, dProp, bRet_));else bRet.push(reactCreate_(sName, dProp, bRet_));
        } else {
          if (isEle) bRet.push(isNoneProp ? sName : reactClone_(sName, dProp));else bRet.push(reactCreate_(sName, dProp));
        }
      }
    }
  }

  var sName,
      dProp,
      firstItem = bTree[0],
      iChildNum = 0,
      isNoneProp = false;
  if (Array.isArray(firstItem)) {
    iChildNum = bTree.length - 1;
    sName = firstItem[0];
    dProp = firstItem[1];
  } else {
    // iChildNum = 0;
    sName = firstItem;
    dProp = bTree[1];
  }
  if (!dProp) {
    isNoneProp = true;
    dProp = {};
  }

  if (!sName) {
    var bHtml = dProp.html || [];
    if (bHtml.length > 0) {
      var node = document.createElement('div');
      node.innerHTML = bHtml.join('');

      var bList = [],
          idx = bStatic.push(bList) - 1;
      for (var i = 0, item; item = node.children[i]; i += 1) {
        bList.push(item);
      }
      bRet.push(reactCreate_('div', { className: 'rewgt-static', name: idx + '' }));
      return true; // true means has static text
    }
    return false;
  }

  var sPrefix_ = '';
  if (sPrefix && dProp.key) sPrefix_ = sPrefix + '.' + dProp.key;

  var lnkTemp = sName === 'RefDiv' || sName === 'RefSpan' ? sName : '';
  if (lnkTemp) {
    bRet.push(reactCreate_(getTemplate(lnkTemp, sPrefix_), dProp));
    return false;
  }

  var objTemp = getTemplate(sName, sPrefix_);
  if (!objTemp) {
    var nameDesc = typeof sName == 'string' ? ' (' + sName + ')' : '';
    console.log('warning: can not find template' + nameDesc);
    return false;
  }

  if (iTagType > 0) {
    // objTemp is sTag, or ReactClass, or ReactElement
    if (iChildNum > 0) {
      var bRet_ = [];
      createSysEle(bRet_, bTree, 1);
      if (iTagType == 3) bRet.push(reactClone_(objTemp, dProp, bRet));else bRet.push(reactCreate_(objTemp, dProp, bRet_));
    } else {
      if (iTagType == 3) bRet.push(isNoneProp ? objTemp : reactClone_(objTemp, dProp));else bRet.push(reactCreate_(objTemp, dProp));
    }
  } else {
    var bArgs = [objTemp, dProp];
    if (iChildNum > 0) {
      var tp,
          hasStatic = false;
      for (var i = 1, item; item = bTree[i]; i += 1) {
        if (Array.isArray(item)) {
          if (loadReactTreeEx_(bArgs, item, bStatic, dTempSet, sPrefix_)) hasStatic = true;
        } else if (reactIsValid_(item)) bArgs.push(item);else if ((tp = typeof item === 'undefined' ? 'undefined' : _typeof(item)) == 'string') bArgs.push(reactCreate_(Span__, { 'html.': item }));else if (tp == 'function') bArgs.push(reactCreate_(item));
        // else, ignore
      }
      if (hasStatic) bArgs[1] = Object.assign({}, dProp, { 'hasStatic.': true });
    }
    bRet.push(reactCreate_.apply(null, bArgs));
  }

  return false; // false means no static text
}

utils.loadElement = function () {
  var bRet = [],
      argLen = arguments.length;

  if (argLen == 1) {
    loadReactTreeEx_(bRet, arguments[0], W.$staticNodes, W.$cachedClass);
    if (bRet.length == 1) return bRet[0];else return null;
  } else if (argLen == 0) return null;else {
    for (var i = 0; i < argLen; i++) {
      loadReactTreeEx_(bRet, arguments[i], W.$staticNodes, W.$cachedClass);
      if (bRet.length <= i) bRet.push(null);
    }
    return bRet;
  }
};

utils.loadElementEx = function (sPrefix) {
  var bRet = [],
      argLen = arguments.length;

  sPrefix = sPrefix || ''; // such as '.body.$$rewgt'
  if (argLen == 2) {
    loadReactTreeEx_(bRet, arguments[1], W.$staticNodes, W.$cachedClass, sPrefix);
    if (bRet.length == 1) return bRet[0];else return null;
  } else if (argLen <= 1) return null;else {
    for (var i = 1; i < argLen; i++) {
      loadReactTreeEx_(bRet, arguments[i], W.$staticNodes, W.$cachedClass, sPrefix);
      if (bRet.length < i) bRet.push(null);
    }
    return bRet;
  }
};

utils.setVendorLib = function (sName, callback) {
  var body = topmostWidget_ && topmostWidget_.component;
  if (!body || !sName || !callback) return; // fatal error

  var ret = null;
  function doCallback(registIt) {
    if (registIt) {
      var wdgt = ret && ret.widget;
      if (sName !== 'body' && wdgt) W[sName] = wdgt;
    }
    if (callback) callback(ret);
  }

  var sName2 = '$$' + sName;
  ret = body.componentOf(sName2);
  if (ret) {
    doCallback(true);
    return;
  }

  body.setChild(utils.loadElement(['TempPanel', { key: sName2 }]), function () {
    ret = body.componentOf(sName2); // ret must exists
    doCallback(true);
  });
};

function propagateResizing_(comp, inPending) {
  var currWdgt = comp.widget;
  if (!currWdgt) return;

  var gui = comp.$gui,
      wd = gui.cssWidth,
      hi = gui.cssHeight,
      pending = !!inPending;
  if (typeof wd != 'number' && typeof hi != 'number') return; // both width and height is auto, ignore

  if (!gui.isPanel) {
    var b = [].concat(comp.state.margin, comp.state.padding);
    if (b.indexOf(null) >= 0) return; // if exists auto margin or padding, ignore
  }

  var newId = 0;
  gui.comps.forEach(function (child) {
    if (!child) return;

    var sKey = getElementKey_(child);
    var childObj = sKey && currWdgt[sKey];
    childObj = childObj && childObj.component;
    if (childObj) {
      if (childObj.willResizing && !childObj.willResizing(wd, hi, pending)) return;
      if (!newId) newId = identicalId();
      childObj.setState({ parentWidth: wd, parentHeight: hi, id__: newId });
    }
  });
}
utils.propagateResizing = propagateResizing_;

function loadReactTree_(container, bTree, callback) {
  if (!W.__design__) {
    // only for __design__
    if (callback) callback();
    return;
  }

  var bRet = [],
      bStatic = [],
      dTempSet = {};
  loadReactTreeEx_(bRet, bTree, bStatic, dTempSet);

  function doCallback() {
    setTimeout(function () {
      inReactReloading_ = false; // when in loading, popup window is disabled
    }, 300);
    if (callback) callback();
  }

  if (bRet.length == 1) {
    inReactReloading_ = true;

    var bodyEle = bRet[0];
    ReactDOM.unmountComponentAtNode(container);
    container.style.visibility = 'hidden';
    container.innerHTML = '';

    setTimeout(function () {
      utils.widgetNum(0); // reset widget counter
      topmostWidget_ = null;
      justFirstRender_ = false;
      inFirstLoading_ = true;
      pendingRefers_ = [];
      W.$cachedClass = dTempSet;
      W.$staticNodes = bStatic;

      ReactDOM.render(bodyEle, container, function () {
        container.style.visibility = 'visible';

        var onLoad = W.$main.$$onLoad_;
        if (typeof onLoad == 'function') onLoad(doCallback);
      });
    }, 0);
  } else {
    if (callback) callback();
  }
}

var RE_UPCASE_ALL_ = /([A-Z])/g;

function streamReactTree_(bTree, iLevel, iOwnerFlag) {
  iLevel = iLevel || 0;
  function headSpace() {
    return new Array(iLevel + 1).join('  ');
  }

  var sName,
      dProp,
      iFlag,
      firstItem = bTree[0],
      iChildNum = 0;
  if (Array.isArray(firstItem)) {
    iChildNum = bTree.length - 1;
    sName = firstItem[0];
    dProp = firstItem[1];
    iFlag = firstItem[2];
  } else {
    sName = firstItem;
    dProp = bTree[1];
    iFlag = bTree[2];
  }
  if (typeof iFlag != 'number') iFlag = 1;

  var sHeadSpace = headSpace(),
      sRet = sHeadSpace;
  if (!sName) {
    var bHtml = dProp.html || [];
    var sTag = iOwnerFlag <= 1 ? "<div class='rewgt-static'>" : "<span class='rewgt-static'>";
    var sTail = iOwnerFlag <= 1 ? '</div>' : '</span>'; // iFlag is parent node's flag, 1 means 'childInline.'==false && rewgt-unit

    if (bHtml.length == 0) sRet = '';else if (bHtml.length == 1) {
      sRet += sTag + bHtml[0] + sTail + '\n';
    } else {
      sRet += sTag + '\n';
      bHtml.forEach(function (sItem) {
        sRet += sHeadSpace + '  ' + sItem + '\n';
      });
      sRet += sHeadSpace + sTail + '\n';
    }
    return sRet;
  }

  var isLink = false,
      isPre = false;
  if (sName == 'RefDiv') {
    isLink = true;isPre = dProp['isPre.'];iChildNum = 0; // iFlag == 2
    sRet += (isPre ? '<pre $=' : '<div $=') + JSON.stringify(dProp['$'] || '');
  } else if (sName == 'RefSpan') {
    // iFlag == 3
    isLink = true;iChildNum = 0;
    sRet += '<span $=' + JSON.stringify(dProp['$'] || '');
  } else {
    if (iFlag == 3) sRet += '<span $=' + sName;else {
      isPre = dProp['isPre.'];
      if (isPre) iChildNum = 0; // force to no children
      sRet += (isPre ? '<pre $=' : '<div $=') + sName;
    }
  }

  var sKey_ = dProp.key,
      sHtmlTxt = dProp['html.'];
  if (sKey_) sRet += " key='" + sKey_ + "'";

  Object.keys(dProp).forEach(function (sKey) {
    if (sKey == 'key' || sKey == 'html.' || sKey == '$' || sKey == 'isPre.') return;

    var value = dProp[sKey];
    if (value === undefined) return;
    if (sKey == 'style') sKey = 'sty__';

    sRet += ' ' + sKey.replace(RE_UPCASE_ALL_, '-$1').toLowerCase() + '=';
    if (typeof value == 'string' && (sKey[0] == '$' || !value || value[0] != '{' || value.slice(-1) != '}')) sRet += "'" + adjustTagAttr(value) + "'";else sRet += "'{" + adjustTagAttr(JSON.stringify(value)) + "}'";
  });

  var subRet = '';
  if (iChildNum) {
    // isPre must be false
    for (var i = 1, item; item = bTree[i]; i += 1) {
      subRet += streamReactTree_(item, iLevel + 1, iFlag);
    }

    if (iFlag == 3) {
      if (subRet.indexOf(sHeadSpace + '  ') == 0) sRet += '>' + subRet.slice(sHeadSpace.length + 2);else sRet += '>' + subRet;
    } else sRet += '>\n' + subRet;
  } else {
    sRet += '>';
    if (sHtmlTxt) {
      if (isPre) sRet += sHtmlTxt;else sRet += sHtmlTxt.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    }
  }

  if (isPre) sRet += '</pre>\n';else {
    if (iFlag == 3) {
      if (subRet && subRet.slice(-1) == '\n') // has children
        sRet += sHeadSpace + '</span>\n';else sRet += '</span>\n';
    } else {
      if (sHtmlTxt || sRet.slice(-1) != '\n') sRet += '</div>\n';else sRet += sHeadSpace + '</div>\n'; // no 'html.' and end with '\n', let it look better
    }
  }
  return sRet;

  function adjustTagAttr(s) {
    return s.replace(/&/g, "&amp;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;"); // "'
  }
}

// API for reference by path
//--------------------------
function deepFirstFindNav_(widget, groundId) {
  var compObj = widget.component;
  if (!compObj) return null;

  for (var sKey in compObj.$gui.compIdx) {
    var child = widget[sKey];
    var childObj = child && child.component;
    if (!childObj) continue;

    if (childObj.props['isNavigator.']) {
      var d = childObj.$gui.navItems;
      var ele = d && d[groundId];
      if (ele && ele.props['isPlayground.']) return child;
    } else {
      if (!childObj.props['childInline.']) {
        child = deepFirstFindNav_(child, groundId);
        if (child) return child;
      }
    }
  }

  return null;
}

function childElements_(childEle, ownerWdgt) {
  // get recent children, not same to comp.props.children
  if (!ownerWdgt) return [];

  var sKey = getElementKey_(childEle);
  var child = sKey && ownerWdgt[sKey];
  if (child) {
    var bRet = [];
    child = child.component;
    if (!child) return bRet;

    child.$gui.comps.forEach(function (item) {
      if (item) bRet.push(item);
    });
    return bRet;
  } else return children2Arr_(childEle.props.children);
};

utils.gotoHash = function (sHash, callback, wdgt) {
  // overwrite previous dummy function
  var bRetSeg = [''];
  function doCallback(meetErr) {
    var sRet = '';
    if (!meetErr) sRet = bRetSeg.join('/'); // sRet = '/seg/...'
    if (callback) callback(sRet);
  }

  var widget = wdgt || topmostWidget_;
  if (sHash) {
    if (sHash[0] == '#') sHash = sHash.slice(1).trim();else sHash = sHash.trim();
  }
  if (!sHash || !widget) return doCallback(true);

  var ch = sHash[0];
  if (ch == '!') {
    var node = null;
    try {
      var sAnchor = sHash.slice(1);
      if (sAnchor && sAnchor.indexOf('"') < 0) {
        node = document.querySelector('a[name="' + sAnchor + '"]');
        if (node) {
          bRetSeg.push(sHash); // success
          node.scrollIntoView(true); // try jump to <a name="xx">
        }
      }
    } catch (e) {}
    return doCallback(!node);
  } else if (ch != '/') {
    var pageCtrl = utils.pageCtrl;
    if (pageCtrl && pageCtrl.gotoPage) pageCtrl.gotoPage(sHash, callback); // callback('') means no jump
    else {
        if (callback) callback('');
      }
    return;
  }

  var bSeg = sHash.slice(1).split('/');
  findAndSetOneSeg(widget, bSeg.shift());

  function findAndSetOneSeg(widget, item) {
    if (!widget || !item) return doCallback(true);

    if (item[0] == '!' && bSeg.length == 0) {
      // #/.../!hash, jump to <a name="xx">
      var node = null,
          sAnchor = item.slice(1);
      if (sAnchor && sAnchor.indexOf('"') < 0) {
        try {
          node = document.querySelector('a[name="' + sAnchor + '"]');
          if (node) {
            bRetSeg.push(item); // success
            node.scrollIntoView(true);
          }
        } catch (e) {}
      }
      return doCallback(!node);
    }

    var comp,
        navWidget = deepFirstFindNav_(widget, item);
    if (!navWidget || !(comp = navWidget.component)) {
      utils.instantShow('warning: can not find navigator widget (' + bRetSeg.join('/') + '/' + item + ').');
      return doCallback(true);
    }

    comp.fireChecked(item, function () {
      if (comp.state.checkedId !== item) return doCallback(true);

      bRetSeg.push(item);
      if (bSeg.length == 0) return doCallback(false); // success finish

      findAndSetOneSeg(navWidget[item], bSeg.shift()); // continue search next segment
    });
  }
};

function pathLevelInfo_(sPath_) {
  var sPath = sPath_,
      iPos = sPath.indexOf('./'),
      ch = sPath[0],
      iLevel = 0,
      isSibling = false;
  if (iPos == 0) {
    iLevel = 1;
    sPath = sPath.slice(2);
  } else if (iPos == 1 && ch == '.') {
    iLevel = 2;
    sPath = sPath.slice(3);
    while ((iPos = sPath.indexOf('../')) == 0) {
      iLevel += 1;
      sPath = sPath.slice(3);
    }
  } else if (ch == '.') {
    iLevel = -1; // absolute
    sPath = sPath.slice(1);
  } else if (ch == '/') {
    if (sPath[1] === '/') // maybe: //   //seg  ////seg
      return [sPath.slice(2), -1, true]; // iLevel = -1, isSibling = true
    else {
        iLevel = -1; // absolute
        sPath = sPath.slice(1);
      }
  } else isSibling = true; // iLevel = 0, sPath != ''

  if (sPath.indexOf('/') >= 0) {
    utils.instantShow('error: invalid reference path (' + sPath_ + ').');
    return null;
  } else return [sPath, iLevel, isSibling];
}
creator.pathLevelInfo = pathLevelInfo_;

function getCompByPath_(entry, sPath_) {
  // entry is component object
  var b = pathLevelInfo_(sPath_);
  if (!b) return null;

  var sPath = b[0],
      iLevel = b[1],
      isSibling = b[2];
  if (isSibling) {
    var targ = entry.widget,
        owner = targ;
    if (iLevel < 0) owner = targ && targ.parent; // start with '//', maybe sPath=''
    if (owner) {
      var sHead = sPath.slice(0, 2);
      while (sHead == '//') {
        owner = owner.parent;
        if (!owner) return doCallback(null);

        sPath = sPath.slice(2);
        sHead = sPath.slice(0, 2);
      }

      return doCallback(sPath ? owner.W(sPath) : owner);
    }
  } else if (iLevel == -1) {
    // not isSibling means is absolute
    if (sPath) return doCallback(W.W(sPath));
  } else {
    // iLevel >= 1
    var targ = entry.widget;
    while (targ && iLevel > 0) {
      var comp = targ && targ.component;
      if (comp && comp.props['isNavigator.']) {
        iLevel -= 1;
        if (iLevel == 0) break;
      }

      var targ_ = targ.parent;
      if (!targ_) {
        // meet topmost
        iLevel -= 1;
        targ = W;
        break;
      } else targ = targ_;
    }

    if (targ && iLevel == 0) // targ maybe W (W.component is undefined)
      return doCallback(sPath ? targ.W(sPath) : targ);
  }

  return doCallback(null);

  function doCallback(targ) {
    targ = targ && targ.component;
    if (!targ) {
      // console.log('warning: can not find widget (' + sPath_ + ').');
      return null;
    } else return targ;
  }
}

function templateNode(ele) {
  // new templateNode(element)
  this.comps = {}; // sPath:[iType,childNode,ownerSeg]; // iType: 1:normal 2:ref 3:nav 4:template
  this.element = ele;
  this.pathSeg = ''; // ele['hookTo.'].comps[pathSeg] === this when ele['hookTo.'] is templateNode
}

function loadReference_(entry, keyName, callback) {
  // entry is linker owner component, keyName must be string, callback must passed
  var isRefSpan = false,
      bSourProp = [],
      refLnkPath = '';
  var child,
      compIdx = entry.$gui.compIdx[keyName];
  if (entry.widget && typeof compIdx == 'number' && keyName[0] == '$' && (child = entry.$gui.comps[compIdx]) && child.props['isReference.']) {
    var compProp = child.props;
    if (compProp['isReference.'] == 2) isRefSpan = true;

    refLnkPath = compProp['$'];
    if (typeof refLnkPath != 'string' || (refLnkPath = refLnkPath.trim()).length == 0) {
      if (refLnkPath !== '') // if '$' is empty, no need warning
        console.log('warning: load reference (' + keyName + ') failed: invalid path');
      callback(); // invalid entry or keyName, ignore, continue next
    } else {
      if (!refLnkPath) doCallback(null, refLnkPath);else loadCompByRef(entry, refLnkPath, ''); // entry is parent component of linker
    }
  } else {
    console.log('warning: load reference (' + keyName + ') failed.');
    callback(); // invalid entry or keyName, ignore, continue next
  }

  function loadCompByRef(entry, sPath_, sOwnerSeg) {
    // entry can be: widget or templateNode
    var b = pathLevelInfo_(sPath_);
    if (!b) return doCallback(null, sPath_);
    var sPath = b[0],
        iLevel = b[1],
        isSibling = b[2];

    var isTemplate = entry instanceof templateNode;
    if (isSibling) {
      if (isTemplate) return doCallback(null, sPath_); // not support
      // else, entry is owner component of linker

      var targ;
      if (iLevel < 0 && (targ = entry.widget)) {
        // only get from linker parent, not from linker self
        var sHead = sPath.slice(0, 2);
        while (sHead == '//') {
          targ = targ.parent;
          if (!targ) return doCallback(null, sPath_); // error

          sPath = sPath.slice(2);
          sHead = sPath.slice(0, 2);
        }

        getComponent(targ, sPath, sPath_, false);
        return;
      }
      // else, failed // iLevel >= 0 or invalid entry
    } else if (iLevel == -1) {
      // by absolute
      getComponent(null, sPath, sPath_, false);
      return;
    } else {
      var targ = entry;

      if (isTemplate) {
        targ = entry.element;
        var owner = targ.props['hookTo.'],
            change2Comp = false;
        if (!owner) {
          // when redefine in JSX, 'hookTo.' maybe not passed
          owner = targ.widget;
          owner = owner && owner.parent;
        }

        while (targ && iLevel > 0 && owner) {
          // owner must be templateNode
          if (owner instanceof templateNode) {
            if (!sOwnerSeg) {
              targ = owner.element; // continue search from owner
              sOwnerSeg = owner.pathSeg;
              owner = targ.props['hookTo.'];
              if (!owner) {
                // when redefine in JSX, 'hookTo.' maybe not passed
                owner = targ.widget;
                owner = owner && owner.parent;
              }
            } else {
              var b = owner.comps[sOwnerSeg];
              if (!b) return doCallback(null, sPath_);
              var iFlag = b[0];

              if (iFlag == 4) {
                // 4 is template, b[1] must be templateNode
                sOwnerSeg = b[2];
                if (!sOwnerSeg) {
                  targ = owner.element; // continue search from owner
                  sOwnerSeg = owner.pathSeg;
                  owner = targ.props['hookTo.'];
                  if (!owner) {
                    // when redefine in JSX, 'hookTo.' maybe not passed
                    owner = targ.widget;
                    owner = owner && owner.parent;
                  }
                }
                // else iLevel -= 1;    // no level, just point to previous, continue next owner's sOwnerSeg
              } else if (iFlag == 3) {
                // 3 is nav-element
                iLevel -= 1;
                if (iLevel == 0) {
                  // '../../' in templateNode
                  getComponent(owner, sPath, sPath_, true, sOwnerSeg); // b == owner's sOwnerSeg
                  return;
                } else sOwnerSeg = b[2]; // sOwnerSeg should be ''
              } else return doCallback(null, sPath_);
            }
          } else if (Array.isArray(owner)) {
            if (sOwnerSeg) return doCallback(null, sPath_);

            targ = owner.component;
            change2Comp = true;
            break;
          } else return doCallback(null, sPath_);
        } // end of while

        if (!targ || !owner || !change2Comp) return doCallback(null, sPath_);
      }

      targ = targ.widget;
      while (targ && iLevel > 0) {
        var comp = targ && targ.component;
        if (comp && comp.props['isNavigator.']) {
          iLevel -= 1;
          if (iLevel == 0) break;
        }

        var targ_ = targ.parent;
        if (!targ_) {
          // meet topmost
          iLevel -= 1;
          targ = W;
          break;
        } else targ = targ_;
      }
      if (targ && iLevel == 0) {
        // targ maybe W (W.component is undefined)
        getComponent(targ, sPath, sPath_, false);
        return;
      }
    }

    doCallback(null, sPath_);
  }

  function doCallback(targ, sPath_) {
    // step 1, check target obj
    if (!targ) {
      utils.instantShow('error: can not find reference (' + sPath_ + ').');
      callback(); // callback must passed 
      return;
    } // check component type matched or not

    if (isRefSpan) {
      // RefSpan
      if (!targ.props['childInline.']) utils.instantShow('warning: reference target (' + sPath_ + ') should be inline widget.');
    } else {
      // RefDiv
      if (!hasClass_(targ.props.className, ['rewgt-panel', 'rewgt-unit'])) utils.instantShow('warning: reference target (' + sPath_ + ') should be: panel, div, paragraph.');
    }

    // step 2, find 'key' position and '$key' element
    var gui = entry.$gui,
        keyid2 = keyName.slice(1),
        fromEle = null; // keyName must start with '$'
    var compIdx = gui.compIdx[keyName];
    if (typeof compIdx == 'number') {
      fromEle = gui.comps[compIdx]; // element of $key, should exists
      var iPos = gui.compIdx[keyid2];
      if (typeof iPos != 'number') {
        if (fromEle) {
          gui.compIdx[keyid2] = compIdx; // compIdx[key] = place_of_$key
          delete gui.compIdx[keyName]; // remove compIdx[$key]
          gui.removeNum += 1;
        }
      } else {
        // exist 'key' and '$key' both
        compIdx = iPos; // adjust target 'keyid' position
        gui.removeNum += 1; // replace exist component
      }
    }
    if (!fromEle) {
      utils.instantShow('error: invalid linker (' + keyName + ').');
      callback();
      return;
    }
    bSourProp.unshift(fromEle.props);

    // step 3, setup dProp
    var dProp = {},
        dStyle = {},
        styleNum = 0;
    if (targ.props.style) {
      // targ should not a linker
      Object.assign(dStyle, targ.props.style);
      styleNum += 1;
    }
    var sourProp = bSourProp.pop();
    while (sourProp) {
      var dCurr = getRefProp_(sourProp);
      if (dCurr.style) {
        Object.assign(dStyle, dCurr.style);
        styleNum += 1;
      }
      Object.assign(dProp, dCurr);
      sourProp = bSourProp.pop();
    }
    if (styleNum) dProp.style = dStyle;
    dProp['hookTo.'] = entry.widget;
    if (isRefSpan) dProp['data-span.path'] = refLnkPath;else dProp['data-unit.path'] = refLnkPath;
    var dSubStyles = fromEle.props.styles;
    if (dSubStyles) dProp.styles = dSubStyles; // only assign recent Refxx's styles
    if (W.__design__) {
      var dTmp = {};
      dProp['link.props'] = Object.assign(dTmp, getRefProp_(fromEle.props));
      if (dSubStyles) dTmp.styles = dSubStyles;
    }
    var iTmp = parseInt(keyid2);
    var keyid3 = iTmp + '' === keyid2 ? iTmp : keyid2;
    dProp.key = keyid2;
    dProp['keyid.'] = keyid3;

    // step 4, replace ref node
    gui.comps[compIdx] = reactClone_(targ, dProp); // replace link widget
    entry.setState({ id__: identicalId() }, function () {
      var subComp = entry.widget[keyid3];
      subComp = subComp && subComp.component;
      if (subComp) renewStaticChild(subComp); // reactClone_() not clone static node
      callback();
    }); // can not use reRender() since entry.isHooked can be false
  }

  function getComponent(widget, sPath, sPath_, isTemplate, sPrefix) {
    var bSeg;
    if (!widget) {
      // if !widget, isTemplate must false
      if (!sPath || isTemplate) return doCallback(null, sPath_);

      bSeg = sPath.split('.');
      if (bSeg.length <= 1) return doCallback(null, sPath_); // sPath can not be 'body', at least 'body.xx'
      widget = W[bSeg.shift()];
      if (!widget) return doCallback(null, sPath_);
    } else {
      if (!sPath) {
        if (isTemplate) // widget is templateNode
          return doCallback(widget.element, sPath_);
        // else, widget is widget

        var ownerObj = widget.parent,
            thisObj = widget.component;
        ownerObj = ownerObj && ownerObj.component;
        if (ownerObj && thisObj) {
          // for component (not template) should use full clone
          var idx = ownerObj.$gui.compIdx[thisObj.$gui.keyid];
          if (typeof idx == 'number') return doCallback(thisObj.fullClone(), sPath_);
        }
        return doCallback(null, sPath_);
      }

      bSeg = sPath.split('.');
    }

    // widget && sPath, then we find it level by level
    while (widget && bSeg.length) {
      var item = bSeg.shift();
      if (!item) return doCallback(null, sPath_);

      var wgtObj = null,
          tempNode = null,
          tempPath = '';
      if (isTemplate) {
        // widget is templateNode, W.__design__ must be false
        if (W.__design__) return doCallback(null, sPath_);
        tempNode = widget;
        if (sPrefix) {
          tempPath = sPrefix;
          bSeg.unshift(item);
        } else tempPath = item;
      } else {
        wgtObj = widget.component;
        if (!wgtObj) {
          if (widget === W) {
            widget = W[item];
            if (widget) wgtObj = widget.component;
            item = bSeg.shift();
          }
          if (!wgtObj || !item) return doCallback(null, sPath_);
        }

        // only not in design, scan from $gui.template
        if ((!W.__design__ || wgtObj.isLibGui) && wgtObj.props['isTemplate.']) {
          // shift to template (tempNode)
          tempNode = wgtObj.$gui.template;
          if (!tempNode) return doCallback(null, sPath_);
          tempPath = item;
          wgtObj = null; // must not process as widget
        }
      }

      if (tempNode) {
        var b = tempNode.comps[tempPath];
        while (b) {
          // if isKeyidTemp, must be [4,tempNode,sOwnerSeg]
          var iType = b[0],
              next = b[1];
          if (iType == 2) {
            // ref, no sub level  // [2,element,sOwnerSeg]
            if (bSeg.length != 0) break; // not found, failed

            var compProp2 = next.props;
            var isRefSpan2 = compProp2['isReference.'] == 2,
                sPath2_ = compProp2['$'];
            if (compProp2['hookTo.'] === tempNode && typeof sPath2_ == 'string') {
              sPath2_ = sPath2_.trim();
              if (!sPath2_) return doCallback(null, sPath2_);
              if (isRefSpan != isRefSpan2) utils.instantShow('warning: reference type (' + sPath_ + ') mismatch.');

              if (sPath2_[0] == '/' && sPath2_[1] == '/') {
                // try get sibling element
                if (sPath2_.indexOf('/', 2) >= 0) return doCallback(null, sPath2_);

                bSeg = tempPath.split('.');
                bSeg.pop();
                tempPath = bSeg.join('.'); // parent_path = parentPath(this_ref_node), maybe ''

                bSeg = sPath2_.slice(2).split('.');
                if (tempPath) tempPath += '.';
                tempPath += bSeg.shift();
                b = tempNode.comps[tempPath]; // tempNode not changed  // if !b, will failed
                bSourProp.push(compProp2);
                continue;
              }

              bSourProp.push(compProp2);
              loadCompByRef(tempNode, sPath2_, b[2]); // owner must be templateNode or template-component
              return; // try load by RefDiv or RefSpan
            } else break; // failed
          } else {
            if (iType == 4) {
              // template: [4,tempNode,sOwnerSeg]
              tempNode = next;
              next = tempNode.element;
            }
            if (bSeg.length == 0) return doCallback(next, sPath_); // next maybe template element

            if (iType == 4) // template
              tempPath = bSeg.shift();else {
              // 1:normal 3:nav     // [iType,element,sOwnerSeg]
              tempPath += '.' + bSeg.shift();
            }
            b = tempNode.comps[tempPath]; // continue next loop
          }
        }

        return doCallback(null, sPath_); // must exit loop
      } else {
        // not template
        // assert(widget && wgtObj && !isTemplate);

        if (bSeg.length == 0) {
          // is last one
          var idx = wgtObj.$gui.compIdx[item];
          if (typeof idx == 'number') {
            var childObj = widget[item];
            childObj = childObj && childObj.component;
            if (childObj) return doCallback(childObj.fullClone(), sPath_);else return doCallback(null, sPath_);
          } else {
            idx = wgtObj.$gui.compIdx['$' + item];
            if (typeof idx == 'number') {
              var next = wgtObj.$gui.comps[idx];
              if (next && next.props['isReference.']) {
                // ref node under widget
                var compProp2 = next.props,
                    isRefSpan2 = compProp2['isReference.'] == 2;
                var sPath2_ = compProp2['$'];
                if (typeof sPath2_ == 'string') {
                  sPath2_ = sPath2_.trim();
                  if (!sPath2_) return doCallback(null, sPath2_);
                  if (isRefSpan != isRefSpan2) utils.instantShow('warning: reference type (' + sPath_ + ') mismatch.');

                  bSourProp.push(compProp2);
                  loadCompByRef(wgtObj, sPath2_, '');
                  return; // try load by RefDiv or RefSpan
                }
              }
            }
            return doCallback(null, sPath_);
          }
        } else {
          widget = widget[item]; // not last segment, must not ref node
        }
      }
    }

    doCallback(null, sPath_);
  }
}

function pageCtrl_(bPage) {
  var pageIndex = this.pageIndex = 0;
  var keys = this.keys = []; // array of string
  var namedPage = this.namedPage = {};

  bPage.forEach(function (item, idx) {
    keys.push(item[0] + '');

    var page = item[1];
    var sShow = idx == pageIndex ? 'block' : 'none';
    if (page.state.style.display !== sShow) page.duals.style = { display: sShow };

    var sName = page.props.name;
    if (sName && typeof sName == 'string') namedPage[sName] = idx;
  });

  var wd = window.innerWidth,
      wd2 = Math.max(Math.floor(wd / 20), 20);
  var leftPanel = document.createElement('div');
  leftPanel.setAttribute('style', 'position:absolute; left:0px; top:0px; width:' + wd2 + 'px; height:100%; background-color:#000; opacity:0; z-index:3000;');
  document.body.appendChild(leftPanel);
  var rightPanel = document.createElement('div');
  rightPanel.setAttribute('style', 'position:absolute; right:0px; top:0px; width:' + wd2 + 'px; height:100%; background-color:#000; opacity:0; z-index:3000;');
  document.body.appendChild(rightPanel);

  this.leftPanel = leftPanel;
  this.rightPanel = rightPanel;

  var self = this;
  leftPanel.onclick = function (event) {
    self.prevPage();
  };
  rightPanel.onclick = function (event) {
    self.nextPage();
  };
  leftPanel.onmouseover = mouseover;
  leftPanel.onmouseout = mouseout;
  rightPanel.onmouseover = mouseover;
  rightPanel.onmouseout = mouseout;

  function mouseover(event) {
    event.target.style.opacity = '0.1';
  }
  function mouseout(event) {
    event.target.style.opacity = '0';
  }
}

pageCtrl_.prototype = {
  gotoPage_: function gotoPage_(keys, pgIndex) {
    var sFirstSeg = '',
        jumpedWdgt = null;
    keys.forEach(function (sKey, idx) {
      var wdgt = topmostWidget_ && topmostWidget_[sKey];
      var comp = wdgt && wdgt.component;
      if (comp) {
        var sCss = 'none';
        if (idx == pgIndex) {
          sCss = 'block';
          sFirstSeg = sKey;
          jumpedWdgt = wdgt;
        }
        if (comp.state.style.display != sCss) comp.duals.style = { display: sCss };
      }
    });
    if (jumpedWdgt) this.pageIndex = pgIndex; // modify when it real shift
    return [sFirstSeg, jumpedWdgt];
  },

  gotoPage: function gotoPage(pgIndex, callback) {
    if (!this.keys.length) {
      if (callback) callback('');
      return;
    }

    var sFirstSeg = '',
        sLeftSeg = '',
        jumpedWdgt = null;
    function doCallback() {
      if (sFirstSeg && sLeftSeg && jumpedWdgt) {
        utils.gotoHash(sLeftSeg, function (sRet) {
          if (callback) callback(sRet ? sFirstSeg + sRet : '');
        }, jumpedWdgt);
      } else {
        if (callback) callback(sFirstSeg + sLeftSeg);
      }
    }

    var tp = typeof pgIndex === 'undefined' ? 'undefined' : _typeof(pgIndex);
    if (tp == 'string' && pgIndex) {
      if (pgIndex[0] == '#') pgIndex = pgIndex.slice(1);
      var iPos = pgIndex.indexOf('/');
      if (iPos > 0) {
        sLeftSeg = pgIndex.slice(iPos);
        pgIndex = pgIndex.slice(0, iPos);
      }

      var iTmp = parseInt(pgIndex);
      if (iTmp + '' == pgIndex) {
        pgIndex = iTmp;
        tp = 'number';
      }
    }

    if (tp == 'string' && pgIndex) {
      var idx = this.namedPage[pgIndex];
      if (typeof idx == 'number') pgIndex = idx;else {
        sLeftSeg = '';
        return doCallback(); // invalid
      }
    } else if (tp != 'number') {
      sLeftSeg = '';
      return doCallback(); // invalid
    }
    // pgIndex is number by now

    var iLen = this.keys.length;
    if (!iLen) return doCallback(); // invalid
    if (pgIndex >= iLen) pgIndex = iLen - 1;
    if (pgIndex < 0) pgIndex = 0;

    var b = this.gotoPage_(this.keys, pgIndex);
    sFirstSeg = b[0];jumpedWdgt = b[1];
    if (!jumpedWdgt) sLeftSeg = ''; // failed, sFirstSeg must be ''
    doCallback();
  },

  prevPage: function prevPage() {
    return this.gotoPage(this.pageIndex - 1);
  },

  nextPage: function nextPage() {
    return this.gotoPage(this.pageIndex + 1);
  },

  renewPages: function renewPages(bNew) {
    // bNew=[[sKey,comp],...]
    var bKey = [],
        dName = {};
    bNew.forEach(function (item) {
      var sKey = item[0];
      if (parseInt(sKey) + '' !== sKey) dName[sKey] = bKey.length;
      bKey.push(sKey);
    });

    var sCurr = this.keys[this.pageIndex],
        noShift = true;
    if (typeof sCurr == 'string') {
      var iPos = bKey.indexOf(sCurr);
      if (iPos >= 0) {
        this.pageIndex = iPos;
        noShift = true;
      }
    }
    this.keys = bKey;
    this.namedPage = dName;

    if (!noShift) {
      if (bKey.length) this.gotoPage(0);else this.pageIndex = 0; // no jump
    }
  },

  setDisplay: function setDisplay(cfg) {
    if (hasOwn_.call(cfg, 'leftCtrlWidth')) this.leftPanel.style.width = getPxWidth(cfg.leftCtrlWidth) + 'px';
    if (hasOwn_.call(cfg, 'rightCtrlWidth')) this.rightPanel.style.width = getPxWidth(cfg.rightCtrlWidth) + 'px';

    function getPxWidth(i) {
      var i = Math.max(i || 0, 0);
      if (i < 0.9999) i = i * window.innerWidth;else if (i < 1) i = window.innerWidth;
      return i;
    }
  },

  destory: function destory() {
    if (this.leftPanel) {
      this.leftPanel.parentNode.removeChild(this.leftPanel);
      this.leftPanel = null;
    }
    if (this.rightPanel) {
      this.rightPanel.parentNode.removeChild(this.rightPanel);
      this.rightPanel = null;
    }
  }
};

creator.pageCtrl_ = pageCtrl_;

function listScenePage_() {
  var bPage = [],
      topObj = topmostWidget_ && topmostWidget_.component;
  if (topObj) {
    (topObj.$gui.comps || []).forEach(function (child) {
      if (!child) return;
      var sKey = getElementKey_(child),
          childObj = sKey && topmostWidget_[sKey];
      childObj = childObj && childObj.component;
      if (childObj && childObj.props['isScenePage.']) {
        if (W.__design__ || !childObj.props.noShow) // if !W.__design__ && noShow, no including
          bPage.push([sKey, childObj]);
      }
    });
  }
  return bPage;
}

W.$main.$$onLoad_ = function (designCallback) {
  function processRef(callback) {
    var item = pendingRefers_.shift();
    if (item) {
      var obj = item[0],
          keyid = item[1];
      loadReference_(obj, keyid, function () {
        processRef(callback);
      });
    } else callback();
  }

  function processOneInit() {
    var fn = onLoading.shift();
    if (fn) fn(processOneInit);else {
      processRef(function () {
        justFirstRender_ = false;
        inFirstLoading_ = false; // has load pending RefDiv/RefSpan

        // set default PageController // all pendingRefers_ has set by now
        if (!W.__design__ && containNode_ && !utils.pageCtrl) {
          var bPage = listScenePage_();
          if (bPage.length) // has ScenePage, need setup PageController
            utils.pageCtrl = new pageCtrl_(bPage);
        }

        // fire W.$main.$onload
        setTimeout(function () {
          // process post-loading in next event-loop
          if (W.__design__) {
            W.$main.$onLoad = [];
            W.$main.inRunning = true;
            if (designCallback) designCallback();
          } else {
            var fn,
                onReady = W.$main.$onReady;
            if (Array.isArray(onReady)) {
              while (fn = onReady.shift()) {
                fn();
              }
            } else if (typeof onReady == 'function') onReady();

            var onLoad = W.$main.$onLoad;
            if (Array.isArray(onLoad)) {
              while (fn = onLoad.shift()) {
                fn();
              }
            }
            W.$main.inRunning = true;

            var sHash = window.location.hash;
            if (sHash) {
              setTimeout(function () {
                utils.gotoHash(sHash); // no callback, let main.$onLoad run first
              }, 300);
            }
          }
        }, 0);
      });
    }
  }

  justFirstRender_ = true;
  var onLoading = W.$main.$$onLoading = (W.$main.$$onLoad || []).slice(0);
  processOneInit();
};

var supportedEvent_ = _defineProperty({ onCopy: true, onCut: true, onPaste: true,
  onCompositionEnd: true, onCompositionStart: true, onCompositionUpdate: true,
  onKeyDown: true, onKeyPress: true, onKeyUp: true,
  onFocus: true, onBlur: true,
  onChange: true, onInput: true, onSubmit: true,

  onClick: true, onContextMenu: true, onDoubleClick: true,
  onDrag: true, onDragEnd: true, onDragEnter: true, onDragExit: true,
  onDragLeave: true, onDragOver: true, onDragStart: true, onDrop: true,
  onMouseDown: true, onMouseEnter: true, onMouseLeave: true, onMouseMove: true,
  onMouseOut: true, onMouseOver: true, onMouseUp: true,

  onSelect: true,
  onTouchCancel: true, onTouchEnd: true, onTouchMove: true, onTouchStart: true,
  onScroll: true,
  onWheel: true,

  onAbort: true, onCanPlay: true, onCanPlayThrough: true,
  onDurationChange: true, onEmptied: true, onEncrypted: true, onEnded: true,
  onError: true, onLoadedData: true, onLoadedMetadata: true, onLoadStart: true,
  onPause: true, onPlay: true, onPlaying: true, onProgress: true, onRateChange: true,
  onSeeked: true, onSeeking: true, onStalled: true, onSuspend: true,
  onTimeUpdate: true, onVolumeChange: true, onWaiting: true,

  onLoad: true }, 'onError', true);

// 1 for standard attributes, 2 for RDFa, 3 for addition non-standard, 4 for react extending
var supportedAttr_ = { // 5 reserved for special precessing
  accept: 1, acceptCharset: 1, accessKey: 1, action: 1, allowFullScreen: 1,
  allowTransparency: 1, alt: 1, async: 1, autoComplete: 1, autoFocus: 1,
  autoPlay: 1, capture: 1, cellPadding: 1, cellSpacing: 1, challenge: 1,
  charSet: 1, checked: 1, cite: 1, classID: 1, colSpan: 1, cols: 1, content: 1, // no className
  contentEditable: 1, contextMenu: 1, controls: 1, coords: 1, crossOrigin: 1,
  data: 1, dateTime: 1, 'default': 1, defer: 1, dir: 1, disabled: 1,
  download: 1, draggable: 1, encType: 1, form: 1, formAction: 1, formEncType: 1,
  formMethod: 1, formNoValidate: 1, formTarget: 1, frameBorder: 1, headers: 1,
  hidden: 1, high: 1, href: 1, hrefLang: 1, htmlFor: 1, httpEquiv: 1, icon: 1, // no height
  id: 1, inputMode: 1, integrity: 1, 'is': 1, keyParams: 1, keyType: 1, kind: 1,
  label: 1, lang: 1, list: 1, loop: 1, low: 1, manifest: 1, marginHeight: 1,
  marginWidth: 1, max: 1, maxLength: 1, media: 1, mediaGroup: 1, method: 1,
  min: 1, minLength: 1, multiple: 1, muted: 1, name: 1, noValidate: 1,
  nonce: 1, open: 1, optimum: 1, pattern: 1, placeholder: 1, poster: 1,
  preload: 1, profile: 1, radioGroup: 1, readOnly: 1, rel: 1, required: 1,
  reversed: 1, role: 1, rowSpan: 1, rows: 1, sandbox: 1, scope: 1, scoped: 1,
  scrolling: 1, seamless: 1, selected: 1, shape: 1, size: 1, sizes: 1, span: 1,
  spellCheck: 1, src: 1, srcDoc: 1, srcLang: 1, srcSet: 1, start: 1, step: 1, summary: 1, // no style
  tabIndex: 1, target: 1, title: 1, type: 1, useMap: 1, value: 1, wmode: 1, wrap: 1, // no width

  about: 2, datatype: 2, inlist: 2, prefix: 2, property: 2, resource: 2, 'typeof': 2, vocab: 2,

  autoCapitalize: 3, autoCorrect: 3, color: 3, itemProp: 3, itemScope: 3, itemType: 3,
  itemRef: 3, itemID: 3, security: 3, unselectable: 3, results: 3, autoSave: 3,

  dangerouslySetInnerHTML: 4,

  className: 5, style: 5, width: 5, height: 5
};

function parseWidth_(b) {
  if (!Array.isArray(b)) {
    if (typeof b == 'number') return [b, b, b, b];else return [0, 0, 0, 0];
  }

  var iLen = b.length;
  if (iLen == 0) return [0, 0, 0, 0];else if (iLen == 1) {
    var i = parseFloat(b[0]) || 0;
    return [i, i, i, i];
  } else if (iLen == 2) {
    var i = parseFloat(b[0]) || 0,
        i2 = parseFloat(b[1]) || 0;
    return [i, i2, i, i2];
  } else if (iLen == 3) {
    var i = parseFloat(b[0]) || 0,
        i2 = parseFloat(b[1]) || 0,
        i3 = parseFloat(b[2]) || 0;
    return [i, i2, i3, i2];
  } else {
    var i = parseFloat(b[0]) || 0,
        i2 = parseFloat(b[1]) || 0;
    var i3 = parseFloat(b[2]) || 0,
        i4 = parseFloat(b[3]) || 0;
    return [i, i2, i3, i4];
  }
}

function parseWidth2_(b) {
  if (!Array.isArray(b)) {
    if (typeof b == 'number') return [b, b, b, b];else {
      if (b === null) return [null, null, null, null];else return [0, 0, 0, 0];
    }
  }

  var iLen = b.length;
  if (iLen == 0) return [0, 0, 0, 0];else if (iLen == 1) {
    var i = b[0];
    i = i === null ? null : parseFloat(i) || 0;
    return [i, i, i, i];
  } else if (iLen == 2) {
    var i = b[0],
        i2 = b[1];
    i = i === null ? null : parseFloat(i) || 0;
    i2 = i2 === null ? null : parseFloat(i2) || 0;
    return [i, i2, i, i2];
  } else if (iLen == 3) {
    var i = b[0],
        i2 = b[1],
        i3 = b[2];
    i = i === null ? null : parseFloat(i) || 0;
    i2 = i2 === null ? null : parseFloat(i2) || 0;
    i3 = i3 === null ? null : parseFloat(i3) || 0;
    return [i, i2, i3, i2];
  } else {
    var i = b[0],
        i2 = b[1],
        i3 = b[2],
        i4 = b[3];
    i = i === null ? null : parseFloat(i) || 0;
    i2 = i2 === null ? null : parseFloat(i2) || 0;
    i3 = i3 === null ? null : parseFloat(i3) || 0;
    i4 = i4 === null ? null : parseFloat(i4) || 0;
    return [i, i2, i3, i4];
  }
}

function getSparedPixel_(obj, wdgt, isRow, iTotal) {
  // iTotal is cssWidth or cssHeight
  if (typeof iTotal != 'number') return null;

  var bColumn,
      cellSpace,
      iRet = iTotal,
      gui = obj.$gui;
  if (obj.state) {
    bColumn = obj.state.sizes;
    cellSpace = parseFloat(obj.state.cellSpacing) || 0;
  } else {
    bColumn = obj.props.sizes;
    cellSpace = parseFloat(obj.props.cellSpacing) || 0;
  }

  // next process sizes-column
  if (Array.isArray(bColumn)) {
    var iLen = bColumn.length;
    for (var i = 0; i < iLen; i++) {
      var wd = bColumn[i];
      if (typeof wd == 'number') {
        if (wd >= 0) {
          if (wd >= 1) iRet -= wd;else if (wd >= 0.9999) iRet -= iTotal;else iRet -= wd * iTotal;
        } // else, ignore negative percent
      } else return null; // if not number take as auto
    }

    iRet -= cellSpace * iLen;
    if (iRet < 0) return null; // auto
    else return iRet;
  }

  // next process one line array
  var b = gui.comps,
      iLen = b.length;
  for (var i = 0; i < iLen; i++) {
    var child = b[i];
    if (!child || child.props['isReference.']) continue;

    var sKey = getElementKey_(child);
    var mrg,
        wd,
        childObj = sKey && wdgt[sKey];
    childObj = childObj && childObj.component;
    if (childObj && childObj.state) {
      // has mounted
      mrg = childObj.state.margin || [];
      wd = isRow ? childObj.state.width : childObj.state.height;
    } else {
      mrg = parseWidth_(child.props.margin);
      wd = isRow ? child.props.width : child.props.height;
    }

    if (typeof wd == 'number') {
      if (wd >= 0) {
        if (wd >= 1) iRet -= wd;else if (wd >= 0.9999) iRet -= iTotal;else iRet -= wd * iTotal;
      } // else, ignore negative percent
      iRet -= isRow ? (mrg[1] || 0) + (mrg[3] || 0) : (mrg[0] || 0) + (mrg[2] || 0);
    } else return null; // not number, it should be undefined (100%) or 'auto'
  }

  // iRet -= cellSpace * (1 + iLen);  // only GridPanel using cellSpace
  if (iRet <= 0) return null; // if no enough space, take as 'auto'
  else return iRet;
}

// define APIs for containNode_, for GUI design
//--------------------------------------------
function setupContainerApi_(containNode_) {
  containNode_.popDesigner = popDesigner_;
  containNode_.saveDesigner = saveDesigner_;
  containNode_.dumpTree = dumpReactTree_;
  containNode_.loadTree = loadReactTree_;
  containNode_.streamTree = streamReactTree_;
  containNode_.listScenePage = listScenePage_;

  containNode_.keyOfNode = function (node) {
    return keyOfNode_(node);
  };
  containNode_.splitterMouseDn = function () {
    return splitterMouseDn_;
  };
}

function renewStaticChild(compObj, isForce) {
  var node = compObj.getHtmlNode();
  if (!node) return;

  var bScan = [],
      nodes = node.querySelectorAll('.rewgt-static');
  for (var i = 0, item; item = nodes[i]; i++) {
    var tmp = item.parentNode,
        canRenew = false;
    while (tmp) {
      if (tmp === document) break;
      if (tmp === node) {
        canRenew = true;
        break;
      }
      if (tmp.classList.contains('rewgt-static')) // only focus one rewgt-static level
        break;
      tmp = tmp.parentNode;
    }
    if (canRenew) {
      var sName = item.getAttribute('name') || undefined,
          idx = sName && parseInt(sName);
      if (!isNaN(idx)) {
        if (item.children.length > 0) {
          if (isForce && idx >= 0x100000) // only local static can force reset
            item.innerHTML = '';else continue; // already added, ignore
        }
        bScan.push([idx, sName, item]);
      }
    }
  }

  for (var i = 0, item; item = bScan[i]; i++) {
    var bList,
        idx = item[0],
        sName = item[1],
        node2 = item[2];
    var fromLocal = idx >= 0x100000;

    if (fromLocal) {
      // from local
      var d = compObj.$gui.statics;
      bList = d && d[sName];
    } else bList = W.$staticNodes[idx];

    if (Array.isArray(bList)) {
      for (var i2 = 0, item2; item2 = bList[i2]; i2++) {
        // if from global, add by clone and keep $staticNodes for dumping element under $for
        node2.appendChild(fromLocal ? item2 : item2.cloneNode(true));
      }
    }
  }
}

function renewWidgetSpared_(comp, isForce, callback) {
  function doCallback() {
    if (callback) callback();
  }

  var currWgt = comp.widget;
  if (!currWgt) return doCallback(); // ignore if unmount

  var changed = false,
      gui = comp.$gui,
      cssWd = gui.cssWidth,
      cssHi = gui.cssHeight;
  var useSparedX = gui.useSparedX;
  if (useSparedX) {
    var iWd = getSparedPixel_(comp, currWgt, true, cssWd); // cssWd maybe null
    if (gui.sparedX !== iWd) {
      gui.sparedX = iWd;
      if (typeof iWd == 'number') changed = true;
    } else if (isForce) changed = true;
  } else if (gui.useSparedY) {
    var iHi = getSparedPixel_(comp, currWgt, false, cssHi); // cssHi maybe null
    if (gui.sparedY !== iHi) {
      gui.sparedY = iHi;
      if (typeof iHi == 'number') changed = true;
    } else if (isForce) changed = true;
  }
  if (!changed) return doCallback();
  if (typeof cssWd != 'number' && typeof cssHi != 'number') return doCallback(); // width, height both auto, ignore 

  var bResize = [];
  gui.comps.forEach(function (item) {
    if (!item) return; // item can be undefined
    var attr = getElementKey_(item);
    if (attr) {
      var child = currWgt[attr];
      child = child && child.component;
      if (child) {
        var iSize = useSparedX ? child.state.width : child.state.height;
        if (typeof iSize == 'number' && iSize < 0) bResize.push(child);
      }
    }
  });

  if (bResize.length) {
    setTimeout(function () {
      // refresh children in next tick
      var inPending = utils.dragInfo.inDragging;
      bResize.forEach(function (child) {
        if (child.willResizing && !child.willResizing(cssWd, cssHi, inPending)) return; // cssWd or cssHi maybe not a number
        child.setState({ parentWidth: cssWd, parentHeight: cssHi, id__: identicalId() });
      });
    }, 0);
  }
  doCallback(); // run callback in current tick
}
creator.renewWidgetSpared = renewWidgetSpared_;

function triggerExprFn_(value, oldValue) {
  // will auto bind this
  var isOK = false;
  if (value) {
    var tp = typeof value === 'undefined' ? 'undefined' : _typeof(value);
    if (tp == 'string') {
      value = [value];
      isOK = true;
    } else if (tp == 'object') {
      if (Array.isArray(value)) {
        var modifier;
        if (typeof value[0] == 'string' && _typeof(modifier = value[1]) == 'object') {
          if (typeof modifier.$trigger != 'string') // value is [sPath,modifier]
            value = [value];
          // else, value is action array, not copy by value.slice(0)
        }
        // else, value is action array
        isOK = true;
      } else if (typeof value.$trigger == 'string') {
        value = [value]; // newOpt for pop window
        isOK = true;
      }
    }
  }
  if (!isOK) throw new Error('invalid trigger data (key=' + this.$gui.keyid + ')');

  this.state.trigger = value; // default not fire action
}

function getOnlyChild_(self) {
  var gui = self.$gui;
  if (gui.isPanel) {
    console.log('warning: panel not support virtual widget');
    return null;
  }

  var comps = gui.comps,
      iLen = comps.length;
  var sKey = gui.keyid + '',
      sOwner = self.props['data-rewgt-owner'];
  if (sOwner) sKey = sOwner + '.' + sKey;

  for (var i = 0; i < iLen; i++) {
    var item = comps[i];
    if (item) return reactClone_(item, { 'data-rewgt-owner': sKey });
  }
  return null;
}

function wrapCompEvt_(comp, sEvName, ownerKey) {
  var evName = '$' + sEvName,
      oldFn = comp[evName];

  var retFn = function retFn() {
    if (typeof oldFn == 'function') oldFn.apply(comp, arguments);

    if (ownerKey && comp.$gui.eventset2[sEvName]) {
      var wdgt = comp.widget,
          wdgt2 = wdgt && wdgt.parent,
          comp2 = wdgt2 && wdgt2.component;
      if (comp2) {
        var fn2 = comp2.$gui.eventset[sEvName];
        if (fn2) fn2.apply(comp2, arguments);
      }
    }
  };

  if (ownerKey) comp[evName] = retFn; // if not join parent's event, no need assign comp[evName]
  return retFn;
}

function middleClone_(insEle, bChild) {
  // insEle must not be null // return null/ele/[ele,...]
  var children,
      thisEle = null;
  if (Array.isArray(insEle)) children = insEle;else {
    thisEle = insEle;
    children = thisEle.props.children;
    if (!children) return reactClone_.apply(undefined, [thisEle, {}].concat(_toConsumableArray(bChild)));
    children = children2Arr_(children);
  }

  var lastEle,
      iLast = children.length - 1;
  if (iLast >= 0 && reactIsValid_(lastEle = children[iLast])) {
    if (iLast >= 1 && getElementKey_(lastEle) !== 'foo') {
      // try clone bChild in elementOf(key='foo')
      var iLoop = iLast - 1;
      while (iLoop >= 0) {
        var tmp = children[iLoop];
        if (reactIsValid_(tmp) && getElementKey_(tmp) === 'foo') {
          var b2 = children.slice(0, iLoop),
              newClone = middleClone_(tmp, bChild);
          if (newClone) b2.push(newClone);
          for (var ii = iLoop + 1; ii <= iLast; ii++) {
            b2.push(children[ii]);
          }

          if (!thisEle) return b2; // return array of element
          else {
              b2.unshift(thisEle, {});
              return reactClone_.apply(null, b2); // return one element
            }
        } else iLoop -= 1;
      }
    }

    var b = children.slice(0, -1);
    var newClone = middleClone_(lastEle, bChild); // always choose last child to append
    if (newClone) b.push(newClone);

    if (!thisEle) return b;else {
      b.unshift(thisEle, {});
      return reactClone_.apply(null, b);
    }
  }

  return thisEle ? reactClone_.apply(undefined, [thisEle, {}].concat(_toConsumableArray(bChild))) : null;
}

function bindable_(func) {
  return func.hasOwnProperty('prototype');
}

var _hyphenPattern = /-(.)/g;

var direct_list_ = ['Top', 'Right', 'Bottom', 'Left'];

var TWidget_ = function () {
  function TWidget_(name, desc) {
    _classCallCheck(this, TWidget_);

    this._className = name;
    this._classDesc = desc || '';

    this._statedProp = ['width', 'height', 'left', 'top'];
    this._silentProp = ['className', 'hookTo.', 'keyid.', 'childInline.', 'tagName.'];
    this._defaultProp = { width: 0.9999, height: 0.9999, left: 0, top: 0 };
    this._htmlText = false; // not use 'html.'
    this._docUrl = 'doc'; // locate to: doc/{this._className}.html
  }

  _createClass2(TWidget_, [{
    key: '_desc',
    value: function _desc() {
      if (this._classDesc) return '<' + this._className + ':' + this._classDesc + '>';else return '<' + this._className + '>';
    }

    //_getClasses() {
    //  var bRet = [];
    //  var cls = this.constructor;
    //  while (cls) {
    //    bRet.push(cls.name);
    //    cls = Object.getPrototypeOf(cls);
    //    if (cls === Object.__proto__) break;
    //  }
    //  return bRet;
    //}

  }, {
    key: '_extend',
    value: function _extend(defs) {
      if (typeof defs == 'string') {
        if (W.__design__) // define nothing when in design and called by template._extend(sPath)
          return null;
        defs = W.$main[defs];
        if (!defs) console.log("warning: _extend('" + defs + "') load nothing!");
      } // first, get shadow definition

      var savedMethod = this._methods;
      if (!savedMethod) {
        var sKey,
            dEvent = {},
            dSysEvent = {};
        savedMethod = this._methods = { $eventset: [dEvent, dSysEvent] };

        var dItem = {}; // not use Object.getOwnPropertyNames(this), babel take methods not-enumerable
        var proto = Object.getPrototypeOf(this);
        while (proto) {
          var owner = Object.getPrototypeOf(proto);
          if (!owner) break; // ignore topmost level's prototype
          Object.getOwnPropertyNames(proto).forEach(function (item) {
            if (item[0] != '_') dItem[item] = true;
          });
          proto = owner;
        }

        for (sKey in dItem) {
          if (sKey != 'constructor') {
            var item = this[sKey];
            if (typeof item == 'function') {
              var ch = sKey[0];
              if (ch == '$') {
                var sysEvent = false;
                var evName = sKey[1] == '$' ? (sysEvent = true, sKey.slice(2)) : sKey.slice(1);
                if (supportedEvent_[evName]) {
                  if (sysEvent) dSysEvent[evName] = true;else dEvent[evName] = true;
                }
              }
              savedMethod[sKey] = item;
            }
          }
        }

        savedMethod.getShadowTemplate = function (template) {
          return function () {
            return template;
          };
        }(this);
      }

      var ret = Object.assign({}, savedMethod),
          bTmp = ret.$eventset;
      var dEvent = Object.assign({}, bTmp[0]),
          dSysEvent = Object.assign({}, bTmp[1]);
      ret.$eventset = [dEvent, dSysEvent, this._className];

      // then, extend customized definition
      if (!defs) defs = {};
      var b = Object.keys(defs);
      for (var i = 0, sKey; sKey = b[i]; i++) {
        // not heavy since defs.xxx not so many
        var newOne = defs[sKey];
        if (sKey[0] == '$' && typeof newOne == 'function') {
          var sysEvent = false;
          var evName = sKey[1] == '$' ? (sysEvent = true, sKey.slice(2)) : sKey.slice(1);
          if (supportedEvent_[evName]) {
            if (sysEvent) dSysEvent[evName] = true;else dEvent[evName] = true;
          }
        }
        var oldOne = ret[sKey];
        if (typeof oldOne == 'function' && sKey[0] != '_') {
          ret['_' + sKey] = function (fn) {
            // change to: _xxx(obj, ...)
            return function (obj) {
              for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              return fn.apply(obj, args);
            };
          }(oldOne);
        }
        ret[sKey] = newOne;
      }

      return ret;
    }
  }, {
    key: '_createClass',
    value: function _createClass(defs) {
      if (defs === null) {
        var temp = getTemplate_(this._className);
        if (!temp) console.log('fatal error: invalid WTC (' + this._className + ')');
        return temp;
      }
      return createClass_(this._extend(defs));
    }
  }, {
    key: '_getGroupOpt',
    value: function _getGroupOpt(self) {
      return { type: 'mono', // mono, extend
        editable: 'all', // all, some, none
        baseUrl: creator.appBase(),
        tools: []
      };
    }
  }, {
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var sPerPixel = '[any]: null for auto, 0~1 for percent, 0.9999 for 100%, N pixels';
      var sPerPixel2 = '[number]: N pixels';
      var sPerPixel3 = '[any]: N pixels, [top_bottom,right_left], [top,right,bottom,left]';

      var owner,
          dRet = { key: [-1, 'string'], // -1 means at top
        left: [iLevel + 1, 'any', null, sPerPixel],
        top: [iLevel + 2, 'any', null, sPerPixel],
        width: [iLevel + 3, 'any', null, sPerPixel],
        height: [iLevel + 4, 'any', null, sPerPixel],
        minWidth: [iLevel + 5, 'number', null, sPerPixel2],
        maxWidth: [iLevel + 6, 'number', null, sPerPixel2],
        minHeight: [iLevel + 7, 'number', null, sPerPixel2],
        maxHeight: [iLevel + 8, 'number', null, sPerPixel2],
        borderWidth: [iLevel + 9, 'any', null, sPerPixel3],
        padding: [iLevel + 10, 'any', null, sPerPixel3],
        margin: [iLevel + 11, 'any', null, sPerPixel3]
      };

      if (self && (owner = self.parentOf(true)) && owner.props['isTableRow.']) dRet.tdStyle = [iLevel + 12, 'object', null, '[object]: style for parent (td)'];
      return dRet;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      // warning: this._ not ready yet
      return {
        width: 0.9999, // means 100%
        height: 0.9999,
        // left: 0, top: 0,
        // minWidth: 0,  maxWidth: 0,  // means not use
        // minHeight: 0, maxHeight: 0,
        // borderWidth: [0,0,0,0],     // top,right,bottom,left
        // padding: [0,0,0,0],
        // margin: [0,0,0,0],
        'childInline.': false,
        'tagName.': 'div'
      };
    }
  }, {
    key: 'defineDual',
    value: function defineDual(attr, setFn, initVal, base) {
      if (Array.isArray(attr)) {
        var i,
            iLen = attr.length;
        for (i = 0; i < iLen; i++) {
          var sAttr = attr[i];
          if (sAttr && typeof sAttr == 'string') this.defineDual(sAttr, setFn, initVal, base);
        }
        return this;
      }

      var duals = this.duals,
          gui = this.$gui;
      if (gui && gui.compState >= 2) {
        console.log('error: can not define duals.' + attr + ' after first render');
        return this;
      }
      if (!duals || !gui) return this; // fatal error

      if (initVal !== undefined) gui.initDuals0.push([attr, initVal]);

      var bFn,
          oldDesc = Object.getOwnPropertyDescriptor(duals, attr),
          warnBase = false;
      if (!oldDesc) {
        if (setFn) bFn = dualFuncOfGetSet_(this, attr, null, setFn.bind(this), base);else {
          if (base) warnBase = true;
          bFn = dualFuncOfGetSet_(this, attr, null);
        }
        Object.defineProperty(duals, attr, { enumerable: true, configurable: true,
          get: bFn[0], set: bFn[1]
        });

        var iFlag = supportedAttr_[attr];
        if (iFlag && iFlag != 5) // 5: className/style/width/height
          gui.tagAttrs.push(attr);
      } else {
        // oldDesc.set must defined
        if (setFn) {
          // need embed setFn to oldDesc, but no duplicate trigger listen
          bFn = dualFuncOfGetSet_(this, attr, oldDesc.set, setFn.bind(this), base);
          Object.defineProperty(duals, attr, { enumerable: true, configurable: true,
            get: oldDesc.get, set: bFn[1]
          });
        } else {
          // just reuse oldDesc
          if (base) warnBase = true;
        }
      }

      if (warnBase) console.log('warning: base.setter should use with setter.');
      return this; // can write as: this.defineDual(attr1).defineDual(attr2)
    }
  }, {
    key: 'undefineDual',
    value: function undefineDual(attr) {
      if (Array.isArray(attr)) {
        var i,
            iLen = attr.length;
        for (i = 0; i < iLen; i++) {
          var sAttr = attr[i];
          if (sAttr && typeof sAttr == 'string') this.undefineDual(sAttr);
        }
        return this;
      }

      var gui = this.$gui,
          duals = this.duals;
      if (gui && gui.compState >= 2) {
        console.log('error: undefineDual(' + attr + ') only can be called before first render');
        return this;
      }
      if (!duals || !gui) return this; // fatal error

      var b = [gui.initDuals, gui.initDuals0];
      for (var i = 0, initDuals; initDuals = b[i]; i++) {
        var idx = initDuals.length - 1;
        while (idx >= 0) {
          if (initDuals[idx][0] === attr) initDuals.splice(idx, 1);
          idx -= 1;
        }
      }
      delete duals[attr];

      var iPos = gui.tagAttrs.indexOf(attr);
      if (iPos >= 0) gui.tagAttrs.splice(iPos, 1); // remove from tagAttrs also

      return this; // can write as: this.undefineDual(attr1).undefineDual(attr2)
    }
  }, {
    key: 'setEvent',
    value: function setEvent(evSet) {
      var eventset,
          gui = this.$gui;
      if (!gui || !(eventset = gui.eventset)) {
        console.log('error: invalid state for setEvent().');
        return;
      }
      if (gui.compState >= 2) {
        console.log('error: can not call setEvent() after first render.');
        return;
      }

      var virtualKey = this.props['data-rewgt-owner'];
      var b = Object.keys(evSet);
      for (var i = 0, sKey; sKey = b[i]; i++) {
        if (sKey[0] != '$') continue;
        var sKey2 = sKey.slice(1);
        if (sKey2[0] == '$') continue; // ignore $$onXX

        var fn = evSet[sKey];
        if (typeof fn == 'function') {
          this[sKey] = bindable_(fn) ? fn.bind(this) : fn;
          if (typeof this['$' + sKey] != 'function') eventset[sKey2] = wrapCompEvt_(this, sKey2, virtualKey);
        }
      }
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      // step 1: define template as 'this._'
      var template = this.getShadowTemplate();
      Object.defineProperty(this, '_', { enumerable: false, configurable: false, writable: false, value: template });
      this.isHooked = false; // like this.isMounted(), but can be used in render()
      this['hide.'] = false;

      // step 2: define duals, tagAttrs, data-* / aria-*
      this.duals = {};
      var isTopmost = utils.widgetNum() == 0;
      var gui = { inSync: false, removeNum: 0, className: this.props.className || '', compState: 0,
        duals: {}, initDuals: [], initDuals0: [], // save duals.attr for prop-watching
        connectTo: {}, connectBy: {},
        id__: 0, id2__: 0, // id2__ != 0 means 'duals.id__ = xx' in assigning
        sparedX: null, sparedY: null
      };

      var eventset = gui.eventset = {}; // regist event callback
      var tagAttrs = gui.tagAttrs = []; // list tag-attribute
      var dualAttrs = gui.dualAttrs = {}; // {attrName:'dual-attr-name'}
      var dataset = gui.dataset = []; // list data-* aria-*
      var exprAttrs = gui.exprAttrs = []; // list $attr, will adjust to { attr:updateExpr(comp) } before first render
      var pathAttr = '',
          pathValue = '',
          flowFlag = '';
      gui.forExpr = false;gui.hasIdSetter = false;

      var currEvSet = {},
          evSet_ = this.$eventset || [{}, {}],
          evSet = evSet_[0],
          sysEvSet = evSet_[1];

      var dualIdSetter = null;
      var b = Object.keys(this.props);
      for (var i = 0, item; item = b[i]; i++) {
        if (item.indexOf('data-') == 0) {
          if (item == 'data-unit.path' || item == 'data-span.path') {
            pathAttr = item;
            pathValue = this.props[item];
          }
          dataset.push(item);
        } else if (item.indexOf('dual-') == 0) {
          var dualKey = item.slice(5).replace(_hyphenPattern, function (_, chr) {
            return chr.toUpperCase();
          });
          if (dualKey) dualAttrs[dualKey] = item;
        } else if (item.indexOf('aria-') == 0) dataset.push(item);else if (item[0] == '$' && item.length > 1) {
          var itemValue = this.props[item],
              tp = typeof itemValue === 'undefined' ? 'undefined' : _typeof(itemValue);
          if (tp == 'string') {
            if (item == '$id__') {
              itemValue = idSetter[itemValue];
              tp = typeof itemValue === 'undefined' ? 'undefined' : _typeof(itemValue); // wait process if tp == 'function'
            } else {
              var isRFor = false;
              item = item.slice(1);
              if (item == '$for') {
                // $$for
                item = 'for';
                isRFor = true;
              }
              if (ctrlExprCmd_.indexOf(item) >= 0) {
                // item: for if elif else
                if (item == 'for') {
                  if (gui.forExpr) console.log('warning: reduplicate property ($for)');else {
                    gui.forExpr = isRFor ? 2 : 1; // flowFlag is ''
                    exprAttrs.push(item); // only add one $for
                  }
                  if (isTopmost) console.log("error: can not use '$for' in topmost widget");
                } else {
                  if (flowFlag) // report erro and ignore current
                    console.log('error: property ($' + item + ') conflict with previous ($' + flowFlag + ')');else {
                    flowFlag = item;
                    if (item != 'else') exprAttrs.push(item);
                  }
                }
              } else {
                if (item == 'children') {
                  if (hasOwn_.call(this.props, 'for.index')) {
                    // $children only used under forExpr
                    gui.isChildExpr = true;
                    gui.children2 = this.props.children;
                  }
                } else if (item != 'key') // use $key, $children as normal prop, updated in parent for-loop
                  exprAttrs.push(item);
              }
              continue;
            }
          }

          if (tp == 'function') {
            if (item[1] == '$') {
              // not support $$onEvent
              console.log('warning: invalid using props.' + item);
              continue;
            }

            var item2 = item.slice(1);
            if (item2 == 'id__') // pass setter by props.$id__
              dualIdSetter = itemValue; // will bind this in defineDual('id__')
            else this[item] = currEvSet[item2] = bindable_(itemValue) ? itemValue.bind(this) : itemValue;
          }
          // else ignore  // $XX only can be string or function, ignore others
        } else {
          var iFlag = supportedAttr_[item];
          if (iFlag && iFlag != 5) // 5: className/style/width/height
            tagAttrs.push(item);
        }
      }
      gui.flowFlag = flowFlag;
      gui.dataset2 = dataset.slice(0);

      // step 3: hook parent widget
      var keyid = this.props['keyid.'];
      if (isTopmost && !keyid) keyid = 'body';
      if (keyid) {
        var keyTp = typeof keyid === 'undefined' ? 'undefined' : _typeof(keyid);
        if (keyTp != 'string' && keyTp != 'number') keyid = undefined; // change to use automatic number keyid
      }

      var owner = this.props['hookTo.'];
      if (isTopmost && !owner) owner = W;
      if (typeof owner == 'string') owner = W.W(owner); // can be W.W('')
      if (Array.isArray(owner) && owner.W) {
        // exists owner widget
        if (keyid !== undefined) owner.$set(keyid, owner.W(this));else keyid = owner.push(owner.W(this)) - 1;
        gui.keyid = keyid;
      }

      // step 4: setup gui.eventset
      var virtualKey = this.props['data-rewgt-owner'];
      if (virtualKey) {
        var ownerComp,
            evtset2 = gui.eventset2 = {};
        if (owner && (ownerComp = owner.component)) {
          var b = Object.keys(ownerComp.$gui.eventset);
          for (var i = 0, item; item = b[i]; i++) {
            eventset[item] = wrapCompEvt_(this, item, virtualKey);
            evtset2[item] = true;
          }
        }
      }

      var wrapKeys = Object.assign({}, evSet, currEvSet);
      for (var sEvName in wrapKeys) {
        eventset[sEvName] = wrapCompEvt_(this, sEvName, virtualKey);
      }
      for (var sEvName in sysEvSet) {
        eventset[sEvName] = this['$$' + sEvName]; // maybe overwrite
      }

      // step 5: prepare dState
      if (isTopmost) // topmost can not be panel, NOT render children as flex
        gui.className = removeClass_(gui.className, ['rewgt-panel', 'row-reverse', 'reverse-row', 'col-reverse', 'reverse-col']);
      Object.defineProperty(this, '$gui', { enumerable: false, configurable: false, writable: false, value: gui });
      var dState = { id__: 0, childNumId: 0, duals: [], 'tagName.': this.props['tagName.'],
        exprAttrs: exprAttrs.slice(0)
      }; // state.duals = [[attr,newValue], ...]
      if (W.__design__) {
        var d = template._getGroupOpt(this); // has hooked, this.widget should be OK
        dState['data-group.opt'] = d.type + '/' + d.editable; // no props['data-group.opt'], also not in $gui.dataset
      }

      // step 6: setup frame property, such as: left, top, width, height
      Object.assign(dState, { left: 0, top: 0, width: null, height: null,
        minWidth: 0, maxWidth: 0, minHeight: 0, maxHeight: 0,
        borderWidth: [0, 0, 0, 0], padding: [0, 0, 0, 0], margin: [0, 0, 0, 0],
        klass: '', style: {}
      });

      var isPanelWdgt = gui.isPanel = hasClass_(gui.className, 'rewgt-panel'); // gui.isPanel is fixed
      var checkRow = false,
          checkCol = false; // fixed, no changing
      var childInline = this.props['childInline.']; // fixed
      if (!childInline && !isTopmost && isPanelWdgt) {
        if (hasClass_(gui.className + ' ' + this.props.klass, ['col-reverse', 'reverse-col'])) checkCol = true;else checkRow = true;
      }
      gui.useSparedX = false;gui.useSparedY = false;gui.respared = false;
      gui.sparedTotal = 0; // 0 means not use
      gui.compIdx = {};gui.comps = children2Arr_(this.props.children);

      Object.defineProperty(this.duals, 'keyid', { enumerable: true, configurable: true,
        get: function () {
          return this.$gui.keyid;
        }.bind(this),
        set: function set(value, oldValue) {
          // no need bind this
          throw new Error('property (keyid) is readonly');
        }
      });

      this.defineDual('klass', function (value, oldValue) {
        this.state.klass = value || '';
      });
      this.defineDual('style', function (value, oldValue) {
        if (!this.state['tagName.']) {
          // current is virtual node
          var b = utils.eachComponent(this),
              childComp = b[0];
          if (childComp) childComp.duals.style = value;
        } else {
          this.state.style = Object.assign({}, oldValue, value);
        }
      });
      this.defineDual('left', function (value, oldValue) {
        this.state.left = isNaN(value) ? null : value; // isNaN(null) is false
      });
      this.defineDual('top', function (value, oldValue) {
        this.state.top = isNaN(value) ? null : value;
      });
      this.defineDual('width', function (value, oldValue) {
        var newValue,
            isNum = false;
        if (isNaN(value)) newValue = null;else {
          newValue = value;
          if (value !== null) isNum = true;
        }
        this.state.width = newValue;

        if (isNum) {
          var owner = this.parentOf(true);
          if (owner && owner.$gui.useSparedX) renewWidgetSpared_(owner, false);
        }
      });
      this.defineDual('height', function (value, oldValue) {
        var newValue,
            isNum = false;
        if (isNaN(value)) newValue = null;else {
          newValue = value;
          if (value !== null) isNum = true;
        }
        this.state.height = newValue;

        if (isNum) {
          var owner = this.parentOf(true);
          if (owner && owner.$gui.useSparedY) renewWidgetSpared_(owner, false);
        }
      });
      this.defineDual('minWidth', function (value, oldValue) {
        var i = value || 0; // can not be null
        if (i > 0 && this.state.maxWidth > 0 && this.state.maxWidth < i) {
          console.log('warning: invalid widget minWidth or maxWidth');
          return;
        }
        this.state.minWidth = i;
      });
      this.defineDual('maxWidth', function (value, oldValue) {
        var i = value || 0;
        if (i > 0 && this.state.minWidth > 0 && this.state.minWidth > i) {
          console.log('warning: invalid widget minWidth or maxWidth');
          return;
        }
        this.state.maxWidth = i;
      });
      this.defineDual('minHeight', function (value, oldValue) {
        var i = value || 0;
        if (i > 0 && this.state.maxHeight > 0 && this.state.maxHeight < i) {
          console.log('warning: invalid widget minHeight or maxHeight');
          return;
        }
        this.state.minHeight = i;
      });
      this.defineDual('maxHeight', function (value, oldValue) {
        var i = value || 0;
        if (i > 0 && this.state.minHeight > 0 && this.state.minHeight > i) {
          console.log('warning: invalid widget minHeight or maxHeight');
          return;
        }
        this.state.maxHeight = i;
      });
      this.defineDual('borderWidth', function (value, oldValue) {
        var oldV = oldValue || [0, 0, 0, 0];
        var newV = this.state.borderWidth = gui.isPanel ? parseWidth_(value) : parseWidth2_(value);

        var changed = false;
        if (this.$gui.useSparedX) {
          if (oldV[1] !== newV[1] || oldV[3] !== newV[3]) changed = true;
        } else if (this.$gui.useSparedY) {
          if (oldV[0] !== newV[0] || oldV[2] !== newV[2]) changed = true;
        }
        if (changed) renewWidgetSpared_(this, false);
      });
      this.defineDual('padding', function (value, oldValue) {
        var spareX,
            newV = this.state.padding = gui.isPanel ? parseWidth_(value) : parseWidth2_(value);

        if ((spareX = this.$gui.useSparedX) || this.$gui.useSparedX) {
          var changed = false,
              oldV = oldValue || [0, 0, 0, 0];
          if (spareX) {
            if (oldV[1] !== newV[1] || oldV[3] !== newV[3]) changed = true;
          } else {
            // this.$gui.useSparedY
            if (oldV[0] !== newV[0] || oldV[2] !== newV[2]) changed = true;
          }
          if (changed) renewWidgetSpared_(this, false);
        }
      });
      this.defineDual('margin', function (value, oldValue) {
        this.state.margin = gui.isPanel ? parseWidth_(value) : parseWidth2_(value);
      });
      this.defineDual('id__', function (value, oldValue) {
        // should not use props.id__
        this.state.id__ = value; // is first render when oldValue == 0
        gui.id__ = gui.id2__ = value;
      }); // default this.state.id__ is 0
      if (dualIdSetter) this.defineDual('id__', dualIdSetter); // will auto set: gui.hasIdSetter = true

      this.defineDual('trigger', triggerExprFn_); // default value is undefined
      this.defineDual('cellSpacing'); // will override in GridPanel
      this.defineDual('sizes'); // will override in GridPanel

      if (owner) {
        var ownerObj = owner && owner.component;
        if (ownerObj) {
          if (ownerObj.props['isTableRow.']) {
            if (this.props.tdStyle) {
              this.defineDual('tdStyle', function (value, oldValue) {
                this.state.tdStyle = Object.assign({}, oldValue, value);
                setTimeout(function () {
                  ownerObj.reRender();
                }, 0);
              }, this.props.tdStyle);
            }
            if (this.props.colSpan) {
              this.defineDual('colSpan', function (value, oldValue) {
                this.state.colSpan = value;
                setTimeout(function () {
                  ownerObj.reRender();
                }, 0);
              }, this.props.colSpan);
            }
            if (this.props.rowSpan) {
              this.defineDual('rowSpan', function (value, oldValue) {
                this.state.rowSpan = value;
                setTimeout(function () {
                  ownerObj.reRender();
                }, 0);
              }, this.props.rowSpan);
            }
          }

          if (ownerObj.props['isScenePage.']) gui.inScene = true; // not used yet, for extending
        }
      }

      // step 7: setup parentWidth, parentHeight, init topmost also
      gui.cssWidth = null;gui.cssHeight = null; // null means auto, will set in prepareState()
      var ownerWd = null,
          ownerHi = null;

      var hookThis = this.widget;
      if (owner && hookThis) {
        if (pathAttr) {
          hookThis.$callspace = { flowFlag: 'ref', forSpace: null };
          hookThis.$callspace[pathAttr] = pathValue;
          var exprSpace = hookThis.$callspace.exprSpace = {};
          setupExprSpace(exprSpace, this);
        }

        if (isTopmost) {
          // if is first widget, take as topmost panel
          topmostWidget_ = creator.topmostWidget_ = hookThis;
          containNode_ = creator.containNode_ = document.getElementById('react-container');
          if (!containNode_) console.log("fatal error: can not find 'react-container' node.");
        }
        if (isTopmost && containNode_) {
          if (W.__design__) {
            containNode_.style.zIndex = '3000'; // containNode_(3000) -> haloFrame(3010) --> popupWindow(3016)
            // to -1000 let thumbnail preview in showing, hidden for easy editing
            this.duals.style = { zIndex: '-1000', overflow: 'hidden' }; // will append to gui.initDuals
          }

          var frameInfo = containNode_.frameInfo;
          if (!frameInfo) frameInfo = containNode_.frameInfo = { topHi: 0, leftWd: 0, rightWd: 0, bottomHi: 0 };
          frameInfo.rootName = '.' + keyid;

          var refreshFrame = function () {
            var iWd = Math.max(100, window.innerWidth - frameInfo.leftWd - frameInfo.rightWd);
            var iHi = Math.max(100, window.innerHeight - frameInfo.topHi - frameInfo.bottomHi);
            var oldSize = this.state.innerSize,
                newSize = [iWd, iHi];

            var dNew = { left: frameInfo.leftWd, top: frameInfo.topHi,
              parentWidth: iWd, parentHeight: iHi, innerSize: newSize
            };
            if (utils.dragInfo.justResized) dNew.id__ = identicalId(); // force renew
            this.setState(dNew);

            if (hasOwn_.call(this.duals, 'innerSize')) {
              // can not assign duals.innerSize, but can trigger listen
              var bConn = gui.connectTo['innerSize'];
              if (bConn && gui.compState >= 2) {
                setTimeout(function () {
                  triggerConnTo_(bConn, newSize, oldSize, 'innerSize');
                }, 0);
              }
            }
          }.bind(this);

          containNode_.refreshFrame = refreshFrame;
          setupContainerApi_(containNode_);

          //-------------------
          var onResizeEnd = function onResizeEnd() {
            utils.dragInfo.inDragging = false;
            utils.dragInfo.justResized = true; // if winJustDragged, should force children re-render
            setTimeout(function () {
              utils.dragInfo.justResized = false;
            }, 1200);

            refreshFrame();
          };

          var resizeTimer = 0;
          gui.onWinResize = function (event) {
            function doResize() {
              if (resizeTimer) clearTimeout(resizeTimer);
              resizeTimer = setTimeout(onResizeEnd, 500);
            }

            utils.dragInfo.inDragging = true;
            doResize();
            refreshFrame();
          }; // only topmost widget has onWinResize

          this.duals.style = Object.assign({}, this.props.style, { position: 'absolute' }); // fix to absolute
          this.duals.left = frameInfo.leftWd; // props.left will be ignored
          this.duals.top = frameInfo.topHi;
          ownerWd = Math.max(100, window.innerWidth - frameInfo.leftWd - frameInfo.rightWd);
          ownerHi = Math.max(100, window.innerHeight - frameInfo.topHi - frameInfo.bottomHi);
        } else {
          var ownerObj_ = owner.component;
          if (ownerObj_) {
            ownerWd = ownerObj_.$gui.cssWidth;
            ownerHi = ownerObj_.$gui.cssHeight;
          } // else, ownerWd = null, ownerHi = null, means 'auto'
        }
      }
      dState.parentWidth = ownerWd;
      dState.parentHeight = ownerHi;

      // step 8: setup comps, compIdx
      this.defineDual('childNumId', function (newNumId, oldNumId) {
        // if no props.children, newNumId will be 0, setter will not called
        // this.state.childNumId = newNumId;  // must be auto assigned

        var thisObj = this;
        var hookThis = thisObj.widget;
        if (!hookThis) return; // fatal error

        var bColumn = thisObj.state.sizes,
            useSizes = Array.isArray(bColumn);
        var compIdx = gui.compIdx,
            bComp = gui.comps,
            isScenePage = thisObj.props['isScenePage.'];
        var hasAuto = false,
            hasNeValue = false,
            sparedTotal = 0,
            needClear = false;

        bComp.forEach(function (child, iPos) {
          if (typeof child == 'string') {
            if (iPos == 0 && bComp.length == 1 && hasOwn_.call(thisObj.duals, 'html.')) {
              setTimeout(function () {
                thisObj.duals['html.'] = child;
              }, 0);
              needClear = true;
              return;
            }
            if (!childInline) {
              bComp[iPos] = undefined;
              console.log('warning: can not add text element to panel (' + hookThis.getPath() + ')');
              return;
            }
            child = bComp[iPos] = reactCreate_(Span__, { 'html.': child }); // auto change to React Element
          } else if (!child) return;

          var keyid,
              sKey = getElementKey_(child),
              isOld = false;
          if (sKey) {
            var iTmp = parseInt(sKey);
            if (iTmp + '' === sKey) keyid = iTmp;else keyid = sKey;

            if (typeof compIdx[sKey] == 'number') // history exists
              isOld = true;
          } else {
            keyid = iPos + gui.removeNum;
            sKey = keyid + '';
          }

          if (hasClass_(child.props.className, 'rewgt-static')) {
            if (isOld) {
              compIdx[keyid] = iPos; // maybe position changed
              return;
            }

            if (!isPanelWdgt) {
              var dProp = Object.assign({}, child.props);
              // dProp['keyid.'] = keyid;
              dProp.key = sKey;
              if (W.__design__ && !(thisObj.props['$for'] || thisObj.props['$$for'])) {
                dProp.onMouseDown = staticMouseDown;
                dProp.onDoubleClick = staticDbClick.bind(thisObj);
              }
              compIdx[keyid] = iPos;
              if (childInline) // div.rewgt-static --> span.rewgt-static
                bComp[iPos] = reactCreate_('span', dProp);else bComp[iPos] = reactCreate_('div', dProp); // reactClone_(child, dProp);
            } else {
              // can not add rewgt-static to panel widget
              bComp[iPos] = undefined;
              console.log('warning: can not add rewgt-static to panel (' + hookThis.getPath() + ') directly.');
            }
            return; // adjust nothing on rewgt-static widget
          }

          var childInline2 = child.props['childInline.'];
          if (childInline2 !== undefined) {
            // not pure react element (such as: <div>)
            if (childInline) {
              // <noscript> should not use as its child
              if (!childInline2) {
                console.log('error: can not add panel or div (' + sKey + ') to paragraph (' + hookThis.getPath() + ').');
                bComp[iPos] = undefined; // must not isOld
                return;
              }
            } else {
              // if not childInline, only support rewget-static/rewgt-panel/rewgt-unit
              if (!hasClass_(child.props.className, ['rewgt-panel', 'rewgt-unit'])) {
                bComp[iPos] = undefined; // must not isOld
                console.log('error: only panel, div, paragraph (' + keyid + ') can add to panel or div (' + hookThis.getPath() + ').');
                return;
              }
            }
          } else {
            // is pure react element, no checking
            compIdx[keyid] = iPos;
            if (!isOld) bComp[iPos] = reactClone_(child, { key: sKey }); // not pass 'keyid.' to avoid react warning
            return;
          }

          var isRef = false;
          if (child.props['isReference.']) {
            isRef = true;
            if (!isOld) {
              if (sKey[0] != '$') sKey = keyid = '$' + sKey;
              // else, keyid and key prefixed with '$'

              if (inFirstLoading_) pendingRefers_.push([thisObj, keyid]);
            }
          }

          var wd = child.props.width,
              hi = child.props.height;
          var wdAuto_ = typeof wd != 'number',
              hiAuto_ = typeof hi != 'number';
          if (checkRow) {
            if (!wdAuto_) {
              if (wd < 0 && !isRef) {
                hasNeValue = true;
                sparedTotal += -wd;
              }
            } else hasAuto = true; // not number, take as 'auto'
          } else if (checkCol) {
            if (!hiAuto_) {
              if (hi < 0 && !isRef) {
                hasNeValue = true;
                sparedTotal += -hi;
              }
            } else hasAuto = true;
          } else {
            var sErrWdHi = '';
            if (!wdAuto_ && wd < 0) sErrWdHi = 'width';else if (!hiAuto_ && hi < 0) sErrWdHi = 'height';
            if (sErrWdHi) console.log('error: can not use negative ' + sErrWdHi + ' under widget (' + hookThis.getPath() + ')');
          }

          if (isOld && child.props['hookTo.'] !== hookThis) isOld = false;
          if (isOld) // reuse old, no need cloneElement()
            compIdx[keyid] = iPos; // maybe position changed
          else {
              var props = { 'hookTo.': hookThis, key: sKey, 'keyid.': keyid };
              if (!childInline) {
                // panel or unit
                props.width = wdAuto_ ? null : wd; // also perform check in duals.width, set here to help spared-space caculating
                props.height = hiAuto_ ? null : hi;
                if (isTopmost && child.props['isScenePage.'] && child.props.noShow && !W.__design__) props['isTemplate.'] = true;
              }

              if (isScenePage) {
                var dStyle2 = Object.assign({}, child.props.style),
                    sLevel = (parseInt(dStyle2.zIndex) || 0) + '';
                if (sLevel !== '0') dStyle2.zIndex = sLevel;
                props.style = dStyle2;
              } else {
                if (W.__debug__ && !isTopmost && gui.isPanel) {
                  if ((props.style || {}).display == 'absolute') console.log("warning: can not use 'display:absolute' under a panel");
                }
              }

              compIdx[keyid] = iPos;
              bComp[iPos] = reactClone_(child, props); // width/height should pass parseFloat() for scaning spared space
            }
        }); // end of bComp.forEach()

        if (needClear) bComp.splice(0);

        if (!useSizes) {
          if (hasNeValue && !hasAuto) {
            if (sparedTotal > 0 || gui.useSparedX != checkRow || gui.useSparedY != checkCol) gui.respared = true;
            gui.sparedTotal = sparedTotal;
            gui.useSparedX = checkRow;
            gui.useSparedY = checkCol;
          } else {
            gui.sparedTotal = 0;
            gui.useSparedX = false;
            gui.useSparedY = false;
          }
        }

        if (isTopmost && oldNumId == 0) {
          compIdx['$pop'] = bComp.length + gui.removeNum;
          bComp.push(reactCreate_(createClass_(T.Panel._extend()), { 'hookTo.': hookThis, key: '$pop', 'keyid.': '$pop',
            left: 0, top: 0, width: 0, height: 0,
            style: { position: 'absolute', zIndex: 3016, overflow: 'visible' }
          }));
        }
      });

      return dState;
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      var ret = utils.shouldUpdate(this, nextProps, nextState);

      if (ret && this.props.children !== nextProps.children && !this.props['marked.']) {
        var gui = this.$gui,
            child2 = gui.duals.children = nextProps.children;
        gui.comps = children2Arr_(child2);
        gui.removeNum += 1; // trigger duals.childNumId
      }

      return ret;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var gui = this.$gui,
          duals = this.duals,
          duals0 = gui.duals;
      var b = Object.keys(duals);

      for (var i = 0, sKey; sKey = b[i]; i++) {
        // if use props['$attr'], it must no props['attr']
        var item = nextProps[sKey]; // can not pass props.id__
        if (item === undefined) {
          // props[expr] must be 'undefined' for $expr
          var sKey_ = gui.dualAttrs[sKey]; // attr --> dual-attr
          if (sKey_) {
            item = nextProps[sKey_]; // try props['dual-*']
            if (item === undefined) continue;
            // else, checking props['dual-*']
          } else continue;
        }

        if (item !== duals0[sKey]) // props.attr has changed
          duals[sKey] = duals0[sKey] = item; // record prop.xxx, and assign duals.xxx
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.isHooked = !!this.widget;

      if (this.props['hasStatic.']) renewStaticChild(this);

      var gui = this.$gui;
      if (gui.syncExpr) {
        // $expr='all: ...'  or  $expr='strict: ...'
        var item;
        while (item = gui.syncExpr.shift()) {
          // item is [sKey,fn]
          gui.exprAttrs[item[0]] = item[1];
        }
        delete gui.syncExpr;
      }

      var dSubStyles = this.props.styles;
      if (dSubStyles && (this.props['data-span.path'] || this.props['data-unit.path'])) {
        var thisObj = this;
        Object.keys(dSubStyles).forEach(function (sPath) {
          var dStyle = dSubStyles[sPath];
          if ((typeof dStyle === 'undefined' ? 'undefined' : _typeof(dStyle)) == 'object' && sPath) {
            var comp = thisObj.componentOf(sPath);
            if (comp) comp.duals.style = dStyle;
          }
        });
      }

      if (gui.hasIdSetter) this.duals.id__ = 2; // gui.id__ = 2;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (W.__debug__) {
        var fn = this.props.teardown__;
        if (typeof fn == 'function') {
          try {
            fn.apply(this);
          } catch (e) {
            console.log(e);
          }
        }
      }

      var gui = this.$gui;
      if (gui.hasIdSetter) this.duals.id__ = 0; // gui.id__ = gui.id2__ = 0;

      var bKey = Object.keys(gui.connectBy),
          bRmv = [];
      for (var i = 0, item; item = bKey[i]; i++) {
        var b = gui.connectBy[item];
        for (var i2 = 0, item2; item2 = b[i2]; i2++) {
          var sour = item2[0];
          if (sour !== this && bRmv.indexOf(sour) < 0) bRmv.push(sour);
        }
      }
      for (var i = 0, sour; sour = bRmv[i]; i++) {
        sour.unlisten('*', this);
      }
      gui.connectTo = {};
      gui.connectBy = {};
      gui.compState = 0;

      if (Array.isArray(this.widget)) {
        var owner = this.widget.parent;
        if (Array.isArray(owner)) {
          // owner still available
          var keyid = gui.keyid,
              ownerObj = owner.component;
          if (ownerObj) {
            var gui2 = ownerObj.$gui;
            if (!gui2.flowFlag && !gui2.forExpr) {
              // ignore $for $if $elif $else
              var idx = gui2.compIdx[keyid];
              if (typeof idx == 'number') {
                delete gui2.comps[idx]; // set undefined, can not re-mount
                delete gui2.compIdx[keyid];
              }
            }
          }
          owner.$unhook(this.widget, keyid); // unhook widget suite, keyid maybe undefined
        }

        delete this.widget.component;
        delete this.widget;
      }

      gui.eventset = {};
      this.isHooked = false;
    }
  }, {
    key: 'reRender',
    value: function reRender(callback, data) {
      // default data is undefined
      if (this.isHooked) {
        if (this.$gui.inSync) {
          var self = this;
          setTimeout(function () {
            var newId = chooseIdentical_(self.state.id__);
            var data2 = Object.assign({}, data, { id__: newId });
            self.setState(data2, callback);
          }, 0);
        } else {
          var newId = chooseIdentical_(this.state.id__);
          var data2 = Object.assign({}, data, { id__: newId });
          this.setState(data2, callback);
        }
      } else {
        if (this.state.id__ > 1 && (W.__design__ || W.__debug__)) console.log('warning: reRender() failed when component unhooked.');
        if (callback) callback();
      }
    }
  }, {
    key: 'listen',
    value: function listen(actions, targ, sMethod) {
      var gui = this.$gui,
          self = this;

      function checkDualAttr(sKey) {
        var oldDesc = Object.getOwnPropertyDescriptor(self.duals, sKey);
        if (oldDesc) return true;

        if (self.props['$' + sKey]) {
          // '$data' '$data-xx' '$dualAttr' '$expr'
          if (ctrlExprCmd_.indexOf(sKey) > 0) // $if $elif $else  // can listen '$for'
            console.log("warning: '" + sKey + "' is not listenable.");
          // else, all other :expr is listenable
          return true;
        } else if (gui.dataset.indexOf(sKey) >= 0 || gui.tagAttrs.indexOf(sKey) >= 0 || hasOwn_.call(gui.dualAttrs, sKey)) {
          var bFn = dualFuncOfGetSet_(self, sKey); // no super setter and no custom setter
          Object.defineProperty(self.duals, sKey, { enumerable: true, configurable: true,
            get: bFn[0], set: bFn[1]
          });
          return true;
        } else return false;
      }

      if (typeof targ == 'function') {
        var bAction;
        if (Array.isArray(actions)) bAction = actions;else if (typeof actions == 'string' && actions) bAction = [actions];else {
          console.log('warning: invalid listen source.');
          return this;
        }

        for (var i = 0, sName; sName = bAction[i]; i++) {
          if (!checkDualAttr(sName)) {
            console.log('warning: listen source (' + sName + ') inexistent.');
            continue;
          }

          var b = gui.connectTo[sName]; // actions is one action name
          if (!b) b = gui.connectTo[sName] = [];
          b.push([null, targ, false]); // null means self, targ is function (already located)
        }
        return this;
      }
      // else, define function by targ[sMethod]

      if (!targ || !targ.$gui) {
        console.log('warning: invalid listen target.');
        return this;
      }

      var tp,
          bAction = [];
      if (Array.isArray(actions)) {
        actions.forEach(function (item) {
          var sName = ('on-' + item).replace(_hyphenPattern, function (_, chr) {
            return chr.toUpperCase();
          });
          bAction.push([item, sName]);
        });
      } else if ((tp = typeof actions === 'undefined' ? 'undefined' : _typeof(actions)) == 'string') {
        if (!sMethod || typeof sMethod != 'string') {
          sMethod = ('on-' + actions).replace(_hyphenPattern, function (_, chr) {
            return chr.toUpperCase();
          }); // data-attr   --> onDataAttr
          bAction.push([actions, sMethod]);
        } else bAction.push([actions, sMethod, sMethod]); // can try targ.duals[sMethod]
      } else if (action && tp == 'object') {
        Object.keys(actions).forEach(function (item) {
          bAction.push([item, actions[item]]);
        });
      } else return this; // fatal error

      bAction.forEach(function (item) {
        var sSrcName = item[0],
            sTarName = item[1],
            isDual = false;
        if (!sSrcName || !checkDualAttr(sSrcName)) {
          console.log('warning: listen source (' + sSrcName + ') inexistent.');
          return;
        }

        if (typeof targ[sTarName] != 'function') {
          var sDualName = item[2];
          if (sDualName && hasOwn_.call(targ.duals, sDualName)) {
            if (sDualName === sSrcName && targ === self) {
              console.log('warning: can not connect dual (' + sSrcName + ') to self.');
              return;
            }
            isDual = true; // comp.listen('action',targ,attr) // connect to targ.duals.attr
            sTarName = sDualName;
          } else {
            console.log('warning: invalid listen target (' + sTarName + ').');
            return;
          }
        }

        var targConnBy = targ.$gui.connectBy;
        var iPos = -1,
            b = targConnBy[sTarName]; // connectBy: {sTarName:[[srcComp,sSrcAction,isDual],...]}
        if (b) {
          iPos = b.findIndex(function (a) {
            return a[0] === self && a[1] === sSrcName;
          });
          if (iPos >= 0) b[iPos][2] = isDual; // maybe isDual changed
        } else b = targConnBy[sTarName] = [];
        if (iPos < 0) b.push([self, sSrcName, isDual]);

        iPos = -1;
        b = gui.connectTo[sSrcName]; // connectTo:{sSrcAction:[[tarComp,sTarMethodOrAction,isDual],...]}
        if (b) {
          iPos = b.findIndex(function (a) {
            return a[0] === targ && a[1] === sTarName;
          });
          if (iPos >= 0) b[iPos][2] = isDual; // maybe isDual changed
        } else b = gui.connectTo[sSrcName] = [];
        if (iPos < 0) b.push([targ, sTarName, isDual]);
      });

      return this;
    }
  }, {
    key: 'unlisten',
    value: function unlisten(actions, targ, sMethod) {
      if (typeof targ == 'function') {
        if (typeof actions != 'string' || !actions) {
          console.log('warning: invalid unlisten source.');
          return this;
        }

        var gui = this.$gui,
            b = gui.connectTo[actions];
        if (b) {
          var iPos = b.findIndex(function (a) {
            return a[0] === null && a[1] === targ;
          });
          if (iPos >= 0) {
            b.splice(iPos, 1);
            if (b.length == 0) delete gui.connectTo[actions];
          }
        }
        return this;
      }

      if (!targ || !targ.$gui) {
        console.log('warning: invalid unlisten target.');
        return this;
      }

      var tp,
          bAction = [],
          gui = this.$gui,
          self = this;
      if (Array.isArray(actions)) {
        actions.forEach(function (item) {
          var sName = ('on-' + item).replace(_hyphenPattern, function (_, chr) {
            return chr.toUpperCase();
          });
          bAction.push([item, sName]);
        });
      } else if ((tp = typeof actions === 'undefined' ? 'undefined' : _typeof(actions)) == 'string') {
        if (actions == '*') {
          // use this when targ unhooked
          var d = gui.connectTo;
          Object.keys(d).forEach(function (item) {
            var idx,
                b = d[item];
            if (b && (idx = b.length) > 0) {
              while (--idx >= 0) {
                var b2 = b[idx];
                if (b2[0] === targ) b.splice(idx, 1);
              }
              if (b.length == 0) delete d[item];
            }
          });
          return this;
        }

        if (!sMethod || typeof sMethod != 'string') {
          sMethod = ('on-' + actions).replace(_hyphenPattern, function (_, chr) {
            return chr.toUpperCase();
          }); // data-attr   --> onDataAttr
        } else if (sMethod == '*') {
          var idx,
              d = gui.connectTo,
              b = d[actions];
          if (b && (idx = b.length) > 0) {
            while (--idx >= 0) {
              var b2 = b[idx];
              if (b2[0] === targ) b.splice(idx, 1);
            }
            if (b.length == 0) delete d[actions];
          }
          return this;
        }
        bAction.push([actions, sMethod]);
      } else if (action && tp == 'object') {
        Object.keys(actions).forEach(function (item) {
          bAction.push([item, actions[item]]);
        });
      } else return this; // fatal error

      bAction.forEach(function (item) {
        var sSrcName = item[0],
            sTarName = item[1];
        var b = gui.connectTo[sSrcName]; // connectTo:{sSrcAction:[[tarComp,sTarMethodOrAction],...]}
        if (b) {
          var iPos = b.findIndex(function (a) {
            return a[0] === targ && a[1] === sTarName;
          });
          if (iPos >= 0) {
            b.splice(iPos, 1);
            if (b.length == 0) delete gui.connectTo[sSrcName];
          }
        }
      });

      return this;
    }
  }, {
    key: 'getHtmlNode',
    value: function getHtmlNode(component) {
      if (!this.state['tagName.'] && !component) {
        // try get only child node when no 'tagName.'
        var wdgt = this.widget;
        if (wdgt) {
          var b = Object.keys(wdgt),
              iLen = b.length,
              childComp = null;
          for (var i = 0; i < iLen; i++) {
            var sKey = b[i];
            if (sKey == 'parent' || sKey == 'component') continue;
            var item = wdgt[sKey];
            if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) == 'object' && item.W === W.W) {
              childComp = item.component;
              break;
            }
          }
          if (childComp) return childComp.getHtmlNode();
        }
        return null;
      } else return findDomNode_(component || this);
    }
  }, {
    key: 'parentOf',
    value: function parentOf(noVirtual, sRole, scanMax) {
      var self = this,
          wdgt = self.widget,
          owner = wdgt && wdgt.parent;
      var ownerObj = owner && owner.component;
      if (noVirtual) {
        var iCount = 1,
            iMax = scanMax || 65535;
        while (ownerObj && (self.props['data-rewgt-owner'] || sRole && ownerObj.state.role !== sRole)) {
          // has 'data-rewgt-owner' means ownerObj is virtual // check props.role is expected or not
          if (iCount >= iMax) return null;
          iCount += 1;

          self = ownerObj;
          owner = owner.parent;
          ownerObj = owner && owner.component;
        }
      } else {
        while (sRole && ownerObj && ownerObj.state.role !== sRole) {
          owner = owner.parent;
          ownerObj = owner && owner.component;
        }
      }
      return ownerObj || null;
    }
  }, {
    key: 'childOf',
    value: function childOf(sKey, noVirtual) {
      var i,
          self = this,
          wdgt = self.widget;
      if (noVirtual) {
        while (wdgt) {
          var comps = self.$gui.comps,
              iLen = comps.length;
          for (i = 0; i < iLen; i++) {
            var child = comps[i];
            if (!child) continue;

            var sKey2 = getElementKey_(child);
            child = sKey2 && wdgt[sKey2];

            var childComp = child && child.component;
            if (childComp) {
              // try any child, ignore sKey
              if (!childComp.props['data-rewgt-owner']) return sKey ? childComp.childOf(sKey) : childComp;else {
                wdgt = child;self = childComp;
                break;
              }
            } else return null; // fatal error
          }
          if (i >= iLen) return null; // out of loop range
        }
      } else {
        if (sKey) {
          var child = wdgt[sKey];
          return child && child.component || null;
        }
      }

      return null;
    }
  }, {
    key: 'componentOf',
    value: function componentOf(sPath) {
      var tp = typeof sPath === 'undefined' ? 'undefined' : _typeof(sPath);
      if (tp == 'number') {
        var bInfo = [],
            ownerObj = findComponent_(this, sPath, bInfo, 0);
        if (!ownerObj || !bInfo[1]) {
          // bInfo[1] is callspace
          console.log('warning: locate callspace (' + sPath + ') failed.');
          return null;
        } else return ownerObj;
      } else if (tp != 'string') return null;

      var ch = sPath[0];
      if (ch != '.' && ch != '/') {
        // find child directly
        var wdgt = this.widget,
            targWdgt = wdgt && wdgt.W(sPath);
        return targWdgt && targWdgt.component || null;
      } else return getCompByPath_(this, sPath);
    }
  }, {
    key: 'elementOf',
    value: function elementOf(sPath) {
      var ch,
          headWdgt = null,
          sTail = '',
          tp = typeof sPath === 'undefined' ? 'undefined' : _typeof(sPath);
      if (tp == 'number') {
        headWdgt = this.componentOf(sPath);
        headWdgt = headWdgt && headWdgt.widget; // sTail = '';
      } else if (!sPath) headWdgt = this.widget; // sTail = '';
      else if (tp != 'string') return null;else if ((ch = sPath[0]) != '.' && ch != '/') {
          headWdgt = this.widget;
          sTail = sPath;
        } else {
          var iPos = sPath.lastIndexOf('./');
          if (iPos >= 0) {
            var comp = this.componentOf(sPath.slice(0, iPos + 2));
            if (!comp) return null;
            headWdgt = comp.widget;
            sTail = sPath.slice(iPos + 2);
          } else if (ch == '.') {
            // absolute path
            headWdgt = W;
            sTail = sPath.slice(1);
            if (!sTail) return null;
          } else if (ch == '/' && sPath[1] == '/') {
            var ownerObj = this.parentOf();
            return ownerObj ? ownerObj.elementOf(sPath.slice(2)) : null;
          } else return null; // unknown format
        }

      if (!headWdgt) return null;
      if (!sTail) {
        var comp = headWdgt.component;
        if (comp) {
          var ownerWdgt = headWdgt.parent,
              ownerObj = ownerWdgt && ownerWdgt.component;
          if (ownerObj) {
            var idx = ownerObj.$gui.compIdx[comp.$gui.keyid];
            if (typeof idx == 'number') return ownerObj.$gui.comps[idx];
          }
        }
        return null;
      }
      if (sTail.indexOf('/') >= 0) return null; // invalid path

      var b = sTail.split('.'),
          iLast = b.length - 1;
      for (var i = 0, item; item = b[i]; i++) {
        var child = headWdgt[item];
        if (Array.isArray(child) && child.W) {
          if (i < iLast) headWdgt = child; // continue next loop
          else {
              var ownerObj = headWdgt.component;
              if (ownerObj) {
                var idx = ownerObj.$gui.compIdx[item];
                if (typeof idx == 'number') return ownerObj.$gui.comps[idx];
              }
              return null;
            }
        } else {
          var comp = headWdgt.component;
          if (comp && comp.props['isTemplate.']) // try search by TempXX
            return comp.elementOf(b.slice(i).join('.'));else return null;
        }
      }
      return null;
    }
  }, {
    key: 'prevSibling',
    value: function prevSibling() {
      var owner = this.widget,
          keyid = this.$gui.keyid;
      owner = owner && owner.parent;
      var ownerObj = owner && owner.component;

      if (ownerObj && (keyid || keyid === 0)) {
        var gui2 = ownerObj.$gui,
            idx = gui2.compIdx[keyid];
        if (typeof idx == 'number') {
          for (var i = idx - 1; i >= 0; i--) {
            var child = gui2.comps[i];
            if (child) {
              var sKey_ = getElementKey_(child);
              child = sKey_ && owner[sKey_];
              return child ? child.component : undefined;
            }
          }
        }
      }
      return undefined;
    }
  }, {
    key: 'nextSibling',
    value: function nextSibling() {
      var owner = this.widget,
          keyid = this.$gui.keyid;
      owner = owner && owner.parent;
      var ownerObj = owner && owner.component;

      if (ownerObj && (keyid || keyid === 0)) {
        var gui2 = ownerObj.$gui,
            idx = gui2.compIdx[keyid];
        if (typeof idx == 'number') {
          var iLen = gui2.comps.length;
          for (var i = idx + 1; i < iLen; i++) {
            var child = gui2.comps[i];
            if (child) {
              var sKey_ = getElementKey_(child);
              child = sKey_ && owner[sKey_];
              return child ? child.component : undefined;
            }
          }
        }
      }
      return undefined;
    }
  }, {
    key: 'fullClone',
    value: function fullClone(props) {
      var ele = null,
          keyid = this.$gui.keyid;
      var wdgt = this.widget,
          ownerObj = wdgt && wdgt.parent;
      ownerObj = ownerObj && ownerObj.component;
      if (ownerObj) {
        var idx = ownerObj.$gui.compIdx[keyid];
        if (typeof idx == 'number') ele = ownerObj.$gui.comps[idx];
      }

      var iFlag,
          dProp = null;
      if ((typeof props === 'undefined' ? 'undefined' : _typeof(props)) != 'object') props = {};
      if (ele) {
        if (iFlag = ele.props['isReference.']) {
          // for linker
          dProp = getRefProp_(ele.props);
          if (typeof keyid == 'number') {
            delete dProp.key;
            delete dProp['keyid.'];
          }
          return reactCreate_(iFlag == 1 ? RefDiv__ : RefSpan__, Object.assign(dProp, props));
        }

        if (this.props['isTemplate.'] && !W.__design__) {
          var tempObj = this.$gui.template;
          if (tempObj instanceof templateNode) return reactClone_(ele, { template: tempObj }, null);else throw new Error('invalid template (' + keyid + ')');
        }
      }

      if (!ele || !(dProp = getCompRenewProp_(this))) throw new Error('invalid widget (' + keyid + ')'); // not support
      if (typeof keyid == 'number') {
        dProp['keyid.'] = '';dProp.key = '';
      }
      Object.assign(dProp, props);
      return deepCloneReactEle_(ele, dProp, wdgt, this);
    }
  }, {
    key: 'setChild',
    value: function setChild() {
      var callback = undefined,
          changed = false,
          argLen = arguments.length;
      if (argLen > 0) {
        callback = arguments[argLen - 1];
        if (typeof callback != 'function') callback = undefined;else argLen -= 1;
      }

      var thisWidget = this.widget,
          isTopmost = thisWidget === topmostWidget_;
      function doCallback() {
        if (changed && isTopmost) {
          var self = thisWidget.component;
          if (self && self.renewPages) self.renewPages();
        }
        if (callback) callback(changed);
      }

      var gui = this.$gui;
      if (!thisWidget) {
        utils.instantShow('warning: invalid target widget in setChild().');
        return doCallback();
      }
      if (!this.isHooked) {
        utils.instantShow('warning: can not add child to unhooked widget.');
        return doCallback();
      }
      if (this.props['isTemplate.']) {
        if (justFirstRender_) {
          var template = gui.template; // template must exists
          for (var i0 = 0; i0 < argLen; i0++) {
            var arg = arguments[i0],
                argTp = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
            if (argTp == 'function') {
              callback = arg; // transcate it
              break;
            } else if (arg && reactIsValid_(arg)) setTemplateChild_(template, arg);
            // else, ignore
          }
          if (!W.__design__) return doCallback(); // no need reRender()
          // else, continue set child elements
        } else if (!W.__design__) {
          utils.instantShow('warning: can not set child of template.');
          return doCallback();
        }
      }

      var currWidgetType = 4; // 1:panel, 2:unit, 3:paragraph, 4:inline
      if (gui.isPanel || isTopmost) currWidgetType = 1;else if (hasClass_(gui.className, 'rewgt-unit')) {
        if (this.props['childInline.']) // TP like
          currWidgetType = 3;else currWidgetType = 2; // TUnit like
      } else {
        if (!this.props['childInline.']) {
          utils.instantShow('warning: invalid call setChild()');
          return doCallback();
        } // else, currWidgetType = 4  // inline component also support setChild()
      }

      var iOldRmv = gui.removeNum,
          iNewRmv = 0;
      var bKeys = [],
          bComp = gui.comps.slice(0);
      for (var i = bComp.length - 1; i >= 0; i--) {
        var keyid_,
            child = bComp[i],
            sKey_ = child && getElementKey_(child);
        if (sKey_) {
          bKeys.unshift(sKey_);

          if (hasClass_(child.props.className, 'rewgt-static')) bComp[i] = reactClone_(child, { key: sKey_ });else {
            var iTmp = parseInt(sKey_);
            if (iTmp + '' === sKey_) keyid_ = iTmp;else keyid_ = sKey_;

            if (keyid_ !== child.props['keyid.']) // ensure using 'keyid.'
              bComp[i] = reactClone_(child, { 'keyid.': keyid_, key: sKey_ });
          }
        } else {
          bComp.splice(i, 1);
          iNewRmv += 1;
          changed = true; // need call setState()
        }
      } // first scan: get callback, remove old, pseudo add/insert

      var lastKeyid = undefined,
          lastOp = '';
      for (var i1 = 0; i1 < argLen; i1++) {
        var arg = arguments[i1];
        var argTp = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);

        if (argTp == 'function') {
          callback = arg; // callback should be last one, if not, transcate it
          break;
        } else if (argTp == 'number') {
          arg = arg + '';
          argTp = 'string';
        }

        if (argTp == 'string') {
          if (!arg) continue; // ignore ''

          lastOp = arg[0];
          if (lastOp == '-' || lastOp == '+') {
            arg = arg.slice(1);
            if (!arg) {
              lastOp = '';
              continue;
            }
          } else lastOp = '';

          lastKeyid = arg;
          var iTmp = parseInt(arg);
          if (iTmp + '' == arg) lastKeyid = iTmp; // prefer int to string
          if (lastOp == '-') {
            // remove by keyid
            var iPos = bKeys.indexOf(arg); // bKeys hold string-key
            if (iPos >= 0) {
              bKeys.splice(iPos, 1);
              bComp.splice(iPos, 1);
              iNewRmv += 1;
              changed = true;
            } // else, not found, ignore

            lastOp = '';
            lastKeyid = undefined; // current finished
          } else if (lastOp == '+') {
            var iPos = bKeys.indexOf(arg); // -1 means append to end
            if (iPos < 0) lastOp = ''; // change to append or replace
          } // else, lastOp = ''
        } else if (arg && reactIsValid_(arg)) {
          if (hasClass_(arg.props.className, 'rewgt-static')) {
            console.log('warning: setChild() not support rewgt-static.');
            lastOp = '';lastKeyid = undefined; // current finished
            continue;
          }

          var validChild = true,
              childInline = arg.props['childInline.'];
          if (childInline === undefined) // pure react element
            ;else if (currWidgetType == 1 || currWidgetType == 2) {
            // panel or div
            if (!hasClass_(arg.props.className, ['rewgt-panel', 'rewgt-unit'])) // not panel/div/p
              validChild = false;
          } else {
            // p or span
            if (!childInline) // false
              validChild = false;
          }

          var insBefore = undefined,
              tryInsert = true;
          if (lastOp == '+' && lastKeyid !== undefined) insBefore = lastKeyid;else tryInsert = false;

          var argKey,
              isNewest = false;
          if (lastOp != '+' && lastKeyid !== undefined) argKey = lastKeyid;else {
            var bTmp = getKeyidProp(arg);
            isNewest = bTmp[0];
            argKey = bTmp[1];
          }

          if (!validChild) {
            utils.instantShow('error: display type of child widget (' + argKey + ') mismatch to owner (' + thisWidget.getPath() + ').');
          } else {
            if (arg.props['isReference.']) {
              if (typeof argKey == 'string') {
                if (argKey[0] != '$') argKey = '$' + argKey;
              } else argKey = '$' + argKey; // argKey should be number
              if (inFirstLoading_) pendingRefers_.push([this, argKey]);
            }

            var iExist = isNewest || tryInsert ? -1 : bKeys.indexOf(argKey + '');
            if (iExist >= 0) {
              // replace
              bComp[iExist] = [argKey, arg]; // bKeys not change
            } else {
              var iPos = tryInsert ? bKeys.indexOf(insBefore + '') : -1;
              if (iPos >= 0) {
                // insert
                bComp.splice(iPos, 0, [argKey, arg]);
                bKeys.splice(iPos, 0, argKey + '');
              } else {
                // append
                bComp.push([argKey, arg]);
                bKeys.push(argKey + '');
              }

              if (tryInsert && !isNewest) {
                var iOldOne = bKeys.indexOf(argKey + '');
                if (iOldOne >= 0) {
                  if (iOldOne == iPos && iPos >= 0) // same argKey
                    iOldOne = bKeys.indexOf(argKey + '', iPos + 1);
                }
                if (iOldOne >= 0) {
                  // remove old same key
                  bComp.splice(iOldOne, 1);
                  bKeys.splice(iOldOne, 1);
                  iNewRmv += 1;
                }
              }
            }
            changed = true;
          }

          lastOp = '';
          lastKeyid = undefined; // current finished
        } else if (Array.isArray(arg)) {
          var argLen2 = arg.length,
              lastOp2 = '',
              lastKeyid2 = undefined;
          for (var i2 = 0; i2 < argLen2; i2++) {
            var arg2 = arg[i2],
                argTp2 = typeof arg2 === 'undefined' ? 'undefined' : _typeof(arg2);
            if (argTp2 == 'number') {
              arg2 = arg2 + '';
              argTp2 = 'string';
            }

            if (argTp2 == 'string') {
              if (!arg2) continue; // ignore ''

              lastOp2 = arg2[0];
              if (lastOp2 == '-' || lastOp2 == '+') {
                arg2 = arg2.slice(1);
                if (!arg2) {
                  lastOp2 = '';
                  continue;
                }
              } else lastOp2 = '';

              lastKeyid2 = arg2;
              var iTmp2 = parseInt(arg2);
              if (iTmp2 + '' == arg2) lastKeyid2 = iTmp2; // prefer int to string

              if (lastOp2 == '-') {
                // remove by keyid
                var iPos2 = bKeys.indexOf(arg2);
                if (iPos2 >= 0) {
                  bKeys.splice(iPos2, 1);
                  bComp.splice(iPos2, 1);
                  iNewRmv += 1;
                  changed = true;
                } // else, not found, ignore

                lastOp2 = '';
                lastKeyid2 = undefined; // current finished
              } else if (lastOp2 == '+') {
                var iPos2 = bKeys.indexOf(arg2); // -1 means append to end
                if (iPos2 < 0) lastOp2 = ''; // change to append or replace
              } // else, lastOp2 = ''
            } else if (arg2 && reactIsValid_(arg2)) {
              if (hasClass_(arg2.props.className, 'rewgt-static')) {
                console.log('warning: setChild() not support rewgt-static.');
                lastOp2 = '';lastKeyid2 = undefined; // current finished
                continue;
              }

              var validChild2 = true,
                  childInline2 = arg2.props['childInline.'];
              if (childInline2 === undefined) // pure react element
                ;else if (currWidgetType == 1 || currWidgetType == 2) {
                // panel or unit
                if (!hasClass_(arg2.props.className, ['rewgt-panel', 'rewgt-unit'])) // not panel/unit/p
                  validChild2 = false;
              } else {
                // p or span
                if (!childInline2) // false
                  validChild2 = false;
              }

              var insBefore2 = undefined,
                  tryInsert2 = true;
              if (lastOp2 == '+' && lastKeyid2 !== undefined) insBefore2 = lastKeyid2;else if (lastOp == '+' && lastKeyid !== undefined) insBefor2 = lastKeyid;else tryInsert2 = false;

              var argKey2,
                  isNewest2 = false;
              if (lastOp2 != '+' && lastKeyid2 !== undefined) argKey2 = lastKeyid2;else {
                var bTmp2 = getKeyidProp(arg2);
                isNewest2 = bTmp2[0];
                argKey2 = bTmp2[1];
              }

              if (!validChild2) {
                utils.instantShow('error: display type of child widget (' + argKey2 + ') mismatch to owner (' + thisWidget.getPath() + ').');
              } else {
                if (arg2.props['isReference.']) {
                  if (typeof argKey2 == 'string') {
                    if (argKey2[0] != '$') argKey2 = '$' + argKey2;
                  } else argKey2 = '$' + argKey2; // argKey2 should be number
                  if (inFirstLoading_) pendingRefers_.push([this, argKey2]);
                }

                var iExist2 = isNewest2 || tryInsert2 ? -1 : bKeys.indexOf(argKey2 + '');
                if (iExist2 >= 0) {
                  // replace
                  bComp[iExist2] = [argKey2, arg2]; // bKeys not change
                } else {
                  var iPos2 = tryInsert2 ? bKeys.indexOf(insBefor2 + '') : -1;
                  if (iPos2 >= 0) {
                    // insert
                    bComp.splice(iPos2, 0, [argKey2, arg2]);
                    bKeys.splice(iPos2, 0, argKey2 + '');
                  } else {
                    // append
                    bComp.push([argKey2, arg2]);
                    bKeys.push(argKey2 + '');
                  }

                  if (tryInsert2 && !isNewest2) {
                    var iOldOne2 = bKeys.indexOf(argKey2 + '');
                    if (iOldOne2 >= 0) {
                      if (iOldOne2 == iPos2 && iPos2 >= 0) // same argKey
                        iOldOne2 = bKeys.indexOf(argKey2 + '', iPos2 + 1);
                    }
                    if (iOldOne2 >= 0) {
                      // remove old same key
                      bComp.splice(iOldOne2, 1);
                      bKeys.splice(iOldOne2, 1);
                      iNewRmv += 1;
                    }
                  }
                }

                changed = true;
              } // else, unknown format, ignore

              lastOp2 = '';
              lastKeyid2 = undefined; // current finished
            } // else, ignore array and others
          }
        } // else, ignore others
      }

      if (changed) {
        // second scan: clone element and re-index child components
        var checkRow = false,
            checkCol = false;
        if (!isTopmost && gui.isPanel) {
          if (hasClass_(this.props.className + ' ' + this.props.klass, ['col-reverse', 'reverse-col'])) checkCol = true;else checkRow = true;
        }

        var bColumn = null,
            useCellX = 0,
            useCellY = 0;
        if (gui.isPanel && Array.isArray(this.props.sizes)) {
          bColumn = this.state.sizes;
          if (Array.isArray(bColumn)) {
            if (checkCol) useCellY = bColumn.length;else useCellX = bColumn.length;
          }
        }

        var iLen = bComp.length,
            bOldComp = [],
            compIdx = {};
        for (var i = 0; i < iLen; i++) {
          var currKeyid,
              item = bComp[i];
          if (Array.isArray(item)) {
            // pseudo, newly added
            currKeyid = item[0];item = item[1];
            var props = { key: currKeyid + '' };
            if (item.props['childInline.'] !== undefined) {
              props['keyid.'] = currKeyid;
              props['hookTo.'] = thisWidget; // not react element

              if (isTopmost && item.props['isScenePage.'] && item.props.noShow && !W.__design__) props['isTemplate.'] = true;

              if (currWidgetType != 4) {
                // panel/unit/p, not inline widget
                props.width = item.props.width;
                props.height = item.props.height;
              }

              if (useCellX) props.width = bColumn[i % useCellX]; // bColumn must be Array
              else if (useCellY) props.height = bColumn[i % useCellY];
            }
            bComp[i] = reactClone_(item, props);
          } else {
            currKeyid = item.props['keyid.'];
            bOldComp.push([i, currKeyid]);
          }
          compIdx[currKeyid] = i;
        }

        // third scan: adjust old component: width/height
        var existComps = {};
        for (var i = 0, item; item = bOldComp[i]; i++) {
          var i2 = item[0],
              currKeyid = item[1];
          var currObj = thisWidget[currKeyid];
          currObj = currObj && currObj.component;

          if (currObj) {
            existComps[currKeyid] = currObj;
            if (useCellX) currObj.state.width = bColumn[i2 % useCellX];else if (useCellY) currObj.state.height = bColumn[i2 % useCellY];
          }
        }
        gui.removeNum += iNewRmv;
        gui.comps = bComp;
        gui.compIdx = compIdx; // child components re-indexed

        if (gui.inSync) {
          // still in syncProps_()
          if (callback || isTopmost) {
            setTimeout(function () {
              doCallback();
            }, 0);
          }
          // else, nothing to process
        } else {
          var newId = chooseIdentical_(this.state.id__);
          this.setState({ id__: newId }, doCallback);
        }
      } else {
        doCallback();
      }

      function getKeyidProp(ele) {
        var keyid,
            sKey = getElementKey_(ele);
        var iNewest = iOldRmv + iNewRmv + bComp.length,
            isNum = false;
        if (sKey) {
          var iTmp = parseInt(sKey);
          if (iTmp + '' === sKey) {
            isNum = true;
            keyid = iTmp;
          } else keyid = sKey;
        } else {
          keyid = iNewest;
          isNum = true;
        }

        if (isNum && (keyid < 0 || keyid > iNewest)) {
          utils.instantShow('warning: invalid keyid (' + keyid + ')');
          keyid = iNewest;
        }
        return [isNum && keyid == iNewest, keyid];
      }
    }
  }, {
    key: 'prepareState',
    value: function prepareState() {
      // only for panel/unit/paragraph
      function percentPx(parentWd, WD, noNeg) {
        var wd = WD || 0; // ensure it is number  // null --> 0

        if (wd >= 1 || wd == 0) return wd;else if (wd <= -1) return noNeg ? 0 : wd;else if (typeof parentWd != 'number') return null;else if (wd >= 0.9999) // 100%
          return parentWd;else if (wd >= 0) return wd * parentWd;else {
          if (noNeg) return 0;
          if (wd > -0.9999) return wd * parentWd;else return -parentWd; // -100%
        }
      }

      function toCssString(WD, perAsZero, noNeg) {
        if (WD === null) return '';else if (WD >= 1) return WD + 'px';else {
          if (WD == 0 || noNeg && WD < 0) return '0';
          if (WD <= -1) return WD + 'px';

          if (perAsZero) return '0';
          if (WD >= 0.9999) return '100%';else if (WD <= -0.9999) return '-100%';else return WD * 100 + '%';
        }
      }

      function percentPx2(parentWd, WD, perAsZero, noNeg) {
        if (WD === null || WD >= 1) return WD;else {
          if (WD == 0 || noNeg && WD < 0) return 0;
          if (WD <= -1) return WD;

          if (typeof parentWd != 'number') return null;

          if (perAsZero) return 0;
          if (WD >= 0.9999) return parentWd;else if (WD <= -0.9999) return -parentWd;else return WD * parentWd;
        }
      }

      var parentWd = this.state.parentWidth,
          parentHi = this.state.parentHeight;
      var parentWdAuto = typeof parentWd != 'number',
          parentHiAuto = typeof parentHi != 'number';
      var wgtPadding = this.state.padding,
          wgtBorder = this.state.borderWidth,
          wgtMargin = this.state.margin;
      var iLeft = null,
          iTop = null;
      if (typeof this.state.left == 'number') iLeft = percentPx(parentWd, this.state.left, false);
      if (typeof this.state.top == 'number') iTop = percentPx(parentHi, this.state.top, false);

      var bPad0 = [0, 0, 0, 0],
          bBrd0 = [0, 0, 0, 0],
          bMrg0 = [0, 0, 0, 0],
          style0 = {};
      if (parentWdAuto) {
        wgtPadding.forEach(function (item, idx) {
          style0['padding' + direct_list_[idx]] = toCssString(item, false, true); // maybe ''
        });
        wgtBorder.forEach(function (item, idx) {
          style0['border' + direct_list_[idx] + 'Width'] = toCssString(item, true, true); // maybe ''
        });
        wgtMargin.forEach(function (item, idx) {
          style0['margin' + direct_list_[idx]] = toCssString(item, false, false); // maybe ''
        });
      } else {
        wgtPadding.forEach(function (item, idx) {
          var iTmp = percentPx2(parentWd, item, false, true);
          style0['padding' + direct_list_[idx]] = iTmp === null ? '' : iTmp + 'px';
          bPad0[idx] = iTmp || 0;
        });

        wgtBorder.forEach(function (item, idx) {
          var iTmp = percentPx2(parentWd, item, true, true);
          style0['border' + direct_list_[idx] + 'Width'] = iTmp === null ? '' : iTmp + 'px';
          bBrd0[idx] = iTmp || 0;
        });

        wgtMargin.forEach(function (item, idx) {
          var iTmp = percentPx2(parentWd, item, false, false);
          style0['margin' + direct_list_[idx]] = iTmp === null ? '' : iTmp + 'px';
          bMrg0[idx] = iTmp || 0;
        });
      }

      var currWdgt = this.widget,
          gui = this.$gui,
          ownerObj = null;
      var minWd = this.state.minWidth,
          maxWd = this.state.maxWidth;
      var minHi = this.state.minHeight,
          maxHi = this.state.maxHeight;
      var thisWd = this.state.width,
          thisHi = this.state.height;
      var cssWd = null,
          wdAuto = typeof thisWd != 'number' ? true : thisWd >= 1 || thisWd == 0 ? false : parentWdAuto;
      var cssHi = null,
          hiAuto = typeof thisHi != 'number' ? true : thisHi >= 1 || thisWd == 0 ? false : parentHiAuto;
      var wdChanged = false,
          hiChanged = false;
      if (!wdAuto) {
        var wd = null;
        if (thisWd < 0) {
          // negative percent
          ownerObj = this.parentOf(true);
          if (ownerObj) {
            var iSpared = ownerObj.$gui.sparedX;
            if (typeof iSpared == 'number') wd = iSpared * (0 - thisWd);
          } else ownerObj = undefined;
        } else wd = percentPx(parentWd, thisWd, true);

        if (typeof wd != 'number') wdAuto = true; // cssWd = null;  // wdChanged = false
        else {
            if (minWd && wd < minWd) wd = minWd;
            if (maxWd && wd > maxWd) wd = maxWd;
            // cssWd = wd;
            cssWd = wd - bPad0[3] - bPad0[1] - bBrd0[3] - bBrd0[1];
            if (cssWd < 0) cssWd = null; // wdChanged = false
            else if (gui.cssWidth !== cssWd) wdChanged = true;
          }
      } // else, take turning to auto as no resizing 
      if (!hiAuto) {
        var hi = null;
        if (thisHi < 0) {
          // negative percent
          if (ownerObj === null) ownerObj = this.parentOf(true);
          if (ownerObj) {
            var iSpared = ownerObj.$gui.sparedY;
            if (typeof iSpared == 'number') hi = iSpared * (0 - thisHi);
          } else ownerObj = undefined;
        } else hi = percentPx(parentHi, thisHi, true);
        if (typeof hi != 'number') hiAuto = true; // cssHi = null;  // hiChanged = false
        else {
            if (minHi && hi < minHi) hi = minHi;
            if (maxHi && hi > maxHi) hi = maxHi;
            // cssHi = hi;
            cssHi = hi - bPad0[0] - bPad0[2] - bBrd0[0] - bBrd0[2];
            if (cssHi < 0) cssHi = null; // hiChanged = false
            else if (gui.cssHeight !== cssHi) hiChanged = true;
          }
      } // else, take turning to auto as no resizing
      if (minWd) minWd = Math.max(0, minWd - bPad0[3] - bPad0[1] - bBrd0[3] - bBrd0[1]);
      if (maxWd) maxWd = Math.max(0, maxWd - bPad0[3] - bPad0[1] - bBrd0[3] - bBrd0[1]);
      if (minHi) minHi = Math.max(0, minHi - bPad0[0] - bPad0[2] - bBrd0[0] - bBrd0[2]);
      if (maxHi) maxHi = Math.max(0, maxHi - bPad0[0] - bPad0[2] - bBrd0[0] - bBrd0[2]);

      gui.cssWidth = cssWd; // null for 'auto'
      gui.cssHeight = cssHi;

      var spareChanged = gui.respared;
      gui.respared = false;

      if (currWdgt && (gui.isPanel || currWdgt === topmostWidget_)) {
        // only for panel and topmost, others ignore
        if (wdChanged || hiChanged || spareChanged || utils.dragInfo.justResized) {
          // spared space only can be caculated when cssWidth/cssHeight ready
          if (gui.useSparedX) {
            // must !useSparedY
            if (wdChanged || spareChanged) {
              gui.sparedX = getSparedPixel_(this, currWdgt, true, cssWd); // caculate even if unhooked
              spareChanged = true;
            }
          } else if (gui.useSparedY) {
            // must !useSparedX
            if (hiChanged || spareChanged) {
              gui.sparedY = getSparedPixel_(this, currWdgt, false, cssHi); // caculate even if unhooked
              spareChanged = true;
            }
          }
          if (this.isHooked || spareChanged) {
            // if !this.isHooked, but any child use spared space also can triggle 
            var self = this;
            setTimeout(function () {
              // perform in next event loop
              if (self.isHooked) propagateResizing_(self, utils.dragInfo.inDragging);
            }, 0); // first render() not hooked, while hook is ready at next tick
          }
        }
      }

      var dStyle = Object.assign({}, this.state.style, style0); // copy state.style for shallowEqual() always correct
      if (typeof iLeft != 'number') delete dStyle.left; // as 'auto'
      else dStyle.left = iLeft + 'px';
      if (typeof iTop != 'number') delete dStyle.top;else dStyle.top = iTop + 'px';

      if (wdAuto) delete dStyle.width; // as 'auto'
      else dStyle.width = cssWd + bPad0[3] + bPad0[1] + bBrd0[3] + bBrd0[1] + 'px'; // box-sizing:border-box
      if (hiAuto) delete dStyle.height;else dStyle.height = cssHi + bPad0[0] + bPad0[2] + bBrd0[0] + bBrd0[2] + 'px';

      if (minWd) dStyle.minWidth = minWd + 'px';else delete dStyle.minWidth;
      if (maxWd) dStyle.maxWidth = maxWd + 'px';else delete dStyle.maxWidth;
      if (minHi) dStyle.minHeight = minHi + 'px';else delete dStyle.minHeight;
      if (maxHi) dStyle.maxHeight = maxHi + 'px';else delete dStyle.maxHeight;
      this.state.style = dStyle;

      var bRet = [];
      gui.comps.forEach(function (item) {
        if (item) bRet.push(item);
      });
      return bRet; // return copied-array
    }
  }, {
    key: 'render',
    value: function render() {
      // TWidget_.render() should not be overrided by inherited class
      syncProps_(this);
      if (this['hide.']) return null; // as <noscript>

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      var bChild = this.prepareState();
      var props = setupRenderProp_(this),
          insEle = this.$gui.insertEle;
      if (insEle) bChild = middleClone_(insEle, bChild);
      return reactCreate_(sTag, props, bChild);
    }
  }]);

  return TWidget_;
}();

T.Widget_ = TWidget_;

function nodesDualFn_(value, oldValue) {
  if (!Array.isArray(value)) return; // fatal error
  // this.state.nodes = value;        // must be auto assigned
  resetNodes(this, value, oldValue); // old value must be array

  function resetNodes(comp, value, oldValue) {
    // step 1: try load json-x, direct change `value`
    var bNewKey = [],
        bNewEle = [];
    for (var i = value.length - 1; i >= 0; i--) {
      var item = value[i];
      if (!Array.isArray(item)) continue;
      var sKey = item[0],
          ele = item[1];
      if (!sKey || typeof sKey != 'string' || !ele) {
        value.splice(i, 1); // direct change `value`
        continue;
      }

      if (typeof ele == 'string') {
        ele = item[1] = reactCreate_(P__, { key: sKey, 'keyid.': sKey, 'html.': ele });
        bNewKey.unshift(sKey);
        bNewEle.unshift(ele);
      } else if (reactIsValid_(ele)) {
        if (ele.props['keyid.'] !== sKey) ele = item[1] = reactClone_(ele, { key: sKey, 'keyid.': sKey });
        bNewKey.unshift(sKey);
        bNewEle.unshift(ele);
      } else {
        if (Array.isArray(ele) && ele[0]) {
          // not static node
          ele = utils.loadElement(ele);
          if (ele) {
            if (ele.props['keyid.'] !== sKey) ele = reactClone_(ele, { key: sKey, 'keyid.': sKey });
            item[1] = ele;
            bNewKey.unshift(sKey);
            bNewEle.unshift(ele);
            continue; // success
          }
        }
        value.splice(i, 1);
      }
    }

    if (W.__design__) return; // avoid calling setChild() when in __design__

    // step 2: scan remove items
    var bArg = [];
    for (var i = oldValue.length - 1; i >= 0; i--) {
      // oldValue must be array
      var item = oldValue[i],
          sKey = item[0];
      if (bNewKey.indexOf(sKey) < 0) bArg.unshift('-' + sKey);
    }

    // step 3: apply remove and set
    bArg = bArg.concat(bNewEle);
    if (bArg.length) {
      setTimeout(function () {
        comp.setChild.apply(comp, bArg);
      }, 0);
    }
  }
}

var TBodyPanel_ = function (_TWidget_) {
  _inherits(TBodyPanel_, _TWidget_);

  function TBodyPanel_(name, desc) {
    _classCallCheck(this, TBodyPanel_);

    return _possibleConstructorReturn(this, (TBodyPanel_.__proto__ || Object.getPrototypeOf(TBodyPanel_)).call(this, name || 'BodyPanel', desc));
  }

  _createClass2(TBodyPanel_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TBodyPanel_.prototype.__proto__ || Object.getPrototypeOf(TBodyPanel_.prototype), 'getDefaultProps', this).call(this);
      dProp.className = 'rewgt-unit';
      dProp['keyid.'] = 'body';
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TBodyPanel_.prototype.__proto__ || Object.getPrototypeOf(TBodyPanel_.prototype), 'getInitialState', this).call(this);

      this.defineDual('innerSize', function (value, oldValue) {
        throw new Error('duals.innerSize is readonly');
      }, [dState.parentWidth, dState.parentHeight]);
      this.defineDual('nodes', nodesDualFn_, []);

      return dState;
    }
  }, {
    key: 'renewPages',
    value: function renewPages() {
      if (W.__design__ || !this.isHooked || !utils.pageCtrl) return;

      var comps = this.$gui.comps,
          wdgt = this.widget,
          bNew = [];
      comps.forEach(function (child) {
        if (!child || !child.props['isScenePage.'] || child.props.noShow) return;
        var sKey = getElementKey_(child),
            comp = sKey && wdgt[sKey];
        comp = comp && comp.component;
        if (comp) bNew.push([sKey, comp]); // sKey maybe 'number'
      });

      var beRenew = false,
          oldKeys = utils.pageCtrl.keys; // pageCtrl.keys must defined
      if (oldKeys.length != bNew.length) beRenew = true;else {
        for (var i = 0, item; item = oldKeys[i]; i++) {
          if (item !== bNew[i][0]) {
            beRenew = true;
            break;
          }
        }
      }
      if (beRenew) {
        setTimeout(function () {
          utils.pageCtrl.renewPages(bNew);
        }, 0);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TBodyPanel_.prototype.__proto__ || Object.getPrototypeOf(TBodyPanel_.prototype), 'componentDidMount', this).call(this);

      var gui = this.$gui;
      if (gui.onWinResize) window.addEventListener('resize', gui.onWinResize, false);

      var node = findDomNode_(this);
      if (node) keyOfNode_(node); // try install getKeyFromNode_
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var gui = this.$gui;
      if (gui.onWinResize) {
        window.removeEventListener('resize', gui.onWinResize, false);
        gui.onWinResize = null;
      }

      _get(TBodyPanel_.prototype.__proto__ || Object.getPrototypeOf(TBodyPanel_.prototype), 'componentWillUnmount', this).call(this);
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.widget !== topmostWidget_) console.log('warning: BodyPanel only can be topmost widget.');
      return _get(TBodyPanel_.prototype.__proto__ || Object.getPrototypeOf(TBodyPanel_.prototype), 'render', this).call(this);
    }
  }]);

  return TBodyPanel_;
}(TWidget_);

T.BodyPanel_ = TBodyPanel_;
T.BodyPanel = new TBodyPanel_();

var TPanel_ = function (_TWidget_2) {
  _inherits(TPanel_, _TWidget_2);

  function TPanel_(name, desc) {
    _classCallCheck(this, TPanel_);

    return _possibleConstructorReturn(this, (TPanel_.__proto__ || Object.getPrototypeOf(TPanel_)).call(this, name || 'Panel', desc));
  }

  _createClass2(TPanel_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TPanel_.prototype.__proto__ || Object.getPrototypeOf(TPanel_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      var sPerPixel = '[any]: null for auto, 0~1 for percent, 0.9999 for 100%, N pixels, -0.xx for spared percent';
      var bWd = dSchema.width,
          bHi = dSchema.height;
      if (bWd) bWd[3] = sPerPixel;
      if (bHi) bHi[3] = sPerPixel;
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TPanel_.prototype.__proto__ || Object.getPrototypeOf(TPanel_.prototype), 'getDefaultProps', this).call(this);
      dProp.className = 'rewgt-panel';
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TPanel_.prototype.__proto__ || Object.getPrototypeOf(TPanel_.prototype), 'getInitialState', this).call(this);
      this.defineDual('nodes', nodesDualFn_, []);
      return dState;
    }
  }, {
    key: 'isRow',
    value: function isRow() {
      return !hasClass_(this.props.className + ' ' + this.state.klass, ['col-reverse', 'reverse-col']);
    }
  }, {
    key: 'isReverse',
    value: function isReverse() {
      return hasClass_(this.props.className + ' ' + this.state.klass, ['reverse-row', 'reverse-col']);
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.state['tagName.']) console.log('warning: Panel can not be virtual widget.');
      return _get(TPanel_.prototype.__proto__ || Object.getPrototypeOf(TPanel_.prototype), 'render', this).call(this);
    }
  }]);

  return TPanel_;
}(TWidget_);

T.Panel_ = TPanel_;
T.Panel = new TPanel_();

var TUnit_ = function (_TWidget_3) {
  _inherits(TUnit_, _TWidget_3);

  function TUnit_(name, desc) {
    _classCallCheck(this, TUnit_);

    return _possibleConstructorReturn(this, (TUnit_.__proto__ || Object.getPrototypeOf(TUnit_)).call(this, name || 'Unit', desc));
  }

  _createClass2(TUnit_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TUnit_.prototype.__proto__ || Object.getPrototypeOf(TUnit_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      var sPerPixel = '[any]: null for auto, 0~1 for percent, 0.9999 for 100%, N pixels, -0.xx for spared percent';
      var bWd = dSchema.width,
          bHi = dSchema.height;
      if (bWd) bWd[3] = sPerPixel;
      if (bHi) bHi[3] = sPerPixel;
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TUnit_.prototype.__proto__ || Object.getPrototypeOf(TUnit_.prototype), 'getDefaultProps', this).call(this);
      dProp.className = 'rewgt-unit'; // TUnit default not spead resizing event
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TUnit_.prototype.__proto__ || Object.getPrototypeOf(TUnit_.prototype), 'getInitialState', this).call(this);
      if (isUnderBody_(this)) // direct under W.body
        this.duals.style = Object.assign({}, this.props.style, { position: 'absolute' });
      return dState;
    }
  }]);

  return TUnit_;
}(TWidget_);

T.Unit_ = TUnit_;
T.Unit = new TUnit_();

var TSplitDiv_ = function (_TUnit_) {
  _inherits(TSplitDiv_, _TUnit_);

  function TSplitDiv_(name, desc) {
    _classCallCheck(this, TSplitDiv_);

    var _this4 = _possibleConstructorReturn(this, (TSplitDiv_.__proto__ || Object.getPrototypeOf(TSplitDiv_)).call(this, name || 'SplitDiv', desc));

    _this4._defaultProp.width = 4;
    _this4._defaultProp.height = 4;
    // _statedProp, _silentProp, _defaultProp no change
    return _this4;
  }

  _createClass2(TSplitDiv_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TSplitDiv_.prototype.__proto__ || Object.getPrototypeOf(TSplitDiv_.prototype), 'getDefaultProps', this).call(this);
      dProp.width = 4;
      dProp.height = 4;
      return dProp;
    }
  }, {
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TSplitDiv_.prototype.__proto__ || Object.getPrototypeOf(TSplitDiv_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      var sPerPixel = '[number]: 0~1 for percent, 0.9999 for 100%, N pixels';
      dSchema.width = [iLevel + 1, 'number', null, sPerPixel];
      dSchema.height = [iLevel + 2, 'number', null, sPerPixel];
      return dSchema;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TSplitDiv_.prototype.__proto__ || Object.getPrototypeOf(TSplitDiv_.prototype), 'getInitialState', this).call(this);

      this.$gui.comps = []; // force not using child element
      var owner = this.parentOf(true),
          wdgt = this.widget;
      if (!owner) {
        utils.instantShow('error: no owner widget for SplitDiv');
        return dState;
      }

      if (!hasClass_(owner.props.className, 'rewgt-panel')) {
        // warning: can not add SplitDiv in topmost panel
        utils.instantShow('error: owner of widget (' + wdgt.getPath() + ') is not rewgt-panel');
        return dState;
      }

      var inRow = true;
      if (hasClass_(owner.props.className + ' ' + owner.props.klass, ['col-reverse', 'reverse-col'])) inRow = false; // else, inRow = true  // fixed, not changing
      Object.assign(this.$gui, { inRow: inRow, reversed: false,
        inDrag: false, dragStartX: 0, dragStartY: 0,
        resizeOwner: undefined, resizeTarg: undefined, sizingFunc: null
      });

      this.defineDual('id__', function (value, oldValue) {
        if (oldValue != 1) return; // ignore none-first-render

        var dState = this.state;
        if (inRow) {
          if (typeof dState.width != 'number' || dState.width < 1) dState.width = 4; // default 4px
          if (dState.width >= 1) {
            dState.minWidth = dState.width; // set minWidth/maxWidth to fix size
            dState.maxWidth = dState.width;
          }
          if (this.props.height >= 1 && this.props.height <= 4) dState.height = 0.9999; // 100%
          if (this.props.minHeight === undefined) dState.minHeight = 10; // default 10px
        } else {
          if (typeof dState.height != 'number' || dState.height < 1) dState.height = 4; // default 4px
          if (dState.height >= 1) {
            dState.minHeight = dState.height;
            dState.maxHeight = dState.height;
          }
          if (this.props.width >= 1 && this.props.width <= 4) dState.width = 0.9999; // 100%
          if (this.props.minWidth === undefined) dState.minWidth = 10; // default 10px
        }

        var initStyle = { cursor: inRow ? 'ew-resize' : 'ns-resize' };
        var hasBackground = false;
        for (var sKey in dState.style) {
          if (sKey.indexOf('background') == 0) {
            hasBackground = true;
            break;
          }
        }
        if (!hasBackground) initStyle.backgroundColor = '#ddd'; // set default background color
        dState.style = Object.assign({}, dState.style, initStyle);
      });

      return dState;
    }
  }, {
    key: '$$onMouseDown',
    value: function $$onMouseDown(event) {
      var self = this,
          gui = this.$gui;

      function oneResizeStep(clientX, clientY) {
        var owner = gui.resizeOwner,
            targ = gui.resizeTarg;
        if (!owner || !targ) return;

        var updated = false,
            iNewX = -1,
            iNewY = -1;
        if (gui.inRow) {
          iNewX = targ.state.width;
          var detaX = clientX - gui.dragStartX;

          if (detaX != 0) {
            // ele.state.width must >= 1
            var wdMin = targ.state.minWidth,
                wdMax = targ.state.maxWidth;
            var wd = iNewX < 1 ? iNewX * targ.state.parentWidth : iNewX;
            iNewX = gui.reversed ? wd - detaX : wd + detaX;
            if (wdMin && iNewX < wdMin) iNewX = wdMin;
            if (wdMax && iNewX > wdMax) iNewX = wdMax;
            if (iNewX < 1) iNewX = 1; // avoid change to percent

            if (iNewX != wd) {
              var child,
                  deta2 = iNewX - wd;
              if (gui.reversed) deta2 = -deta2;
              if (deta2 != detaX) clientX += deta2 - detaX;
              gui.dragStartX = clientX;
              gui.dragStartY = clientY;

              if (gui.sizingFunc) gui.sizingFunc(targ, iNewX, iNewY, !gui.inDrag);else {
                targ.state.width = iNewX; // maybe change percent to pixel
                renewWidgetSpared_(owner, !gui.inDrag, function () {
                  targ.reRender();
                });
              }

              updated = true;
            }
          }
        } else {
          iNewY = targ.state.height;
          var detaY = clientY - gui.dragStartY;

          if (detaY != 0) {
            var hiMin = targ.state.minHeight,
                hiMax = targ.state.maxHeight;
            var hi = iNewY < 1 ? iNewY * targ.state.parentHeight : iNewY;
            iNewY = gui.reversed ? hi - detaY : hi + detaY;
            if (hiMin && iNewY < hiMin) iNewY = hiMin;
            if (hiMax && iNewY > hiMax) iNewY = hiMax;
            if (iNewY < 1) iNewY = 1; // avoid change to percent

            if (iNewY != hi) {
              var child,
                  deta2 = iNewY - hi;
              if (gui.reversed) deta2 = -deta2;
              if (deta2 != detaY) clientY += deta2 - detaY;
              gui.dragStartX = clientX;
              gui.dragStartY = clientY;

              if (gui.sizingFunc) gui.sizingFunc(targ, iNewX, iNewY, !gui.inDrag);else {
                targ.state.height = iNewY; // maybe change percent to pixel
                renewWidgetSpared_(owner, !gui.inDrag, function () {
                  targ.reRender();
                });
              }

              updated = true;
            }
          }
        }

        if (!updated && !gui.inDrag && (iNewX >= 1 || iNewY >= 1)) {
          // mouseup
          if (gui.sizingFunc) gui.sizingFunc(targ, iNewX, iNewY, true); // one of iNewX/iNewY should be -1
          else {
              renewWidgetSpared_(owner, true, function () {
                targ.reRender();
              }); // force update sparedX/sparedY
            }
        }
      }

      function whenMouseMove(event) {
        if (!gui.inDrag) {
          var ownerObj = self.parentOf(true);
          if (!ownerObj || !ownerObj.$gui.isPanel) return; // SplitDiv only worked in panel
          if (Array.isArray(ownerObj.props.sizes)) return; // SplitDiv can not used under GridPanel

          var moved = false,
              inRow = gui.inRow;
          if (inRow) {
            if (Math.abs(event.clientX - gui.dragStartX) >= 4) moved = true;
          } else {
            if (Math.abs(event.clientY - gui.dragStartY) >= 4) moved = true;
          }

          if (moved) {
            var prevObj = self.prevSibling();
            while (prevObj) {
              var wd = inRow ? prevObj.state.width : prevObj.state.height;
              var wdMin = inRow ? prevObj.state.minWidth : prevObj.state.minHeight;
              var wdMax = inRow ? prevObj.state.maxWidth : prevObj.state.maxHeight;
              if (typeof wd == 'number' && wd > 0 && (wdMin == 0 || wdMax == 0 || wdMin != wdMax)) {
                gui.reversed = hasClass_(ownerObj.props.className + ' ' + ownerObj.state.klass, ['reverse-row', 'reverse-col']);
                gui.resizeOwner = ownerObj;
                gui.resizeTarg = prevObj;
                gui.inDrag = true;
                utils.dragInfo.inDragging = true;
                break;
              }
              prevObj = prevObj.prevSibling();
            }

            var ownerObj2_;
            if (!gui.inDrag && !self.nextSibling() && (ownerObj2_ = ownerObj.parentOf(true))) {
              if (ownerObj.$gui.sparedTotal > 0.989 && ownerObj.$gui.sparedTotal <= 1.01) {
                // ownerObj2_.$gui.isPanel
                var wd = inRow ? ownerObj.state.width : ownerObj.state.height;
                var wdMin = inRow ? ownerObj.state.minWidth : ownerObj.state.minHeight;
                var wdMax = inRow ? ownerObj.state.maxWidth : ownerObj.state.maxHeight;
                if (typeof wd == 'number' && wd > 0 && wd != 0.9999 && (wdMin == 0 || wdMax == 0 || wdMin != wdMax)) {
                  gui.reversed = hasClass_(ownerObj2_.props.className + ' ' + ownerObj2_.state.klass, ['reverse-row', 'reverse-col']);
                  gui.resizeOwner = ownerObj2_;
                  gui.resizeTarg = ownerObj;
                  gui.inDrag = true;
                  utils.dragInfo.inDragging = true;
                }
                // else, wd maybe 0.9999 for nested-SplitDiv

                // maybe row-SplitDiv and col-SplitDiv is nested, check up level
                if (!gui.inDrag && typeof wd == 'number' && wd > 0 && ownerObj2_.$gui.sparedTotal > 0.989 && ownerObj2_.$gui.sparedTotal <= 1.01) {
                  var ownerObj3_ = ownerObj2_.parentOf(true);
                  if (ownerObj3_) {
                    // ownerObj3_.$gui.isPanel
                    var wd = inRow ? ownerObj2_.state.width : ownerObj2_.state.height;
                    var wdMin = inRow ? ownerObj2_.state.minWidth : ownerObj2_.state.minHeight;
                    var wdMax = inRow ? ownerObj2_.state.maxWidth : ownerObj2_.state.maxHeight;
                    if (typeof wd == 'number' && wd > 0 && wd != 0.9999 && (wdMin == 0 || wdMax == 0 || wdMin != wdMax)) {
                      gui.reversed = hasClass_(ownerObj3_.props.className + ' ' + ownerObj3_.state.klass, ['reverse-row', 'reverse-col']);
                      gui.resizeOwner = ownerObj3_;
                      gui.resizeTarg = ownerObj2_;
                      gui.inDrag = true;
                      utils.dragInfo.inDragging = true;
                    }
                  }
                }

                if (gui.inDrag) {
                  var fn = gui.resizeOwner.$gui.onCellSizing;
                  if (fn) gui.sizingFunc = fn; // under GridPanel
                }
              }
            }
          }
        }

        if (gui.inDrag) {
          event.stopPropagation();
          oneResizeStep(event.clientX, event.clientY);
        }
      }

      function whenMouseUp(event) {
        utils.dragInfo.inDragging = false;
        gui.inDrag = false;
        setTimeout(function () {
          splitterMouseDn_ = false;
        }, 300);
        document.removeEventListener('mousemove', whenMouseMove);
        document.removeEventListener('mouseup', whenMouseUp);

        event.stopPropagation();
        oneResizeStep(event.clientX, event.clientY);

        gui.resizeOwner = null;
        gui.resizeTarg = null;
        gui.sizingFunc = null;
      }

      gui.dragStartX = event.clientX;
      gui.dragStartY = event.clientY;
      gui.inDrag = false;
      splitterMouseDn_ = true;

      document.addEventListener('mouseup', whenMouseUp, false);
      document.addEventListener('mousemove', whenMouseMove, false);

      event.stopPropagation();
      if (this.$onMouseDown) this.$onMouseDown(event);
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      if (W.__design__) event.stopPropagation(); // avoid passing click to parent, make it draggable

      if (this.$onClick) this.$onClick(event);
    }
  }]);

  return TSplitDiv_;
}(TUnit_);

T.SplitDiv_ = TSplitDiv_;
T.SplitDiv = new TSplitDiv_();

var TGridPanel_ = function (_TPanel_) {
  _inherits(TGridPanel_, _TPanel_);

  function TGridPanel_(name, desc) {
    _classCallCheck(this, TGridPanel_);

    return _possibleConstructorReturn(this, (TGridPanel_.__proto__ || Object.getPrototypeOf(TGridPanel_)).call(this, name || 'GridPanel', desc));
  }

  _createClass2(TGridPanel_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TGridPanel_.prototype.__proto__ || Object.getPrototypeOf(TGridPanel_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.sizes = [iLevel + 1, 'any', null, '[any]: [0.2,0.3,-0.4,-0.6], negative value stand for left space'];
      dSchema.cellSpacing = [iLevel + 2, 'number', null, '[number]: 0,1,2,...'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TGridPanel_.prototype.__proto__ || Object.getPrototypeOf(TGridPanel_.prototype), 'getDefaultProps', this).call(this);
      // dProp['tagName.'] = 'div';  // default is 'div'
      dProp.sizes = [0.3, 0.3, -1];
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TGridPanel_.prototype.__proto__ || Object.getPrototypeOf(TGridPanel_.prototype), 'getInitialState', this).call(this);
      if (!Array.isArray(this.props.sizes)) return dState;

      var gui = this.$gui;
      gui.inRow = !hasClass_(gui.className + ' ' + this.props.klass, ['col-reverse', 'reverse-col']);

      this.defineDual('cellSpacing', function (value, oldValue) {
        if (gui.comps.length && (gui.useSparedX || gui.useSparedY)) gui.respared = true; // re-caculate spared space in prepareState()
      });

      dState.sizes = null;
      this.defineDual('sizes', function (value, oldValue) {
        if (Array.isArray(value)) {
          value = this.state.sizes = value.slice(0);

          var hasAuto = false,
              hasNeValue = false,
              sparedTotal = 0;
          var isTopmost = this.widget === topmostWidget_;
          if (isTopmost || !gui.isPanel) {
            value.splice(0);
            hasAuto = true;
            if (isTopmost) console.log('error: only none-topmost panel can use props.sizes');
          }

          for (var i = value.length - 1; i >= 0; i--) {
            var item = value[i];
            if (typeof item != 'number' || isNaN(item)) {
              value[i] = null;
              hasAuto = true;
            } else if (item < 0) {
              hasNeValue = true;
              sparedTotal += -item;
            }
          }

          var checkRow = false,
              checkCol = false;
          if (hasClass_(this.props.className + ' ' + this.state.klass, ['col-reverse', 'reverse-col'])) checkCol = true;else checkRow = true;

          var changed = !quickCheckEqual_(value, oldValue);
          if (!hasAuto && hasNeValue && (checkRow || checkCol)) {
            gui.sparedTotal = sparedTotal;
            var oldSparedX = gui.useSparedX,
                oldSparedY = gui.useSparedY;
            if (checkRow) gui.useSparedX = true;else gui.useSparedY = true;

            if (!changed && (oldSparedX != gui.useSparedX || oldSparedY != gui.useSparedY)) changed = true;
          } else {
            gui.sparedTotal = 0;
            gui.useSparedX = false;
            gui.useSparedY = false;
          }

          if (changed) {
            if (gui.comps.length) gui.removeNum += 1; // fire rescan item's width/height adjust
            gui.respared = true; // re-caculate spared space in prepareState()
            this.reRender();
          }
        } else {
          this.state.sizes = null;
          gui.sparedTotal = 0;
          gui.useSparedX = false;
          gui.useSparedY = false;

          if (Array.isArray(oldValue)) {
            if (gui.comps.length) gui.removeNum += 1; // fire rescan spared configure
            this.reRender();
          }
        }
      });

      this.defineDual('childNumId', function (value, oldValue) {
        var bColumn = this.state.sizes,
            useSizes = Array.isArray(bColumn);
        if (useSizes) {
          var idx = 0,
              sizeLen = bColumn.length;
          gui.comps.forEach(function (child, iPos) {
            if (!child) return;

            if (hasClass_(child.props.className, 'rewgt-static')) {
              idx++;return;
            }
            if (child.props['isReference.']) {
              idx++;return;
            }
            if (child.props['childInline.'] === undefined) {
              idx++;return;
            } // pure react element

            var wdHi = bColumn[idx++ % sizeLen];
            if (gui.inRow) {
              if (child.props.width !== wdHi) // wdHi maybe null
                gui.comps[iPos] = reactClone_(child, { width: wdHi });
            } else {
              if (child.props.height !== wdHi) gui.comps[iPos] = reactClone_(child, { height: wdHi });
            }
          });
        }
      });

      gui.onCellSizing = function (targ, iX, iY, isEnd) {
        // if iX/iY is -1 means not changed
        var keyid = targ.$gui.keyid,
            bColumn = this.state.sizes;
        if (!Array.isArray(bColumn)) return; // ignore

        var gui = this.$gui,
            idx = gui.compIdx[keyid],
            ele = null,
            currWdgt = this.widget;
        if (typeof idx == 'number' && idx >= 0) ele = gui.comps[idx];

        if (ele && currWdgt) {
          var columnNum = bColumn.length;
          if (gui.inRow) {
            // response to iX
            if (typeof iX == 'number' && iX >= 0) {
              if (iX < 1) {
                if (typeof gui.cssWidth != 'number') iX = null;else iX = iX * gui.cssWidth;
              }
              var iFrom = idx % columnNum;
              bColumn[iFrom] = iX; // iX maybe null that means auto

              var bList = [];
              for (var sKey in gui.compIdx) {
                var index = gui.compIdx[sKey];
                if (typeof index == 'number' && index >= 0 && index % columnNum == iFrom) {
                  var child = currWdgt[sKey];
                  child = child && child.component;
                  if (child) {
                    child.state.width = iX;
                    bList.push(child);
                  }
                }
              }

              renewWidgetSpared_(this, isEnd, function () {
                // renewWidgetSpared_() only refresh the child which uses sparedX/sparedY
                for (var i = 0, child; child = bList[i]; i++) {
                  child.reRender(); // refresh current colunm
                }
              });
            } else if (typeof iY == 'number' && iY >= 0) {
              // only update one of iX / iY
              var iFrom = Math.floor(idx / columnNum),
                  iEnd = iFrom + columnNum;
              for (var sKey in gui.compIdx) {
                var index = gui.compIdx[sKey];
                if (typeof index == 'number' && index >= iFrom && index < iEnd) {
                  var child = currWdgt[sKey];
                  child = child && child.component;

                  if (child) {
                    var iOld = child.state.height;
                    if (typeof iOld == 'number' && iOld >= 0) {
                      var iMin = child.state.minHeight,
                          iMax = child.state.maxHeight,
                          iValue = iY;
                      if (typeof iY == 'number' && iY < 1) iValue = typeof gui.cssHeight != 'number' ? null : iY * gui.cssHeight;
                      if (iMin && (typeof iValue != 'number' || iValue < iMin)) iValue = iMin;
                      if (iMax && (typeof iValue != 'number' || iValue > iMax)) iValue = iMax;
                      if (iOld !== iValue) child.setState({ height: iValue });
                    }
                  }
                }
              }
            }
          } else {
            // response to iY
            if (typeof iY == 'number' && iY >= 0) {
              if (iY < 1) {
                if (typeof gui.cssHeight != 'number') iY = null;else iY = iY * gui.cssHeight;
              }
              var iFrom = idx % columnNum;
              bColumn[iFrom] = iY; // iY maybe null that means auto

              var bList = [];
              for (var sKey in gui.compIdx) {
                var index = gui.compIdx[sKey];
                if (typeof index == 'number' && index >= 0 && index % columnNum == iFrom) {
                  var child = currWdgt[sKey];
                  child = child && child.component;
                  if (child) {
                    child.state.height = iY;
                    bList.push(child);
                  }
                }
              }

              renewWidgetSpared_(this, isEnd, function () {
                // renewWidgetSpared_() only refresh the child which uses sparedX/sparedY
                for (var i = 0, child; child = bList[i]; i++) {
                  child.reRender(); // refresh current colunm
                }
              });
            } else if (typeof iX == 'number' && iX >= 0) {
              // only update one of iX / iY
              var iFrom = Math.floor(idx / columnNum),
                  iEnd = iFrom + columnNum;
              for (var sKey in gui.compIdx) {
                var index = gui.compIdx[sKey];
                if (typeof index == 'number' && index >= iFrom && index < iEnd) {
                  var child = currWdgt[sKey];
                  child = child && child.component;

                  if (child) {
                    var iOld = child.state.width;
                    if (typeof iOld == 'number' && iOld >= 0) {
                      var iMin = child.state.minWidth,
                          iMax = child.state.maxWidth,
                          iValue = iX;
                      if (typeof iX == 'number' && iX < 1) iValue = typeof gui.cssWidth != 'number' ? null : iX * gui.cssWidth;
                      if (iMin && (typeof iValue != 'number' || iValue < iMin)) iValue = iMin;
                      if (iMax && (typeof iValue != 'number' || iValue > iMax)) iValue = iMax;
                      if (iOld !== iValue) child.setState({ width: iValue });
                    }
                  }
                }
              }
            }
          }
        }
      }.bind(this);

      return dState;
    }
  }, {
    key: 'render',
    value: function render() {
      syncProps_(this);
      if (this['hide.']) return null; // as <noscript>

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      var bChild = this.prepareState();
      if (W.__design__) bChild.push(reactCreate_('div', { key: '$end', title: 'end of GridPanel', style: { width: '100%', height: '10px', backgroundColor: '#eee' } }));
      var props = setupRenderProp_(this),
          insEle = this.$gui.insertEle;
      if (insEle) bChild = middleClone_(insEle, bChild);
      return reactCreate_(sTag, props, bChild);
    }
  }]);

  return TGridPanel_;
}(TPanel_);

T.GridPanel_ = TGridPanel_;
T.GridPanel = new TGridPanel_();

var TTableRow_ = function (_TUnit_2) {
  _inherits(TTableRow_, _TUnit_2);

  function TTableRow_(name, desc) {
    _classCallCheck(this, TTableRow_);

    var _this6 = _possibleConstructorReturn(this, (TTableRow_.__proto__ || Object.getPrototypeOf(TTableRow_)).call(this, name || 'TableRow', desc));

    _this6._silentProp.push('isTableRow.'); // _statedProp no change
    _this6._defaultProp.height = null;
    return _this6;
  }

  _createClass2(TTableRow_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TTableRow_.prototype.__proto__ || Object.getPrototypeOf(TTableRow_.prototype), 'getDefaultProps', this).call(this);
      // dProp['childInline.'] = false;  // default is false
      dProp['tagName.'] = 'tr';
      dProp['isTableRow.'] = true; // only TableRow is allowed under TablePanel
      // dProp.className = 'rewgt-unit'; // default is 'rewgt-unit'
      dProp.height = null; // auto height, row width is fixed to 100%
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TTableRow_.prototype.__proto__ || Object.getPrototypeOf(TTableRow_.prototype), 'getInitialState', this).call(this); // warning: borderWidth/padding/margin should be 0

      if (W.__design__) {
        var self = this;
        this.defineDual('childNumId', function (value, oldValue) {
          var ownerObj = self.parentOf(true);
          if (ownerObj) {
            // ownerObj is TablePanel
            setTimeout(function () {
              ownerObj.reRender(); // fire refresh (tail row updated)
            }, 0);
          }
        });
      }

      return dState;
    }
  }, {
    key: 'render',
    value: function render() {
      // no need call this.prepareState(), row's padding/border/margin is fixed to 0
      var gui = this.$gui,
          oldWd = gui.cssWidth,
          oldHi = gui.cssHeight;
      syncProps_(this);
      if (this['hide.']) return null; // as <noscript>

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      var cssWd = gui.cssWidth = this.state.parentWidth; // fixed to parent size, child will read it
      var wdAuto = typeof cssWd != 'number' || cssWd < 0;
      var cssHi = this.state.parentHeight,
          hi = this.state.height,
          hiAuto = typeof hi != 'number' || hi < 0;
      if (!hiAuto) {
        if (hi >= 1) cssHi = gui.cssHeight = hi; // hiAuto = false
        else {
            if (typeof cssHi == 'number') {
              if (hi >= 0.9999) {
                gui.cssHeight = cssHi; // 100%, same as parent height
                if (typeof cssHi != 'number' || cssHi < 0) hiAuto = true; // change hiAuto
              } else cssHi = gui.cssHeight = cssHi * hi;
            } else {
              cssHi = gui.cssHeight = null; // hi < 1 && parent_is_auto
              hiAuto = true;
            }
          }
      } else cssHi = gui.cssHeight = null; // hiAuto = true

      var wdChanged = oldWd !== cssWd,
          thisWdgt = this.widget;
      var bComp = this.$gui.comps,
          bChild = []; // bChild record all td
      bComp.forEach(function (cell) {
        if (!cell) return;
        var sKey = getElementKey_(cell);
        if (!sKey) return;

        // td's key reuse child's keyid, since order of same td may changed
        var wd, hi, colSpan, rowSpan;
        var tdStyle,
            cellObj = thisWdgt && thisWdgt[sKey];
        cellObj = cellObj && cellObj.component;
        if (cellObj) {
          wd = cellObj.state.width;hi = cellObj.state.height;
          colSpan = cellObj.state.colSpan;rowSpan = cellObj.state.rowSpan;
          tdStyle = cellObj.state.tdStyle;
        } else {
          wd = cell.props.width;hi = cell.props.height;
          colSpan = cell.props.colSpan;rowSpan = cell.props.rowSpan;
          tdStyle = cell.props.tdStyle;
        }

        var keyid = sKey,
            iTmp = parseInt(sKey);
        if (iTmp + '' === sKey) keyid = iTmp;
        var dTdProp = { key: sKey, 'keyid.': keyid };
        colSpan = parseInt(colSpan); // maybe NaN when parseInt(undefined)
        rowSpan = parseInt(rowSpan);
        if (colSpan) dTdProp.colSpan = colSpan + '';
        if (rowSpan) dTdProp.rowSpan = rowSpan + '';

        var cellWd = null,
            cellHi = null,
            hiChanged = false,
            tdHiAuto = hiAuto;
        if (typeof wd == 'number' && wd >= 0) {
          cellWd = wd; // according to TableRow (not td)
          dTdProp.style = { width: wd >= 1 ? wd + 'px' : wd >= 0.9999 ? '100%' : wd * 100 + '%' };
        }
        // else, cellWd = null;

        if ((typeof tdStyle === 'undefined' ? 'undefined' : _typeof(tdStyle)) == 'object') dTdProp.style = Object.assign(dTdProp.style || {}, tdStyle);

        if (typeof hi == 'number' && hi >= 0) {
          if (hi >= 1) {
            cellHi = hi;
            tdHiAuto = false;
          } else {
            // hi: [0,1)
            if (hiAuto) hiChanged = true; // cellHi = null; tdHiAuto = true;
            else cellHi = hi; // hi is percent
          }
        } else tdHiAuto = true; // cellHi = null
        if (wdChanged && cellWd !== null || hiChanged) cell = reactClone_(cell, { width: cellWd, height: cellHi });

        bChild.push(reactCreate_('td', dTdProp, cell));
      });

      if (this.isHooked) {
        if (!wdAuto && oldWd !== cssWd || !hiAuto && oldHi !== cssHi || utils.dragInfo.justResized) {
          var self = this;
          setTimeout(function () {
            propagateResizing_(self, utils.dragInfo.inDragging);
          }, 0); // in next tick, change table first (maybe columns changed)
        }
      }

      var dStyle = Object.assign({}, this.state.style);
      if (!hiAuto && cssHi >= 0) // add style.height, ignore style.width
        dStyle.height = cssHi + 'px'; // cssHi is cssHeight (in 'px')
      else delete dStyle.height;

      var props = setupRenderProp_(this, dStyle),
          insEle = gui.insertEle;
      if (insEle) bChild = middleClone_(insEle, bChild);
      return reactCreate_(sTag, props, bChild);
    }
  }]);

  return TTableRow_;
}(TUnit_);

T.TableRow_ = TTableRow_;
T.TableRow = new TTableRow_();

var TTablePanel_ = function (_TPanel_2) {
  _inherits(TTablePanel_, _TPanel_2);

  function TTablePanel_(name, desc) {
    _classCallCheck(this, TTablePanel_);

    var _this7 = _possibleConstructorReturn(this, (TTablePanel_.__proto__ || Object.getPrototypeOf(TTablePanel_)).call(this, name || 'TablePanel', desc));

    _this7._defaultProp.height = null;
    return _this7;
  }

  _createClass2(TTablePanel_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TTablePanel_.prototype.__proto__ || Object.getPrototypeOf(TTablePanel_.prototype), 'getDefaultProps', this).call(this);
      dProp['tagName.'] = 'table';
      dProp.className = 'rewgt-unit rewgt-table';
      dProp.height = null; // auto height
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TTablePanel_.prototype.__proto__ || Object.getPrototypeOf(TTablePanel_.prototype), 'getInitialState', this).call(this);

      var self = this;
      this.defineDual('childNumId', function (value, oldValue) {
        self.$gui.respared = true;
      });

      return dState;
    }
  }, {
    key: 'render',
    value: function render() {
      var gui = this.$gui,
          oldWd = gui.cssWidth,
          oldHi = gui.cssHeight; // save old value to judge changing
      syncProps_(this);
      if (this['hide.']) return null; // as <noscript>

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      var bChild = this.prepareState();

      if (this.isHooked) {
        if (typeof gui.cssWidth == 'number' && oldWd !== gui.cssWidth || typeof gui.cssHeight == 'number' && oldHi !== gui.cssHeight || utils.dragInfo.justResized) {
          var self = this;
          setTimeout(function () {
            // TablePanel is unit like (not a panel), need customize resizing event
            propagateResizing_(self, utils.dragInfo.inDragging); // every TableRow will fire resizing
          }, 0);
        }
      }

      var thisWdgt = this.widget;
      if (W.__design__ && thisWdgt) {
        var iNeedCol = 2,
            bLast = [];
        bChild.forEach(function (child) {
          // child is TableRow
          if (!child) return;

          var iPos = 0,
              iColNum = 0,
              hasAuto = false;
          var bList = childElements_(child, thisWdgt);

          bList.forEach(function (item) {
            var iRowSpan = bLast[iPos] || 0;
            while (iRowSpan >= 2) {
              // has previous row's rowspan (already take colspan as single)
              bLast[iPos++] = iRowSpan - 1;
              iColNum += 1;
              iRowSpan = bLast[iPos] || 0;
            }

            var iCurrRow = parseInt(item.props.rowSpan || 0),
                iCurrCol = parseInt(item.props.colSpan || 0);
            if (iCurrCol >= 2) {
              // has colspan
              while (iCurrCol >= 2) {
                iCurrCol -= 1;
                var iPrev = Math.max(0, (bLast[iPos] || 0) - 1);
                bLast[iPos++] = Math.max(iPrev, iCurrRow); // every colspan followed cell set bLast[n] = rowSpan
                iColNum += 1;
              }
            }

            var wd = item.props.width;
            if (typeof wd != 'number' || wd < 0) hasAuto = true;
            bLast[iPos++] = iCurrRow;
            iColNum += 1;
          });
          bLast.splice(iPos); // remove out range items

          if (!hasAuto) iColNum += 1;
          if (iColNum > iNeedCol) iNeedCol = iColNum;
        });

        var dEmpty = { style: { margin: '10px' } },
            dEmpty2 = { style: { margin: '2px' } },
            bTmp = [];
        for (var i = 0; i < iNeedCol; i += 1) {
          bTmp.push(reactCreate_('td', { key: i + '', style: { backgroundColor: '#eee' } }, reactCreate_('div', i == 0 ? dEmpty : dEmpty2)));
        }
        bChild.push(reactCreate_('tr', { key: '$end', title: 'end of TablePanel', style: { height: '10px' } }, bTmp));
      }

      var tBody = reactCreate_('tbody', null, bChild);
      var props = setupRenderProp_(this);
      return reactCreate_(sTag, props, tBody); // ignore gui.insertEle
    }
  }]);

  return TTablePanel_;
}(TPanel_);

T.TablePanel_ = TTablePanel_;
T.TablePanel = new TTablePanel_();

// composable block widgets
//-------------------------

var TDiv_ = function (_TUnit_3) {
  _inherits(TDiv_, _TUnit_3);

  function TDiv_(name, desc) {
    _classCallCheck(this, TDiv_);

    var _this8 = _possibleConstructorReturn(this, (TDiv_.__proto__ || Object.getPrototypeOf(TDiv_)).call(this, name || 'Div', desc));

    _this8._defaultProp.height = null;
    _this8._defaultProp.minHeight = 20;
    _this8._htmlText = true;
    return _this8;
  }

  _createClass2(TDiv_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TDiv_.prototype.__proto__ || Object.getPrototypeOf(TDiv_.prototype), 'getDefaultProps', this).call(this);
      // props['tagName.'] = 'div';  // default is 'div'
      // props.className = 'rewgt-unit'; // default is 'rewgt-unit'
      // props.width = 0.9999;  // default is 0.9999
      props.height = null;
      props.minHeight = 20;
      // props['childInline.'] = false;  // default is false
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TDiv_.prototype.__proto__ || Object.getPrototypeOf(TDiv_.prototype), 'getInitialState', this).call(this);

      dState['html.'] = null;
      this.defineDual('html.', function (value, oldValue) {
        this.state['html.'] = value || null;
      });

      return dState;
    }
  }, {
    key: 'render',
    value: function render() {
      syncProps_(this);
      if (this['hide.']) return null; // as <noscript>

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      var bChild = this.prepareState(),
          hasChild = bChild.length;
      var props = setupRenderProp_(this),
          insEle = this.$gui.insertEle;
      if (insEle) {
        bChild = middleClone_(insEle, bChild);hasChild = true;
      }
      return reactCreate_(sTag, props, hasChild ? bChild : this.state['html.']);
    }
  }]);

  return TDiv_;
}(TUnit_);

T.Div_ = TDiv_;
T.Div = new TDiv_();

var TDiv2_ = function (_TDiv_) {
  _inherits(TDiv2_, _TDiv_);

  function TDiv2_(name, desc) {
    _classCallCheck(this, TDiv2_);

    var _this9 = _possibleConstructorReturn(this, (TDiv2_.__proto__ || Object.getPrototypeOf(TDiv2_)).call(this, name || 'Div2', desc));

    delete _this9._defaultProp.minHeight;
    _this9._defaultProp.width = null;
    return _this9;
  }

  _createClass2(TDiv2_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TDiv2_.prototype.__proto__ || Object.getPrototypeOf(TDiv2_.prototype), 'getDefaultProps', this).call(this);
      delete props.minHeight;
      // props.className = 'rewgt-unit'; // default is 'rewgt-unit'
      props.width = null; // height=null, minWidth=0, minHeight=0
      props['childInline.'] = true;
      return props;
    }
  }]);

  return TDiv2_;
}(TDiv_);

T.Div2_ = TDiv2_;
T.Div2 = new TDiv2_();

function simpleExtends(TBase, sName, noHtml) {
  var T = function (_TBase) {
    _inherits(T, _TBase);

    function T(name, desc) {
      _classCallCheck(this, T);

      var _this10 = _possibleConstructorReturn(this, (T.__proto__ || Object.getPrototypeOf(T)).call(this, name || sName, desc));

      if (noHtml) _this10._htmlText = false;
      return _this10;
    }

    _createClass2(T, [{
      key: 'getDefaultProps',
      value: function getDefaultProps() {
        var props = _get(T.prototype.__proto__ || Object.getPrototypeOf(T.prototype), 'getDefaultProps', this).call(this);
        props['tagName.'] = sName.toLowerCase();
        return props;
      }
    }]);

    return T;
  }(TBase);

  return T;
}

T.Style_ = simpleExtends(TDiv2_, 'Style');
T.Style = new T.Style_();

var virtualdiv_margin_ = [null, null, null, null];

var TVirtualDiv_ = function (_TDiv2_) {
  _inherits(TVirtualDiv_, _TDiv2_);

  function TVirtualDiv_(name, desc) {
    _classCallCheck(this, TVirtualDiv_);

    var _this11 = _possibleConstructorReturn(this, (TVirtualDiv_.__proto__ || Object.getPrototypeOf(TVirtualDiv_)).call(this, name || 'VirtualDiv', desc));

    delete _this11._defaultProp.minWidth;
    delete _this11._defaultProp.minHeight;
    Object.assign(_this11._defaultProp, {
      left: null, top: null, margin: virtualdiv_margin_.slice(0),
      padding: virtualdiv_margin_.slice(0), borderWidth: virtualdiv_margin_.slice(0)
    });
    return _this11;
  }

  _createClass2(TVirtualDiv_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TVirtualDiv_.prototype.__proto__ || Object.getPrototypeOf(TVirtualDiv_.prototype), 'getDefaultProps', this).call(this);
      delete props.minWidth;
      delete props.minHeight;
      return Object.assign(props, { 'tagName.': '',
        left: null, top: null, margin: virtualdiv_margin_.slice(0),
        padding: virtualdiv_margin_.slice(0), borderWidth: virtualdiv_margin_.slice(0)
      });
    }
  }]);

  return TVirtualDiv_;
}(TDiv2_);

T.VirtualDiv_ = TVirtualDiv_;
T.VirtualDiv = new TVirtualDiv_();

var THiddenDiv_ = function (_TDiv_2) {
  _inherits(THiddenDiv_, _TDiv_2);

  function THiddenDiv_(name, desc) {
    _classCallCheck(this, THiddenDiv_);

    var _this12 = _possibleConstructorReturn(this, (THiddenDiv_.__proto__ || Object.getPrototypeOf(THiddenDiv_)).call(this, name || 'HiddenDiv', desc));

    _this12._defaultProp.width = null;
    delete _this12._defaultProp.minHeight;
    return _this12;
  }

  _createClass2(THiddenDiv_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(THiddenDiv_.prototype.__proto__ || Object.getPrototypeOf(THiddenDiv_.prototype), 'getDefaultProps', this).call(this);
      props.width = null;
      delete props.minHeight;
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(THiddenDiv_.prototype.__proto__ || Object.getPrototypeOf(THiddenDiv_.prototype), 'getInitialState', this).call(this);
      if (!W.__design__) this.duals.style = { display: 'none' };
      return dState;
    }
  }]);

  return THiddenDiv_;
}(TDiv_);

T.HiddenDiv_ = THiddenDiv_;
T.HiddenDiv = new THiddenDiv_();

T.Article_ = simpleExtends(TDiv_, 'Article');
T.Article = new T.Article_();
T.Section_ = simpleExtends(TDiv_, 'Section');
T.Section = new T.Section_();
T.Header_ = simpleExtends(TDiv_, 'Header');
T.Header = new T.Header_();
T.Footer_ = simpleExtends(TDiv_, 'Footer');
T.Footer = new T.Footer_();
T.Aside_ = simpleExtends(TDiv_, 'Aside');
T.Aside = new T.Aside_();
T.Nav_ = simpleExtends(TDiv_, 'Nav');
T.Nav = new T.Nav_();
T.Main_ = simpleExtends(TDiv_, 'Main');
T.Main = new T.Main_();

var TPara_margin_ = [6, 0, 6, 0];

var TP_ = function (_TUnit_4) {
  _inherits(TP_, _TUnit_4);

  function TP_(name, desc) {
    _classCallCheck(this, TP_);

    var _this13 = _possibleConstructorReturn(this, (TP_.__proto__ || Object.getPrototypeOf(TP_)).call(this, name || 'P', desc));

    _this13._defaultProp.width = null;
    _this13._defaultProp.height = null;
    _this13._defaultProp.margin = TPara_margin_.slice(0);
    _this13._htmlText = true;
    return _this13;
  }

  _createClass2(TP_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TP_.prototype.__proto__ || Object.getPrototypeOf(TP_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { // default props.className is 'rewgt-unit'
        width: null, height: null, // minWidth=0, minHeight=0
        margin: TPara_margin_.slice(0),
        'childInline.': true, 'tagName.': 'p'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TP_.prototype.__proto__ || Object.getPrototypeOf(TP_.prototype), 'getInitialState', this).call(this);

      dState['html.'] = null;
      this.defineDual('html.', function (value, oldValue) {
        this.state['html.'] = value || null;
      });

      return dState;
    }
  }, {
    key: 'render',
    value: function render() {
      syncProps_(this);
      if (this['hide.']) return null; // as <noscript>

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      var bChild = this.prepareState(),
          hasChild = bChild.length;
      var props = setupRenderProp_(this),
          insEle = this.$gui.insertEle;
      if (insEle) {
        bChild = middleClone_(insEle, bChild);hasChild = true;
      }
      return reactCreate_(sTag, props, hasChild ? bChild : this.state['html.']);
    }
  }]);

  return TP_;
}(TUnit_);

T.P_ = TP_;
T.P = new TP_();
var P__ = T.P._createClass(null);

var TNoscript_ = function (_TP_) {
  _inherits(TNoscript_, _TP_);

  function TNoscript_(name, desc) {
    _classCallCheck(this, TNoscript_);

    var _this14 = _possibleConstructorReturn(this, (TNoscript_.__proto__ || Object.getPrototypeOf(TNoscript_)).call(this, name || 'Noscript', desc));

    delete _this14._defaultProp.margin;
    return _this14;
  }

  _createClass2(TNoscript_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TNoscript_.prototype.__proto__ || Object.getPrototypeOf(TNoscript_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'noscript';
      delete props.margin; // default not pass props.margin
      return props;
    }
  }, {
    key: 'render',
    value: function render() {
      syncProps_(this); // should call syncProps since duals.attr in using
      if (this['hide.']) return null;

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      return reactCreate_(sTag); // ignore props and children
    }
  }]);

  return TNoscript_;
}(TP_);

T.Noscript_ = TNoscript_;
T.Noscript = new TNoscript_();

var TFieldset_padding_ = [10, 10, 10, 10];
var TFieldset_border_width_ = [2, 2, 2, 2];
var TFieldSet_style_ = { borderColor: '#bbb' };

var TFieldset_ = function (_TP_2) {
  _inherits(TFieldset_, _TP_2);

  function TFieldset_(name, desc) {
    _classCallCheck(this, TFieldset_);

    var _this15 = _possibleConstructorReturn(this, (TFieldset_.__proto__ || Object.getPrototypeOf(TFieldset_)).call(this, name || 'Fieldset', desc));

    _this15._defaultProp.padding = TFieldset_padding_.slice(0);
    _this15._defaultProp.borderWidth = TFieldset_border_width_.slice(0);
    _this15._defaultProp.style = Object.assign({}, TFieldSet_style_);
    return _this15;
  }

  _createClass2(TFieldset_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TFieldset_.prototype.__proto__ || Object.getPrototypeOf(TFieldset_.prototype), 'getDefaultProps', this).call(this);
      props.padding = TFieldset_padding_.slice(0);
      props.borderWidth = TFieldset_border_width_.slice(0);
      props.style = Object.assign({}, TFieldSet_style_);
      props['tagName.'] = 'fieldset';
      return props;
    }
  }]);

  return TFieldset_;
}(TP_);

T.Fieldset_ = TFieldset_;
T.Fieldset = new TFieldset_();

T.Details_ = simpleExtends(TP_, 'Details');
T.Details = new T.Details_();

var TUl_padding_ = [0, 0, 0, 20];

var TUl_ = function (_TP_3) {
  _inherits(TUl_, _TP_3);

  function TUl_(name, desc) {
    _classCallCheck(this, TUl_);

    var _this16 = _possibleConstructorReturn(this, (TUl_.__proto__ || Object.getPrototypeOf(TUl_)).call(this, name || 'Ul', desc));

    _this16._defaultProp.padding = TUl_padding_.slice(0); // _statedProp, _silentProp no change
    return _this16;
  }

  _createClass2(TUl_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TUl_.prototype.__proto__ || Object.getPrototypeOf(TUl_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'ul';
      props.padding = TUl_padding_.slice(0);
      return props;
    }
  }]);

  return TUl_;
}(TP_);

T.Ul_ = TUl_;
T.Ul = new TUl_();

var TOl_ = function (_TP_4) {
  _inherits(TOl_, _TP_4);

  function TOl_(name, desc) {
    _classCallCheck(this, TOl_);

    var _this17 = _possibleConstructorReturn(this, (TOl_.__proto__ || Object.getPrototypeOf(TOl_)).call(this, name || 'Ol', desc));

    _this17._defaultProp.padding = TUl_padding_.slice(0); // _statedProp, _silentProp no change
    return _this17;
  }

  _createClass2(TOl_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TOl_.prototype.__proto__ || Object.getPrototypeOf(TOl_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'ol';
      props.padding = TUl_padding_.slice(0);
      return props;
    }
  }]);

  return TOl_;
}(TP_);

T.Ol_ = TOl_;
T.Ol = new TOl_();

T.Li_ = simpleExtends(TP_, 'Li');
T.Li = new T.Li_();
T.Dl_ = simpleExtends(TP_, 'Dl');
T.Dl = new T.Dl_();
T.Dd_ = simpleExtends(TP_, 'Dd');
T.Dd = new T.Dd_();
T.Dt_ = simpleExtends(TP_, 'Dt');
T.Dt = new T.Dt_();
T.Figure_ = simpleExtends(TP_, 'Figure');
T.Figure = new T.Figure_();
T.Figcaption_ = simpleExtends(TP_, 'Figcaption');
T.Figcaption = new T.Figcaption_();
T.Menu_ = simpleExtends(TP_, 'Menu');
T.Menu = new T.Menu_();
T.Menuitem_ = simpleExtends(TP_, 'Menuitem');
T.Menuitem = new T.Menuitem_();
T.Address_ = simpleExtends(TP_, 'Address');
T.Address = new T.Address_();
T.Form_ = simpleExtends(TP_, 'Form');
T.Form = new T.Form_();

var TIframe_margin_ = [0, 0, 0, 0];

var TIframe_ = function (_TP_5) {
  _inherits(TIframe_, _TP_5);

  function TIframe_(name, desc) {
    _classCallCheck(this, TIframe_);

    var _this18 = _possibleConstructorReturn(this, (TIframe_.__proto__ || Object.getPrototypeOf(TIframe_)).call(this, name || 'Iframe', desc));

    _this18._defaultProp.margin = TIframe_margin_.slice(0);
    _this18._htmlText = false;
    return _this18;
  }

  _createClass2(TIframe_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TIframe_.prototype.__proto__ || Object.getPrototypeOf(TIframe_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'iframe';
      props.margin = TIframe_margin_.slice(0);
      return props;
    }
  }]);

  return TIframe_;
}(TP_);

T.Iframe_ = TIframe_;
T.Iframe = new TIframe_();

var TBlockquote_padding_ = [0, 30, 0, 30];

var TBlockquote_ = function (_TP_6) {
  _inherits(TBlockquote_, _TP_6);

  function TBlockquote_(name, desc) {
    _classCallCheck(this, TBlockquote_);

    var _this19 = _possibleConstructorReturn(this, (TBlockquote_.__proto__ || Object.getPrototypeOf(TBlockquote_)).call(this, name || 'Blockquote', desc));

    _this19._defaultProp.padding = TBlockquote_padding_.slice(0);
    return _this19;
  }

  _createClass2(TBlockquote_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TBlockquote_.prototype.__proto__ || Object.getPrototypeOf(TBlockquote_.prototype), 'getDefaultProps', this).call(this);
      props.padding = TBlockquote_padding_.slice(0); // default margin: [6,0,6,0]
      props['tagName.'] = 'blockquote';
      return props;
    }
  }]);

  return TBlockquote_;
}(TP_);

T.Blockquote_ = TBlockquote_;
T.Blockquote = new TBlockquote_();

var TTable_ = function (_TP_7) {
  _inherits(TTable_, _TP_7);

  function TTable_(name, desc) {
    _classCallCheck(this, TTable_);

    var _this20 = _possibleConstructorReturn(this, (TTable_.__proto__ || Object.getPrototypeOf(TTable_)).call(this, name || 'Table', desc));

    _this20._htmlText = false;
    return _this20;
  }

  _createClass2(TTable_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TTable_.prototype.__proto__ || Object.getPrototypeOf(TTable_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'table';
      return props;
    }
  }]);

  return TTable_;
}(TP_);

T.Table_ = TTable_;
T.Table = new TTable_();

T.Caption_ = simpleExtends(TP_, 'Caption');
T.Caption = new T.Caption_();

T.Col_ = simpleExtends(TVirtualDiv_, 'Col', true);
T.Col = new T.Col_();
T.Colgroup_ = simpleExtends(TVirtualDiv_, 'Colgroup', true);
T.Colgroup = new T.Colgroup_();
T.Td_ = simpleExtends(TVirtualDiv_, 'Td');
T.Td = new T.Td_();

var TTbody_ = function (_TVirtualDiv_) {
  _inherits(TTbody_, _TVirtualDiv_);

  function TTbody_(name, desc) {
    _classCallCheck(this, TTbody_);

    var _this21 = _possibleConstructorReturn(this, (TTbody_.__proto__ || Object.getPrototypeOf(TTbody_)).call(this, name || 'Tbody', desc));

    _this21._htmlText = false;
    return _this21;
  }

  _createClass2(TTbody_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TTbody_.prototype.__proto__ || Object.getPrototypeOf(TTbody_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'tbody';
      return props;
    }
  }, {
    key: 'render',
    value: function render() {
      if (W.__design__) {
        syncProps_(this);
        if (this['hide.']) return null; // as <noscript>

        var sTag = this.state['tagName.'];
        if (!sTag) return getOnlyChild_(this);

        var bChild = this.prepareState();
        var tailRow = reactCreate_('tr', { key: '$end', title: 'end of Tbody', style: { height: '10px' } }, reactCreate_('td'));
        bChild.push(tailRow);

        var props = setupRenderProp_(this);
        return reactCreate_(sTag, props, bChild); // ignore gui.insertEle
      } else return _get(TTbody_.prototype.__proto__ || Object.getPrototypeOf(TTbody_.prototype), 'render', this).call(this);
    }
  }]);

  return TTbody_;
}(TVirtualDiv_);

T.Tbody_ = TTbody_;
T.Tbody = new TTbody_();

T.Thead_ = simpleExtends(TVirtualDiv_, 'Thead', true);
T.Thead = new T.Thead_();
T.Tfoot_ = simpleExtends(TVirtualDiv_, 'Tfoot', true);
T.Tfoot = new T.Tfoot_();
T.Th_ = simpleExtends(TVirtualDiv_, 'Th', true);
T.Th = new T.Th_();
T.Tr_ = simpleExtends(TVirtualDiv_, 'Tr', true);
T.Tr = new T.Tr_();

T.Hgroup_ = simpleExtends(TP_, 'Hgroup');
T.Hgroup = new T.Hgroup_();

T.H1_ = simpleExtends(TP_, 'H1');
T.H1 = new T.H1_();
T.H2_ = simpleExtends(TP_, 'H2');
T.H2 = new T.H2_();
T.H3_ = simpleExtends(TP_, 'H3');
T.H3 = new T.H3_();
T.H4_ = simpleExtends(TP_, 'H4');
T.H4 = new T.H4_();
T.H5_ = simpleExtends(TP_, 'H5');
T.H5 = new T.H5_();
T.H6_ = simpleExtends(TP_, 'H6');
T.H6 = new T.H6_();

var THr_border_width_ = [1, 0, 0, 0];

var THr_ = function (_TP_8) {
  _inherits(THr_, _TP_8);

  function THr_(name, desc) {
    _classCallCheck(this, THr_);

    var _this22 = _possibleConstructorReturn(this, (THr_.__proto__ || Object.getPrototypeOf(THr_)).call(this, name || 'Hr', desc));

    _this22._defaultProp.width = 0.9999;
    _this22._defaultProp.borderWidth = THr_border_width_.slice(0);
    _this22._htmlText = false;
    return _this22;
  }

  _createClass2(THr_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(THr_.prototype.__proto__ || Object.getPrototypeOf(THr_.prototype), 'getDefaultProps', this).call(this);
      props.width = 0.9999;
      props.borderWidth = THr_border_width_.slice(0);
      props['tagName.'] = 'hr';
      return props;
    }
  }]);

  return THr_;
}(TP_);

T.Hr_ = THr_;
T.Hr = new THr_();

var TPre_ = function (_TP_9) {
  _inherits(TPre_, _TP_9);

  function TPre_(name, desc) {
    _classCallCheck(this, TPre_);

    return _possibleConstructorReturn(this, (TPre_.__proto__ || Object.getPrototypeOf(TPre_)).call(this, name || 'Pre', desc));
  }

  _createClass2(TPre_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TPre_.prototype.__proto__ || Object.getPrototypeOf(TPre_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'pre';
      props['isPre.'] = true;
      return props;
    }
  }]);

  return TPre_;
}(TP_);

T.Pre_ = TPre_;
T.Pre = new TPre_();

// inline widgets
//---------------

var displayNoneProp_ = { style: { display: 'none' } };

var TSpan_ = function (_TWidget_4) {
  _inherits(TSpan_, _TWidget_4);

  function TSpan_(name, desc) {
    _classCallCheck(this, TSpan_);

    var _this24 = _possibleConstructorReturn(this, (TSpan_.__proto__ || Object.getPrototypeOf(TSpan_)).call(this, name || 'Span', desc));

    _this24._statedProp = [];
    _this24._silentProp = ['className', 'hookTo.', 'keyid.', 'childInline.', 'tagName.'];
    _this24._defaultProp = { width: undefined, height: undefined }; // 'html.' default is not passed, suggest not use width/height, but if used also OK // undefined means remove all none-number when saving
    _this24._htmlText = true; // use 'html.'
    return _this24;
  }

  _createClass2(TSpan_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      return { key: [-1, 'string'], // -1 means at top
        width: [], height: [] // disable show width/height in prop-editor, default come from TWidget_
      };
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      return { 'childInline.': true, 'tagName.': 'span' }; // no width/height/className
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      // step 1: define template as 'this._'
      var template = this.getShadowTemplate();
      Object.defineProperty(this, '_', { enumerable: false, configurable: false, writable: false, value: template });
      this.isHooked = false; // like this.isMounted(), but can used in render()
      this['hide.'] = false;

      if (W.__debug__ && utils.widgetNum() == 0) {
        utils.instantShow('error: inline widget can not be used as topmost panel.');
        return {};
      }

      // step 2: define duals, tagAttrs, data-* / aria-*
      this.duals = {};
      var gui = { inSync: false, removeNum: 0, className: this.props.className || '', compState: 0,
        duals: {}, initDuals: [], initDuals0: [], // save duals.attr for prop-watching
        connectTo: {}, connectBy: {},
        id__: 0, id2__: 0
      };
      var eventset = gui.eventset = {}; // regist event callback
      var tagAttrs = gui.tagAttrs = []; // list tag-attributes
      var dualAttrs = gui.dualAttrs = {}; // {attrName:'dual-attr-name'}
      var dataset = gui.dataset = []; // list data-* aria-*
      var exprAttrs = gui.exprAttrs = []; // list $attr, will adjust to { attr:updateExpr(comp) } before first render
      var pathAttr = '',
          pathValue = '',
          flowFlag = '';
      gui.forExpr = false;gui.hasIdSetter = false;

      var currEvSet = {},
          evSet_ = this.$eventset || [{}, {}],
          evSet = evSet_[0],
          sysEvSet = evSet_[1];

      var dualIdSetter = null;
      var b = Object.keys(this.props);
      for (var i = 0, item; item = b[i]; i++) {
        if (item.indexOf('data-') == 0) {
          if (item == 'data-unit.path' || item == 'data-span.path') {
            pathAttr = item;
            pathValue = this.props[item];
          }
          dataset.push(item);
        } else if (item.indexOf('dual-') == 0) {
          var dualKey = item.slice(5).replace(_hyphenPattern, function (_, chr) {
            return chr.toUpperCase();
          });
          if (dualKey) dualAttrs[dualKey] = item;
        } else if (item.indexOf('aria-') == 0) dataset.push(item);else if (item[0] == '$' && item.length > 1) {
          var itemValue = this.props[item],
              tp = typeof itemValue === 'undefined' ? 'undefined' : _typeof(itemValue);
          if (tp == 'string') {
            if (item == '$id__') {
              itemValue = idSetter[itemValue];
              tp = typeof itemValue === 'undefined' ? 'undefined' : _typeof(itemValue); // wait process if tp == 'function'
            } else {
              var isRFor = false;
              item = item.slice(1);
              if (item == '$for') {
                // $$for
                item = 'for';
                isRFor = true;
              }
              if (ctrlExprCmd_.indexOf(item) >= 0) {
                if (item == 'for') {
                  if (gui.forExpr) console.log('warning: reduplicate property ($for)');else {
                    gui.forExpr = isRFor ? 2 : 1; // flowFlag is ''
                    exprAttrs.push(item); // only add one $for
                  }
                } else {
                  if (flowFlag) // report error and ignore current
                    console.log('error: property ($' + item + ') conflict with previous ($' + flowFlag + ')');else {
                    flowFlag = item;
                    if (item != 'else') exprAttrs.push(item);
                  }
                }
              } else {
                if (item == 'children') {
                  if (hasOwn_.call(this.props, 'for.index')) {
                    // $children only used under forExpr
                    gui.isChildExpr = true;
                    gui.children2 = this.props.children;
                  }
                } else if (item != 'key') // use $key, $children as normal prop, updated in parent for-loop
                  exprAttrs.push(item);
              }
              continue;
            }
          }

          if (tp == 'function') {
            if (item[1] == '$') {
              // not support $$onEvent
              console.log('warning: invalid using props.' + item);
              continue;
            }

            var item2 = item.slice(1);
            if (item2 == 'id__') // pass setter by props.$id__
              dualIdSetter = itemValue; // will bind this in defineDual('id__')
            else this[item] = currEvSet[item2] = bindable_(itemValue) ? itemValue.bind(this) : itemValue;
          }
          // else ignore  // $XX only can be string or function, ignore others
        } else {
          var iFlag = supportedAttr_[item];
          if (iFlag && iFlag != 5) // 5: className/style/width/height
            tagAttrs.push(item);
        }
      }
      gui.flowFlag = flowFlag;
      gui.dataset2 = dataset.slice(0);

      // step 3: hook parent widget
      var keyid = this.props['keyid.'];
      if (keyid) {
        var keyTp = typeof keyid === 'undefined' ? 'undefined' : _typeof(keyid);
        if (keyTp != 'string' && keyTp != 'number') keyid = undefined; // change to use automatic number keyid
      }

      var owner = this.props['hookTo.'];
      if (typeof owner == 'string') owner = W.W(owner); // can be W.W('')
      if (Array.isArray(owner) && owner.W) {
        // exists owner widget
        if (keyid !== undefined) owner.$set(keyid, owner.W(this));else keyid = owner.push(owner.W(this)) - 1;
        gui.keyid = keyid;
      }

      // step 4: setup eventset
      var virtualKey = this.props['data-rewgt-owner'];
      if (virtualKey) {
        var ownerComp,
            evtset2 = gui.eventset2 = {};
        if (owner && (ownerComp = owner.component)) {
          var b = Object.keys(ownerComp.$gui.eventset);
          for (var i = 0, item; item = b[i]; i++) {
            eventset[item] = wrapCompEvt_(this, item, virtualKey);
            evtset2[item] = true;
          }
        }
      }

      var wrapKeys = Object.assign({}, evSet, currEvSet);
      for (var sEvName in wrapKeys) {
        eventset[sEvName] = wrapCompEvt_(this, sEvName, virtualKey);
      }
      for (var sEvName in sysEvSet) {
        eventset[sEvName] = this['$$' + sEvName]; // maybe overwrite
      }

      // step 5: prepare dState
      Object.defineProperty(this, '$gui', { enumerable: false, configurable: false, writable: false, value: gui });
      if (W.__design__) gui.className = addClass_(gui.className, 'rewgt-inline'); // gui.className is fixed, not changed by prop.className
      var dStyle = Object.assign({}, this.props.style);
      var dState = { id__: 0, childNumId: 0, duals: [],
        'tagName.': this.props['tagName.'],
        exprAttrs: exprAttrs.slice(0),
        klass: '', style: {}, 'html.': null
      }; // state.duals = [[attr,newValue], ...]
      if (W.__design__) {
        var d = template._getGroupOpt(this);
        dState['data-group.opt'] = d.type + '/' + d.editable; // no props['data-group.opt'], not in $gui.dataset
      }

      // step 6: regist duals
      gui.compIdx = {};gui.comps = children2Arr_(this.props.children);

      Object.defineProperty(this.duals, 'keyid', { enumerable: true, configurable: true,
        get: function () {
          return this.$gui.keyid;
        }.bind(this),
        set: function set(value, oldValue) {
          // no need bind this
          throw new Error('property (keyid) is readonly');
        }
      });

      this.defineDual('klass', function (value, oldValue) {
        this.state.klass = value || '';
      });
      this.defineDual('style', function (value, oldValue) {
        if (!this.state['tagName.']) {
          // current is virtual node
          var b = utils.eachComponent(this),
              childComp = b[0];
          if (childComp) childComp.duals.style = value;
        } else {
          this.state.style = Object.assign({}, oldValue, value);
        }
      });
      this.defineDual('html.', function (value, oldValue) {
        this.state['html.'] = value || null;
      });
      this.defineDual('id__', function (value, oldValue) {
        this.state.id__ = value; // is first render when oldValue == 0
        gui.id__ = gui.id2__ = value;
      });
      if (dualIdSetter) this.defineDual('id__', dualIdSetter); // will auto set: gui.hasIdSetter = true

      this.defineDual('trigger', triggerExprFn_);

      var hookThis = this.widget;
      if (owner && hookThis) {
        if (pathAttr) {
          hookThis.$callspace = { flowFlag: 'ref', forSpace: null };
          hookThis.$callspace[pathAttr] = pathValue;
          var exprSpace = hookThis.$callspace.exprSpace = {};
          setupExprSpace(exprSpace, this);
        }
      }

      // step 6: setup comps, compIdx
      this.defineDual('childNumId', function (newNumId, oldNumId) {
        // if no props.children, newNumId will be 0, setter will not called
        // this.state.childNumId = newNumId;  // must be auto assigned

        var thisObj = this,
            hookThis = this.widget;
        if (!hookThis) return; // fatal error

        if (oldNumId == 0 && hookThis.parent === topmostWidget_) console.log('warning: can not hook inline widget to topmost directly.');

        var compIdx = gui.compIdx,
            bComp = gui.comps,
            needClear = false;
        bComp.forEach(function (child, iPos) {
          if (typeof child == 'string') {
            if (iPos == 0 && bComp.length == 1 && hasOwn_.call(thisObj.duals, 'html.')) {
              setTimeout(function () {
                thisObj.duals['html.'] = child;
              }, 0);
              needClear = true;
              return;
            }
            child = bComp[iPos] = reactCreate_(Span__, { 'html.': child }); // auto change to React Element
          } else if (!child) return;

          var keyid,
              sKey = getElementKey_(child),
              isOld = false;
          if (sKey) {
            var iTmp = parseInt(sKey);
            if (iTmp + '' === sKey) keyid = iTmp;else keyid = sKey;

            if (typeof compIdx[sKey] == 'number') // history exists
              isOld = true;
          } else {
            keyid = iPos + gui.removeNum;
            sKey = keyid + '';
          }

          if (hasClass_(child.props.className, 'rewgt-static')) {
            if (isOld) {
              compIdx[keyid] = iPos; // adjust position
              return;
            }

            var dProp = Object.assign({}, child.props);
            // dProp['keyid.'] = keyid;
            dProp.key = sKey;
            if (W.__design__ && !(thisObj.props['$for'] || thisObj.props['$$for'])) {
              dProp.onMouseDown = staticMouseDown;
              dProp.onDoubleClick = staticDbClick.bind(thisObj);
            }
            compIdx[keyid] = iPos;
            bComp[iPos] = reactCreate_('span', dProp); // div.rewgt-static --> span.rewgt-static
            return; // adjust nothing on rewgt-static widget
          }

          var childInline2 = child.props['childInline.'];
          if (childInline2 !== undefined) {
            if (!childInline2) {
              bComp[iPos] = undefined; // must not isOld
              console.log('warning: widget (' + hookThis.getPath() + '.' + sKey + ') can not be panel');
              return; // not inline, ignore adding  // no need print warning
            }
          } else {
            // is pure react element
            compIdx[keyid] = iPos;
            if (!isOld) bComp[iPos] = reactClone_(child, { key: sKey }); // not pass 'keyid.'
            return;
          }

          if (!isOld && child.props['isReference.']) {
            if (sKey[0] != '$') sKey = keyid = '$' + sKey;
            // else, keyid and key prefixed with '$'

            if (inFirstLoading_) pendingRefers_.push([thisObj, keyid]);
          }

          if (isOld && hookThis !== child.props['hookTo.']) isOld = false;
          compIdx[keyid] = iPos;
          if (!isOld) bComp[iPos] = reactClone_(child, { 'hookTo.': hookThis, key: sKey, 'keyid.': keyid });
        });
        if (needClear) bComp.splice(0);
      });

      return dState;
    }

    //componentDidMount() {
    //  super.componentDidMount();
    //}
    //componentWillUnmount() {
    //  super.componentWillUnmount();
    //}
    //setChild() {
    //  super.setChild.apply(this,arguments);
    //}

  }, {
    key: 'willResizing',
    value: function willResizing(wd, hi, inPending) {
      return false; // ignore resizing, Span not support resizing evnet
    }
  }, {
    key: 'prepareState',
    value: function prepareState() {
      console.log('warning: inline widget not support prepareState()');
    }
  }, {
    key: 'render',
    value: function render() {
      syncProps_(this);
      if (this['hide.']) return reactCreate_('span', displayNoneProp_);

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      var props = setupRenderProp_(this);
      var b = this.$gui.comps,
          hasChild = b.length,
          insEle = this.$gui.insertEle;
      if (insEle) {
        b = middleClone_(insEle, b);hasChild = true;
      }
      return reactCreate_(sTag, props, hasChild ? b : this.state['html.']);
    }
  }]);

  return TSpan_;
}(TWidget_);

T.Span_ = TSpan_;
T.Span = new TSpan_();
var Span__ = T.Span._createClass(null);

var TVirtualSpan_ = function (_TSpan_) {
  _inherits(TVirtualSpan_, _TSpan_);

  function TVirtualSpan_(name, desc) {
    _classCallCheck(this, TVirtualSpan_);

    return _possibleConstructorReturn(this, (TVirtualSpan_.__proto__ || Object.getPrototypeOf(TVirtualSpan_)).call(this, name || 'VirtualSpan', desc));
  }

  _createClass2(TVirtualSpan_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TVirtualSpan_.prototype.__proto__ || Object.getPrototypeOf(TVirtualSpan_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = '';
      return props;
    }
  }]);

  return TVirtualSpan_;
}(TSpan_);

T.VirtualSpan_ = TVirtualSpan_;
T.VirtualSpan = new TVirtualSpan_();

var THiddenSpan_ = function (_TSpan_2) {
  _inherits(THiddenSpan_, _TSpan_2);

  function THiddenSpan_(name, desc) {
    _classCallCheck(this, THiddenSpan_);

    return _possibleConstructorReturn(this, (THiddenSpan_.__proto__ || Object.getPrototypeOf(THiddenSpan_)).call(this, name || 'HiddenSpan', desc));
  }

  _createClass2(THiddenSpan_, [{
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(THiddenSpan_.prototype.__proto__ || Object.getPrototypeOf(THiddenSpan_.prototype), 'getInitialState', this).call(this);
      if (!W.__design__) this.duals.style = { display: 'none' };
      return dState;
    }
  }]);

  return THiddenSpan_;
}(TSpan_);

T.HiddenSpan_ = THiddenSpan_;
T.HiddenSpan = new THiddenSpan_();

var TBr_ = function (_TSpan_3) {
  _inherits(TBr_, _TSpan_3);

  function TBr_(name, desc) {
    _classCallCheck(this, TBr_);

    var _this27 = _possibleConstructorReturn(this, (TBr_.__proto__ || Object.getPrototypeOf(TBr_)).call(this, name || 'Br', desc));

    _this27._htmlText = false;
    return _this27;
  }

  _createClass2(TBr_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TBr_.prototype.__proto__ || Object.getPrototypeOf(TBr_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'br';
      return props;
    }
  }]);

  return TBr_;
}(TSpan_);

T.Br_ = TBr_;
T.Br = new TBr_();

var TA_ = function (_TSpan_4) {
  _inherits(TA_, _TSpan_4);

  function TA_(name, desc) {
    _classCallCheck(this, TA_);

    return _possibleConstructorReturn(this, (TA_.__proto__ || Object.getPrototypeOf(TA_)).call(this, name || 'A', desc));
  }

  _createClass2(TA_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TA_.prototype.__proto__ || Object.getPrototypeOf(TA_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'a';
      return props;
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      if (W.__design__) event.preventDefault(); // avoid jump to target href
      if (this.$onClick) this.$onClick(event);
    }
  }]);

  return TA_;
}(TSpan_);

T.A_ = TA_;
T.A = new TA_();

T.Q_ = simpleExtends(TSpan_, 'Q');
T.Q = new T.Q_();
T.Abbr_ = simpleExtends(TSpan_, 'Abbr');
T.Abbr = new T.Abbr_();

function addStepFunc_(comp) {
  comp.stepPlay = function (fSpeed) {
    // not use fSpeed
    if (this.isHooked) {
      var node = this.getHtmlNode();
      if (node && node.readyState >= 2) {
        // 2: HAVE_CURRENT_DATA
        node.play();
        return true;
      }
    }
    return false;
  };

  comp.stepPause = function (sReason) {
    // sReason: JUMP_PAGE,NEXT_PAGE,PRE_STEP,POST_STEP
    if (this.isHooked) {
      var node = this.getHtmlNode();
      if (node) {
        if (!node.paused) node.pause();
        return true;
      }
    }
    return false;
  };

  comp.stepIsDone = function () {
    if (!this.isHooked) return true;
    var node = this.getHtmlNode();
    return !node || node.readyState < 2 || node.paused;
  };
}

var TAudio_ = function (_TSpan_5) {
  _inherits(TAudio_, _TSpan_5);

  function TAudio_(name, desc) {
    _classCallCheck(this, TAudio_);

    return _possibleConstructorReturn(this, (TAudio_.__proto__ || Object.getPrototypeOf(TAudio_)).call(this, name || 'Audio', desc));
  }

  _createClass2(TAudio_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TAudio_.prototype.__proto__ || Object.getPrototypeOf(TAudio_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.src = [iLevel + 1, 'string', null];
      dSchema.autoPlay = [iLevel + 2, 'string', ['', '1']];
      dSchema.controls = [iLevel + 3, 'string', ['', '1']];
      dSchema.loop = [iLevel + 4, 'string', ['', '1']];
      dSchema.muted = [iLevel + 5, 'string', ['', '1']];
      dSchema.preload = [iLevel + 6, 'string', ['auto', 'meta', 'none']];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TAudio_.prototype.__proto__ || Object.getPrototypeOf(TAudio_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'audio';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TAudio_.prototype.__proto__ || Object.getPrototypeOf(TAudio_.prototype), 'getInitialState', this).call(this);
      addStepFunc_(this);
      return dState;
    }
  }]);

  return TAudio_;
}(TSpan_);

T.Audio_ = TAudio_;
T.Audio = new TAudio_();

T.Source_ = simpleExtends(TSpan_, 'Source');
T.Source = new T.Source_();
T.Track_ = simpleExtends(TSpan_, 'Track');
T.Track = new T.Track_();
T.Bdi_ = simpleExtends(TSpan_, 'Bdi');
T.Bdi = new T.Bdi_();
T.Bdo_ = simpleExtends(TSpan_, 'Bdo');
T.Bdo = new T.Bdo_();
T.Data_ = simpleExtends(TSpan_, 'Data');
T.Data = new T.Data_();
T.Mark_ = simpleExtends(TSpan_, 'Mark');
T.Mark = new T.Mark_();
T.Wbr_ = simpleExtends(TSpan_, 'Wbr');
T.Wbr = new T.Wbr_();
T.Button_ = simpleExtends(TSpan_, 'Button');
T.Button = new T.Button_();

var TTextarea_ = function (_TSpan_6) {
  _inherits(TTextarea_, _TSpan_6);

  function TTextarea_(name, desc) {
    _classCallCheck(this, TTextarea_);

    return _possibleConstructorReturn(this, (TTextarea_.__proto__ || Object.getPrototypeOf(TTextarea_)).call(this, name || 'Textarea', desc));
  }

  _createClass2(TTextarea_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TTextarea_.prototype.__proto__ || Object.getPrototypeOf(TTextarea_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.disabled = [iLevel + 1, 'string', ['', '1']];
      dSchema.readonly = [iLevel + 2, 'string', ['', '1']];
      dSchema.placeholder = [iLevel + 3, 'string'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TTextarea_.prototype.__proto__ || Object.getPrototypeOf(TTextarea_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'textarea';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TTextarea_.prototype.__proto__ || Object.getPrototypeOf(TTextarea_.prototype), 'getInitialState', this).call(this);

      var initValue = this.props.value !== undefined ? this.props.value || '' : this.props.defaultValue || '';
      this.defineDual('value', null, initValue);

      return dState;
    }
  }, {
    key: '$$onChange',
    value: function $$onChange(event) {
      this.duals.value = event.target.value;
      if (this.$onChange) this.$onChange(event);
    }
  }]);

  return TTextarea_;
}(TSpan_);

T.Textarea_ = TTextarea_;
T.Textarea = new TTextarea_();

var TProgress_ = function (_TSpan_7) {
  _inherits(TProgress_, _TSpan_7);

  function TProgress_(name, desc) {
    _classCallCheck(this, TProgress_);

    return _possibleConstructorReturn(this, (TProgress_.__proto__ || Object.getPrototypeOf(TProgress_)).call(this, name || 'Progress', desc));
  }

  _createClass2(TProgress_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TProgress_.prototype.__proto__ || Object.getPrototypeOf(TProgress_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.value = [iLevel + 1, 'string'];
      dSchema.max = [iLevel + 2, 'string'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TProgress_.prototype.__proto__ || Object.getPrototypeOf(TProgress_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'progress';
      return props;
    }
  }]);

  return TProgress_;
}(TSpan_);

T.Progress_ = TProgress_;
T.Progress = new TProgress_();

var TImg_ = function (_TSpan_8) {
  _inherits(TImg_, _TSpan_8);

  function TImg_(name, desc) {
    _classCallCheck(this, TImg_);

    var _this32 = _possibleConstructorReturn(this, (TImg_.__proto__ || Object.getPrototypeOf(TImg_)).call(this, name || 'Img', desc));

    _this32._htmlText = false;
    return _this32;
  }

  _createClass2(TImg_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TImg_.prototype.__proto__ || Object.getPrototypeOf(TImg_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'img';
      return props;
    }
  }, {
    key: '$$onDragStart',
    value: function $$onDragStart(event) {
      if (W.__design__) {
        event.preventDefault(); // disable img draggable
        return; // avoid deep customizing
      }
      if (this.$onDragStart) this.$onDragStart(event);
    }
  }]);

  return TImg_;
}(TSpan_);

T.Img_ = TImg_;
T.Img = new TImg_();

var TVideo_ = function (_TSpan_9) {
  _inherits(TVideo_, _TSpan_9);

  function TVideo_(name, desc) {
    _classCallCheck(this, TVideo_);

    return _possibleConstructorReturn(this, (TVideo_.__proto__ || Object.getPrototypeOf(TVideo_)).call(this, name || 'Video', desc));
  }

  _createClass2(TVideo_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TVideo_.prototype.__proto__ || Object.getPrototypeOf(TVideo_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'video';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TVideo_.prototype.__proto__ || Object.getPrototypeOf(TVideo_.prototype), 'getInitialState', this).call(this);
      addStepFunc_(this);
      return dState;
    }
  }]);

  return TVideo_;
}(TSpan_);

T.Video_ = TVideo_;
T.Video = new TVideo_();

T.Canvas_ = simpleExtends(TSpan_, 'Canvas');
T.Canvas = new T.Canvas_();
T.Picture_ = simpleExtends(TSpan_, 'Picture');
T.Picture = new T.Picture_();
T.Map_ = simpleExtends(TSpan_, 'Map');
T.Map = new T.Map_();
T.Area_ = simpleExtends(TSpan_, 'Area');
T.Area = new T.Area_();
T.Time_ = simpleExtends(TSpan_, 'Time');
T.Time = new T.Time_();
T.Output_ = simpleExtends(TSpan_, 'Output');
T.Output = new T.Output_();

var TInput_ = function (_TSpan_10) {
  _inherits(TInput_, _TSpan_10);

  function TInput_(name, desc) {
    _classCallCheck(this, TInput_);

    var _this34 = _possibleConstructorReturn(this, (TInput_.__proto__ || Object.getPrototypeOf(TInput_)).call(this, name || 'Input', desc));

    _this34._htmlText = false;
    return _this34;
  }

  _createClass2(TInput_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TInput_.prototype.__proto__ || Object.getPrototypeOf(TInput_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      Object.assign(dSchema, {
        type: [iLevel + 1, 'string', ['text', 'button', 'checkbox', 'file', 'hidden', 'image', 'password', 'radio', 'reset', 'submit', 'color', 'date', 'datetime', 'datetime-local', 'email', 'month', 'number', 'range', 'search', 'tel', 'time', 'url', 'week']],
        checked: [iLevel + 2, 'string', ['', '1']],
        disabled: [iLevel + 3, 'string', ['', '1']],
        readonly: [iLevel + 4, 'string', ['', '1']],
        value: [iLevel + 5, 'string'],
        placeholder: [iLevel + 6, 'string'],
        min: [iLevel + 7, 'string'],
        max: [iLevel + 8, 'string'],
        step: [iLevel + 9, 'string'],
        pattern: [iLevel + 10, 'string'],
        src: [iLevel + 11, 'string'],
        defaultValue: [iLevel + 12, 'string'],
        defaultChecked: [iLevel + 13, 'string'],
        required: [iLevel + 14, 'string', ['', 'required']]
      });
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TInput_.prototype.__proto__ || Object.getPrototypeOf(TInput_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'input';
      props.type = 'text';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TInput_.prototype.__proto__ || Object.getPrototypeOf(TInput_.prototype), 'getInitialState', this).call(this);

      var sType = this.props.type;
      if (sType === 'checkbox' || sType === 'radio') {
        var initChecked = this.props.checked !== undefined ? boolToStr_(this.props.checked) : boolToStr_(this.props.defaultChecked);
        this.defineDual('checked', null, initChecked);
      } else if (sType == 'select' && this.props.multiple) {
        var initValue = this.props.value || this.props.defaultValue;
        if (!Array.isArray(initValue)) initValue = [];
        this.defineDual('value', null, initValue);
      } else {
        var initValue = this.props.value !== undefined ? this.props.value || '' : this.props.defaultValue || '';
        this.defineDual('value', null, initValue);
      }

      return dState;
    }
  }, {
    key: '$$onChange',
    value: function $$onChange(event) {
      var sType = this.props.type,
          targ = event.target;
      if (sType === 'checkbox' || sType === 'radio') this.duals.checked = targ.checked;else if (sType == 'select' && this.props.multiple) {
        var values = [],
            options = targ.options,
            len = options && options.length || 0;
        for (var i = 0; i < len; i++) {
          if (options[i].selected) values.push(options[i].value);
        }
        this.duals.value = values;
      } else this.duals.value = targ.value;

      if (this.$onChange) this.$onChange(event);
    }
  }]);

  return TInput_;
}(TSpan_);

T.Input_ = TInput_;
T.Input = new TInput_();

T.Keygen_ = simpleExtends(TSpan_, 'Keygen');
T.Keygen = new T.Keygen_();

var TLabel_ = function (_TSpan_11) {
  _inherits(TLabel_, _TSpan_11);

  function TLabel_(name, desc) {
    _classCallCheck(this, TLabel_);

    return _possibleConstructorReturn(this, (TLabel_.__proto__ || Object.getPrototypeOf(TLabel_)).call(this, name || 'Label', desc));
  }

  _createClass2(TLabel_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TLabel_.prototype.__proto__ || Object.getPrototypeOf(TLabel_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.htmlFor = [iLevel + 1, 'string', null, '[string]: indicate which input widget'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TLabel_.prototype.__proto__ || Object.getPrototypeOf(TLabel_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'label';
      return props;
    }
  }]);

  return TLabel_;
}(TSpan_);

T.Label_ = TLabel_;
T.Label = new TLabel_();

T.Legend_ = simpleExtends(TSpan_, 'Legend');
T.Legend = new T.Legend_();
T.Sub_ = simpleExtends(TSpan_, 'Sub');
T.Sub = new T.Sub_();
T.Sup_ = simpleExtends(TSpan_, 'Sup');
T.Sup = new T.Sup_();

var TSelect_ = function (_TSpan_12) {
  _inherits(TSelect_, _TSpan_12);

  function TSelect_(name, desc) {
    _classCallCheck(this, TSelect_);

    return _possibleConstructorReturn(this, (TSelect_.__proto__ || Object.getPrototypeOf(TSelect_)).call(this, name || 'Select', desc));
  }

  _createClass2(TSelect_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TSelect_.prototype.__proto__ || Object.getPrototypeOf(TSelect_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.multiple = [iLevel + 1, 'string', ['', '1']];
      dSchema.disabled = [iLevel + 2, 'string', ['', '1']];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TSelect_.prototype.__proto__ || Object.getPrototypeOf(TSelect_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'select';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TSelect_.prototype.__proto__ || Object.getPrototypeOf(TSelect_.prototype), 'getInitialState', this).call(this);

      var initValue;
      if (this.props.multiple) {
        initValue = this.props.value || this.props.defaultValue;
        if (!Array.isArray(initValue)) initValue = [];
      } else {
        initValue = this.props.value !== undefined ? this.props.value || '' : this.props.defaultValue || '';
      }
      this.defineDual('value', null, initValue);

      return dState;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TSelect_.prototype.__proto__ || Object.getPrototypeOf(TSelect_.prototype), 'componentDidMount', this).call(this);

      if (!this.props.multiple && !this.state.value) {
        var s,
            node = this.getHtmlNode();
        if (node && (s = node.value)) // try sync from GUI default
          this.duals.value = s;
      }
      // else, GUI will set by this.duals.value what ever this.props.multiple
    }
  }, {
    key: '$$onChange',
    value: function $$onChange(event) {
      var node = event.target;
      if (this.props.multiple) {
        var values = [],
            options = node.options,
            len = options.length;
        for (var i = 0; i < len; i++) {
          if (options[i].selected) values.push(options[i].value);
        }
        this.duals.value = values;
      } else this.duals.value = node.value;

      if (this.$onChange) this.$onChange(event);
    }
  }]);

  return TSelect_;
}(TSpan_);

T.Select_ = TSelect_;
T.Select = new TSelect_();

T.Datalist_ = simpleExtends(TSelect_, 'Datalist');
T.Datalist = new T.Datalist_();

var TOptgroup_ = function (_TSpan_13) {
  _inherits(TOptgroup_, _TSpan_13);

  function TOptgroup_(name, desc) {
    _classCallCheck(this, TOptgroup_);

    return _possibleConstructorReturn(this, (TOptgroup_.__proto__ || Object.getPrototypeOf(TOptgroup_)).call(this, name || 'Optgroup', desc));
  }

  _createClass2(TOptgroup_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TOptgroup_.prototype.__proto__ || Object.getPrototypeOf(TOptgroup_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.label = [iLevel + 1, 'string'];
      dSchema.disabled = [iLevel + 2, 'string', ['', '1']];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TOptgroup_.prototype.__proto__ || Object.getPrototypeOf(TOptgroup_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'optgroup';
      return props;
    }
  }]);

  return TOptgroup_;
}(TSpan_);

T.Optgroup_ = TOptgroup_;
T.Optgroup = new TOptgroup_();

/*
function fireOption_(comp) {  // comp is Option or OptOption
  var owner = comp.parentOf(true);
  if (owner) {
    if (owner.props['tagName.'] == 'optgroup')
      owner = owner.parentOf(true);
  }
  if (owner && owner.props['tagName.'] == 'select' && !owner.props.multiple) {
    var node = owner.getHtmlNode()
    if (node)
      node.value = comp.state.value; // fire it by manual, since event.preventDefault() called
  }
} */

var TOption_ = function (_TSpan_14) {
  _inherits(TOption_, _TSpan_14);

  function TOption_(name, desc) {
    _classCallCheck(this, TOption_);

    return _possibleConstructorReturn(this, (TOption_.__proto__ || Object.getPrototypeOf(TOption_)).call(this, name || 'Option', desc));
  }

  _createClass2(TOption_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TOption_.prototype.__proto__ || Object.getPrototypeOf(TOption_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'option';
      return props;
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      if (W.__design__) {
        event.preventDefault();
        // fireOption_(this);
      }
      if (this.$onClick) this.$onClick(event);
    }
  }]);

  return TOption_;
}(TSpan_);

T.Option_ = TOption_;
T.Option = new TOption_();

T.B_ = simpleExtends(TSpan_, 'B');
T.B = new T.B_();
T.I_ = simpleExtends(TSpan_, 'I');
T.I = new T.I_();
T.S_ = simpleExtends(TSpan_, 'S');
T.S = new T.S_();
T.U_ = simpleExtends(TSpan_, 'U');
T.U = new T.U_();
T.Ins_ = simpleExtends(TSpan_, 'Ins');
T.Ins = new T.Ins_();
T.Del_ = simpleExtends(TSpan_, 'Del');
T.Del = new T.Del_();
T.Code_ = simpleExtends(TSpan_, 'Code');
T.Code = new T.Code_();
T.Var_ = simpleExtends(TSpan_, 'Var');
T.Var = new T.Var_();
T.Summary_ = simpleExtends(TSpan_, 'Summary');
T.Summary = new T.Summary_();
T.Em_ = simpleExtends(TSpan_, 'Em');
T.Em = new T.Em_();
T.Strong_ = simpleExtends(TSpan_, 'Strong');
T.Strong = new T.Strong_();
T.Big_ = simpleExtends(TSpan_, 'Big');
T.Big = new T.Big_();
T.Small_ = simpleExtends(TSpan_, 'Small');
T.Small = new T.Small_();
T.Dfn_ = simpleExtends(TSpan_, 'Dfn');
T.Dfn = new T.Dfn_();
T.Samp_ = simpleExtends(TSpan_, 'Samp');
T.Samp = new T.Samp_();
T.Kdb_ = simpleExtends(TSpan_, 'Kdb');
T.Kdb = new T.Kdb_();
T.Cite_ = simpleExtends(TSpan_, 'Cite');
T.Cite = new T.Cite_();
T.Dialog_ = simpleExtends(TSpan_, 'Dialog');
T.Dialog = new T.Dialog_();

var TMeter_ = function (_TSpan_15) {
  _inherits(TMeter_, _TSpan_15);

  function TMeter_(name, desc) {
    _classCallCheck(this, TMeter_);

    return _possibleConstructorReturn(this, (TMeter_.__proto__ || Object.getPrototypeOf(TMeter_)).call(this, name || 'Meter', desc));
  }

  _createClass2(TMeter_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TMeter_.prototype.__proto__ || Object.getPrototypeOf(TMeter_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.value = [iLevel + 1, 'string'];
      dSchema.high = [iLevel + 2, 'string'];
      dSchema.low = [iLevel + 3, 'string'];
      dSchema.max = [iLevel + 4, 'string'];
      dSchema.min = [iLevel + 5, 'string'];
      dSchema.optimum = [iLevel + 6, 'string'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TMeter_.prototype.__proto__ || Object.getPrototypeOf(TMeter_.prototype), 'getDefaultProps', this).call(this);
      props['tagName.'] = 'meter';
      return props;
    }
  }]);

  return TMeter_;
}(TSpan_);

T.Meter_ = TMeter_;
T.Meter = new TMeter_();

T.Embed_ = simpleExtends(TSpan_, 'Embed');
T.Embed = new T.Embed_();
T.Object_ = simpleExtends(TSpan_, 'Object');
T.Object = new T.Object_();
T.Param_ = simpleExtends(TSpan_, 'Param');
T.Param = new T.Param_();
T.Ruby_ = simpleExtends(TSpan_, 'Ruby');
T.Ruby = new T.Ruby_();
T.Rp_ = simpleExtends(TSpan_, 'Rp');
T.Rp = new T.Rp_();
T.Rt_ = simpleExtends(TSpan_, 'Rt');
T.Rt = new T.Rt_();

// NavXXX, GroundXXX, OptXXX, RefXXX
//-----------------------------------
function navSetChecked_(comp, checkedId, callback) {
  var gui = comp.$gui;
  if (checkedId && gui.compState) {
    // if compState == 0, not ready yet
    var navKey = gui.navSubkey;
    var oldId = comp.state.checkedId,
        beTrigger = false;
    if (gui.navItems[checkedId]) // is valid checkedId
      beTrigger = true;else if (navKey) {
      var widget = comp.widget,
          subNav = widget && widget[navKey];
      subNav = subNav && subNav.component;
      if (subNav && subNav.props['isNavigator.'] && !disableSwitch(oldId, checkedId)) {
        setAndTrigger(oldId, checkedId); // set immediately, this level is OK whereas sub level may failed
        subNav.fireChecked(checkedId, callback);
        return;
      }
    } else {
      if (Object.keys(gui.navItems).length == 0) // if no sub-nav and no GroundXX, using as opt-group
        beTrigger = true;
    }
    if (beTrigger && !disableSwitch(oldId, checkedId)) {
      setAndTrigger(oldId, checkedId); // set immediately
      comp.reRender(callback); // auto choose checkedId GroundXX to render out
      return;
    }

    // set checkedId even if switch ground failed, but not trigger duals.checkedId
    comp.state.checkedId = checkedId; // set immediately
  }

  if (callback) callback(); // failed

  function disableSwitch(oldId, checkedId) {
    // checkedId not used yet
    if (oldId || oldId === 0) {
      var child = comp.widget;
      child = child && child[oldId];
      child = child && child.component;

      if (child && child.navWillLeave) {
        // GroundXX.navWillLeave defined
        var info = child.navWillLeave();
        if (!info || typeof info == 'string' && !window.confirm(info)) return true; // navWillLeave() return false, or confirm(sMsg) denied
      }
    }
    return false;
  }

  function setAndTrigger(sOld, sNew) {
    comp.state.checkedId = sNew; // avoid using duals.checkedId = xx
    triggerDual_(comp, 'checkedId', sOld);
  }
}

var TNavPanel_ = function (_TPanel_3) {
  _inherits(TNavPanel_, _TPanel_3);

  function TNavPanel_(name, desc) {
    _classCallCheck(this, TNavPanel_);

    var _this40 = _possibleConstructorReturn(this, (TNavPanel_.__proto__ || Object.getPrototypeOf(TNavPanel_)).call(this, name || 'NavPanel', desc));

    _this40._silentProp.push('isNavigator.');
    return _this40;
  }

  _createClass2(TNavPanel_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TNavPanel_.prototype.__proto__ || Object.getPrototypeOf(TNavPanel_.prototype), 'getDefaultProps', this).call(this);
      dProp['isNavigator.'] = 1;
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TNavPanel_.prototype.__proto__ || Object.getPrototypeOf(TNavPanel_.prototype), 'getInitialState', this).call(this);

      dState.checkedId = '';
      Object.defineProperty(this.duals, 'checkedId', { enumerable: true, configurable: true,
        get: function () {
          return this.state.checkedId;
        }.bind(this),
        set: function set(value, oldValue) {
          // no need bind this
          throw new Error('property (checkedId) is readonly');
        }
      });

      var gui = this.$gui;
      gui.navItems = {};
      gui.navOrder = [];
      gui.navSubkey = undefined; // sub NavXX

      if (this.widget && this.widget === topmostWidget_) utils.instantShow('error: NavPanel/NavDiv can not be used at topmost.');

      gui.updateNavItems = function () {
        var bComp = gui.comps,
            iLen = bComp.length;
        gui.navSubkey = undefined;
        if (W.__design__) gui.navItems = {};
        // else, not W.__design__, GroundXX should not be online removed by setChild()

        var bExist = [];
        for (var i = 0; i < iLen; i++) {
          var child = bComp[i];
          if (child) {
            var iTmp,
                sKey = getElementKey_(child);
            if (!sKey) continue;

            if (child.props['isNavigator.']) gui.navSubkey = sKey;
            if (parseInt(sKey) + '' === sKey) continue;

            if (child.props['isPlayground.']) {
              gui.navItems[sKey] = child;
              bExist.push([sKey, true]);
            } else bExist.push([sKey, false]);
          }
        }

        // remove no-using none-ground in gui.navOrder, and merge existing ground to bExist
        var iLastPos = bExist.length;
        for (var i = gui.navOrder.length - 1; i >= 0; i--) {
          var item = gui.navOrder[i];
          if (item[1]) {
            // is GroundXX
            if (findExistKey(item[0]) < 0) // merge to bExist
              bExist.splice(iLastPos, 0, item);
            // else, ignore
          } else {
            var iTmp = findExistKey(item[0]);
            if (iTmp < 0) // the item removed just now
              gui.navOrder.splice(i, 1);else iLastPos = iTmp;
          }
        }
        gui.navOrder = bExist;

        function findExistKey(sKey) {
          return bExist.findIndex(function (item) {
            return item[0] === sKey;
          });
        }
      };

      this.defineDual('childNumId', function (value, oldValue) {
        gui.updateNavItems();
      });

      return dState;
    }
  }, {
    key: 'listOptComp',
    value: function listOptComp(withKey) {
      var ret = [];
      var widget = this.widget;
      if (!widget) return ret;

      var comps = this.$gui.comps,
          iLen = comps.length;
      for (var i = 0; i < iLen; i++) {
        var child = comps[i];
        if (child && !child.props['isPlayground.']) {
          var sKey = getElementKey_(child),
              wdgt = sKey && widget[sKey];
          if (wdgt && scanOneLevel(wdgt)) return ret;
        }
      }
      return ret;

      function scanOneLevel(wdgt) {
        var ownerObj = wdgt.component;
        if (ownerObj) {
          if (ownerObj.props['isOption.']) {
            if (withKey) {
              if (withKey === ownerObj.$gui.keyid) {
                ret.push(ownerObj);
                return true; // quit
              }
            } else ret.push(ownerObj);
          } else if (ownerObj.props['isNavigator.']) return false; // quit, not scan sub level of NavXX
          else {
              var comps = ownerObj.$gui.comps,
                  iLen = comps.length;
              for (var i = 0; i < iLen; i++) {
                var child = comps[i];
                if (child) {
                  var sKey = getElementKey_(child),
                      childWdgt = sKey && wdgt[sKey];
                  if (childWdgt && scanOneLevel(childWdgt)) return true;
                }
              }
            }
        }
        return false;
      }
    }
  }, {
    key: 'fireChecked',
    value: function fireChecked(sKeyid, callback) {
      // sKeyid should be string
      if (this.isHooked && sKeyid && sKeyid !== this.state.checkedId) {
        sKeyid = sKeyid + '';
        var b = this.listOptComp(sKeyid),
            childObj = b[0];
        if (childObj && childObj.setChecked) {
          childObj.setChecked(callback); // auto set this.state.checkedId
          return;
        } else if (!childObj) {
          // no OptXX defined, try show GroundXX directly
          navSetChecked_(this, sKeyid, callback);
          return;
        }
      }
      if (callback) callback();
    }
  }, {
    key: 'prepareState',
    value: function prepareState() {
      var gui = this.$gui,
          oldWd = gui.cssWidth,
          oldHi = gui.cssHeight;
      var bChild = _get(TNavPanel_.prototype.__proto__ || Object.getPrototypeOf(TNavPanel_.prototype), 'prepareState', this).call(this);

      if (!gui.isPanel && this.isHooked) {
        // pass resizing for Unit-like widget (TNavDiv_)
        if (typeof gui.cssWidth == 'number' && oldWd !== gui.cssWidth || typeof gui.cssHeight == 'number' && oldHi !== gui.cssHeight || utils.dragInfo.justResized) {
          var self = this;
          setTimeout(function () {
            propagateResizing_(self, utils.dragInfo.inDragging);
          }, 0);
        }
      }
      return bChild;
    }
  }, {
    key: 'render',
    value: function render() {
      syncProps_(this);
      if (this['hide.']) return null; // as <noscript>

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      var bChild = this.prepareState(); // bChild is copy of gui.comps

      if (W.__design__) {
        // 'display:none' for none-active playground
        var wdgt = this.widget;
        if (wdgt) {
          setTimeout(function () {
            bChild.forEach(function (child) {
              var sKey = child && getElementKey_(child);
              var obj = sKey && wdgt[sKey];
              obj = obj && obj.component;
              if (obj) obj.reRender(); // re-render since 'display:none' not driven by attr-changing
            });
          }, 0);
        }
      } else {
        // not includes none-active playground to render
        var checkedId = this.state.checkedId + '',
            idx = bChild.length - 1,
            found = false;
        while (idx >= 0) {
          var child = bChild[idx];
          if (child.props['isPlayground.']) {
            if (checkedId && checkedId == getElementKey_(child)) found = true;else bChild.splice(idx, 1);
          }
          idx -= 1;
        }

        if (!found && checkedId) {
          // checkedId should be string
          var gui = this.$gui,
              child = gui.navItems[checkedId];
          if (child) {
            // then, prepare GroundXX in order
            var iPos = gui.navOrder.findIndex(function (item) {
              return item[0] === checkedId;
            });
            if (iPos < 0) bChild.push(child);else {
              var bNear = gui.navOrder.slice(iPos + 1),
                  iFrom = 0;
              var iTarg,
                  iPos2,
                  succ = false;
              while ((iTarg = bNear.findIndex(function (item, idx) {
                return idx >= iFrom && !item[1];
              })) >= 0) {
                iPos2 = findInsPos(bChild, bNear[iTarg][0]); // bNear[iTarg][0] is none-ground sKeyid
                if (iPos2 >= 0) {
                  succ = true;
                  break;
                }
                iFrom = iTarg;
              }

              if (!succ) bChild.push(child);else bChild.splice(iPos2, 0, child);
            }
          }
        }
      }

      var props = setupRenderProp_(this),
          insEle = this.$gui.insertEle;
      if (insEle) bChild = middleClone_(insEle, bChild);
      return reactCreate_(sTag, props, bChild);

      function findInsPos(bChild, sKey) {
        for (var i = 0, child; child = bChild[i]; i++) {
          if (sKey == getElementKey_(child)) return i;
        }
        return -1;
      }
    }
  }]);

  return TNavPanel_;
}(TPanel_);

T.NavPanel_ = TNavPanel_;
T.NavPanel = new TNavPanel_();

var TNavDiv_ = function (_TNavPanel_) {
  _inherits(TNavDiv_, _TNavPanel_);

  function TNavDiv_(name, desc) {
    _classCallCheck(this, TNavDiv_);

    // this._silentProp.push('isNavigator.'); // has defined in base class
    var _this41 = _possibleConstructorReturn(this, (TNavDiv_.__proto__ || Object.getPrototypeOf(TNavDiv_)).call(this, name || 'NavDiv', desc));

    _this41._defaultProp.height = null;
    _this41._defaultProp.minHeight = 20;
    return _this41;
  }

  _createClass2(TNavDiv_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TNavDiv_.prototype.__proto__ || Object.getPrototypeOf(TNavDiv_.prototype), 'getDefaultProps', this).call(this);
      dProp.className = 'rewgt-unit'; // overwrite TNavPanel_'s default
      dProp['isNavigator.'] = 2;
      // dProp['tagName.'] = 'div';    // default is 'div'
      dProp.height = null;
      dProp.minHeight = 20;
      return dProp;
    }
  }]);

  return TNavDiv_;
}(TNavPanel_);

T.NavDiv_ = TNavDiv_;
T.NavDiv = new TNavDiv_();

function designRenderGround(obj, iGroundId) {
  syncProps_(obj);
  if (obj['hide.']) return null; // as <noscript>

  var sTag = obj.state['tagName.'];
  if (!sTag) return getOnlyChild_(obj);

  var inNav = false,
      checkedId = undefined,
      ownerObj = obj.parentOf(true);
  if (ownerObj && ownerObj.props['isNavigator.']) {
    checkedId = ownerObj.state.checkedId || '';
    inNav = true;
  }

  var bChild = obj.prepareState();
  var dStyle = Object.assign({}, obj.state.style);
  if (inNav) {
    if (checkedId && checkedId == obj.$gui.keyid) // show it
      dStyle.display = 'block';else dStyle.display = 'none'; // hide it
  }
  // else, keep dStyle.display no changing
  var hasChild = bChild.length,
      insEle = obj.$gui.insertEle;
  if (insEle) {
    bChild = middleClone_(insEle, bChild);hasChild = true;
  }

  if (!hasChild && iGroundId == 2) bChild = obj.state['html.'] || null;

  var props = setupRenderProp_(obj, dStyle);
  return reactCreate_(sTag, props, bChild);
}

var TGroundPanel_ = function (_TPanel_4) {
  _inherits(TGroundPanel_, _TPanel_4);

  function TGroundPanel_(name, desc) {
    _classCallCheck(this, TGroundPanel_);

    var _this42 = _possibleConstructorReturn(this, (TGroundPanel_.__proto__ || Object.getPrototypeOf(TGroundPanel_)).call(this, name || 'GroundPanel', desc));

    _this42._silentProp.push('isPlayground.');
    _this42._defaultProp.height = null;
    _this42._defaultProp.minHeight = 20;
    return _this42;
  }

  _createClass2(TGroundPanel_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TGroundPanel_.prototype.__proto__ || Object.getPrototypeOf(TGroundPanel_.prototype), 'getDefaultProps', this).call(this);
      props['isPlayground.'] = 1;
      props.width = 0.9999;
      props.height = null;
      props.minHeight = 20;
      return props;
    }
  }, {
    key: 'render',
    value: function render() {
      if (W.__design__) return designRenderGround(this, 1);else return _get(TGroundPanel_.prototype.__proto__ || Object.getPrototypeOf(TGroundPanel_.prototype), 'render', this).call(this);
    }
  }]);

  return TGroundPanel_;
}(TPanel_);

T.GroundPanel_ = TGroundPanel_;
T.GroundPanel = new TGroundPanel_();

var TGroundDiv_ = function (_TUnit_5) {
  _inherits(TGroundDiv_, _TUnit_5);

  function TGroundDiv_(name, desc) {
    _classCallCheck(this, TGroundDiv_);

    var _this43 = _possibleConstructorReturn(this, (TGroundDiv_.__proto__ || Object.getPrototypeOf(TGroundDiv_)).call(this, name || 'GroundDiv', desc));

    _this43._silentProp.push('isPlayground.');
    _this43._defaultProp.height = null;
    _this43._defaultProp.minHeight = 20;
    _this43._htmlText = true;
    return _this43;
  }

  _createClass2(TGroundDiv_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TGroundDiv_.prototype.__proto__ || Object.getPrototypeOf(TGroundDiv_.prototype), 'getDefaultProps', this).call(this);
      // props.className = 'rewgt-unit'; // default is 'rewgt-unit'
      // props['childInline.'] = false;  // default is false
      props.width = 0.9999;
      props.height = null;
      props.minHeight = 20;
      // props['tagName.'] = 'div';      // default is 'div'
      props['isPlayground.'] = 2;
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TGroundDiv_.prototype.__proto__ || Object.getPrototypeOf(TGroundDiv_.prototype), 'getInitialState', this).call(this);

      dState['html.'] = null;
      this.defineDual('html.', function (value, oldValue) {
        this.state['html.'] = value || null;
      });

      return dState;
    }
  }, {
    key: 'render',
    value: function render() {
      if (W.__design__) return designRenderGround(this, 2);else {
        syncProps_(this);
        if (this['hide.']) return null; // as <noscript>

        var sTag = this.state['tagName.'];
        if (!sTag) return getOnlyChild_(this);

        var bChild = this.prepareState(),
            hasChild = bChild.length;
        var props = setupRenderProp_(this),
            insEle = this.$gui.insertEle;
        if (insEle) {
          bChild = middleClone_(insEle, bChild);hasChild = true;
        }
        return reactCreate_(sTag, props, hasChild ? bChild : this.state['html.']);
      }
    }
  }]);

  return TGroundDiv_;
}(TUnit_);

T.GroundDiv_ = TGroundDiv_;
T.GroundDiv = new TGroundDiv_();

function findNavOwner_(thisObj) {
  var owner = thisObj.widget;
  owner = owner && owner.parent;

  while (owner) {
    var ownerObj = owner.component;
    if (ownerObj) {
      if (ownerObj.props['isNavigator.']) return ownerObj;
      owner = owner.parent;
    } else break;
  }

  return null;
}

function optPopWindow_(self, popOption, newOpt, callback) {
  // callback should be available function
  if (typeof popOption.path == 'string') {
    if (!popOption.state) popOption.state = { opened: false };
    if (newOpt) {
      delete newOpt.state;
      popOption = Object.assign({}, popOption, newOpt);
    } else popOption = Object.assign({}, popOption);

    if (!popOption.state.opened) {
      var sPath = popOption.path;
      if (!sPath) sPath = './' + this.$gui.keyid;
      var ele = self.componentOf(sPath);
      ele = ele && ele.fullClone();

      if (!ele) utils.instantShow('warning: can not locate popup window (' + sPath + ').');else {
        utils.popWin.showWindow(ele, popOption, function () {
          self.duals['data-checked'] = '1';
          callback(true);
        }, self);
        return;
      }
    }
  }

  callback(false); // popup window failed
}

function trySyncUncheck_(self, ownerObj) {
  if (!ownerObj) ownerObj = self.findNavOwner();
  if (!ownerObj) return;

  var thisKey = self.$gui.keyid,
      bList = ownerObj.listOptComp();
  bList.forEach(function (comp) {
    if (comp !== self && comp.clearChecked && comp.$gui.keyid !== thisKey) comp.clearChecked();
  });
}

function setOptChecked_(self, callback, newOpt, isForce) {
  function delayCallback(bTime) {
    // called only has callback
    var iWait = bTime.shift();
    if (iWait) {
      setTimeout(function () {
        if (self.state['data-checked']) callback();else delayCallback(bTime);
      }, iWait);
    } else callback(); // force callback
  }

  if (self.state.disabled && !isForce) {
    if (callback) callback();
  }

  var recheckable = self.state.recheckable;
  var currChecked = self.state['data-checked'];

  var popOption = self.state.popOption;
  if (popOption) {
    if (!popOption.state || !popOption.state.opened) {
      if (recheckable || !currChecked) {
        optPopWindow_(self, popOption, newOpt, function (succ) {
          if (callback) callback();
        });
      }
      return;
    } else {
      // popOption.state.opened, fired by duals['data-checked'] = '1'
      if (!isForce) return; // else, isForce, continue next process
    }
  }

  if (!currChecked) {
    self.duals['data-checked'] = '1'; // redirect to duals['data-checked'] = '1'
    if (callback) delayCallback([100, 100, 100]); // max wait 300 ms, if not ready force callback
    return;
  }

  if (recheckable) {
    self.state.recheckable = false; // avoid re-enter
    setTimeout(function () {
      self.state.recheckable = true;
    }, 300);
  }

  var justSet = false,
      ownerObj = null;
  function doCallback() {
    if (justSet) {
      trySyncUncheck_(self, ownerObj);
      self.fireTrigger();
    }
    if (callback) callback();
  }

  if (self.state.isolated) {
    if (isForce || recheckable) justSet = true;
    doCallback();
    return;
  }

  ownerObj = self.findNavOwner();
  if (ownerObj) {
    var sKeyid = self.$gui.keyid + '';
    if (ownerObj.state.checkedId !== sKeyid || isForce || recheckable) {
      if (!ownerObj.canNavigateTo || ownerObj.canNavigateTo(sKeyid)) {
        if (isForce || recheckable) justSet = true;
        navSetChecked_(ownerObj, sKeyid, doCallback); // fire navigation
        return;
      }
    }
  }
  doCallback();
}

function defineOptDual_(self, state) {
  var beTrigger = boolToStr_(self.props.$trigger || self.props.popOption);
  self.defineDual('isolated', function (value, oldValue) {
    this.state.isolated = boolToStr_(value);
  }); // default is undefined
  if (self.props.isolated === undefined) self.duals.isolated = beTrigger; // if use as trigger, try default isolated
  // else, will auto assign from props.isolated 

  self.defineDual('recheckable', function (value, oldValue) {
    this.state.recheckable = boolToStr_(value);
  }); // default is undefined
  if (self.props.recheckable === undefined) self.duals.recheckable = beTrigger; // if use as trigger, try default recheckable
  // else, will auto assign from props.recheckable 

  state.disabled = '';
  self.defineDual('disabled', function (value, oldValue) {
    this.state.disabled = boolToStr_(value);
  });

  self.defineDual('popOption');

  state['data-checked'] = '';
  self.defineDual('data-checked', function (value, oldValue) {
    var sOld = boolToStr_(oldValue),
        sNew = boolToStr_(value);
    if (sOld != sNew) {
      if (sNew) {
        self.state['data-checked'] = sNew; // avoid recusive dual-assign
        setTimeout(function () {
          self.setChecked(null, undefined, true); // callback=null, isForce=true
        }, 0);
      } else self.state['data-checked'] = sNew;
    } else self.state['data-checked'] = sOld; // no changing, fix value to '' or '1'
  });
}

function addOptSchema_(dSchema, iLevel) {
  dSchema['data-checked'] = [iLevel + 1, 'string', ['', '1']];
  dSchema.isolated = [iLevel + 2, 'string', ['', '1']];
  dSchema.disabled = [iLevel + 3, 'string', ['', '1']];
  dSchema.recheckable = [iLevel + 4, 'string', ['', '1']];
  dSchema.trigger = [iLevel + 5, 'string', null, '[string]: [sPath,{trigger,pop_option},[sPath,modifier], ...]'];
  dSchema.popOption = [iLevel + 6, 'object', null, '[object]: {path:bodyElePath}'];
  return dSchema;
}

var TOptSpan_ = function (_TSpan_16) {
  _inherits(TOptSpan_, _TSpan_16);

  function TOptSpan_(name, desc) {
    _classCallCheck(this, TOptSpan_);

    var _this44 = _possibleConstructorReturn(this, (TOptSpan_.__proto__ || Object.getPrototypeOf(TOptSpan_)).call(this, name || 'OptSpan', desc));

    _this44._statedProp.push('data-checked');
    _this44._silentProp.push('isOption.');
    _this44._defaultProp['data-checked'] = '';
    return _this44;
  }

  _createClass2(TOptSpan_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TOptSpan_.prototype.__proto__ || Object.getPrototypeOf(TOptSpan_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      return addOptSchema_(dSchema, iLevel);
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TOptSpan_.prototype.__proto__ || Object.getPrototypeOf(TOptSpan_.prototype), 'getDefaultProps', this).call(this);
      dProp['data-checked'] = ''; // force using this.state['data-checked']
      dProp['isOption.'] = true;
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TOptSpan_.prototype.__proto__ || Object.getPrototypeOf(TOptSpan_.prototype), 'getInitialState', this).call(this);
      defineOptDual_(this, dState);
      return dState;
    }
  }, {
    key: 'findNavOwner',
    value: function findNavOwner() {
      return findNavOwner_(this);
    }
  }, {
    key: 'fireTrigger',
    value: function fireTrigger() {
      fireTrigger_(undefined, this); // auto check gui.syncTrigger // force fire action
    }
  }, {
    key: 'clearChecked',
    value: function clearChecked() {
      // only clear this, not sync others in same group
      if (this.state['data-checked']) this.duals['data-checked'] = '';
    }
  }, {
    key: 'setChecked',
    value: function setChecked(callback, newOpt, isForce) {
      // isForce means force re-selelect
      setOptChecked_(this, callback, newOpt, isForce);
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      if (this.state.disabled) return;

      this.setChecked(null);
      if (this.$onClick) this.$onClick(event); // call by pass this
    }
  }]);

  return TOptSpan_;
}(TSpan_);

T.OptSpan_ = TOptSpan_;
T.OptSpan = new TOptSpan_();

var TOptA_ = function (_TOptSpan_) {
  _inherits(TOptA_, _TOptSpan_);

  function TOptA_(name, desc) {
    _classCallCheck(this, TOptA_);

    return _possibleConstructorReturn(this, (TOptA_.__proto__ || Object.getPrototypeOf(TOptA_)).call(this, name || 'OptA', desc));
  }

  _createClass2(TOptA_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TOptA_.prototype.__proto__ || Object.getPrototypeOf(TOptA_.prototype), 'getDefaultProps', this).call(this);
      dProp['tagName.'] = 'a';
      return dProp;
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      if (W.__design__) event.preventDefault(); // avoid jump to target href
      _get(TOptA_.prototype.__proto__ || Object.getPrototypeOf(TOptA_.prototype), '$$onClick', this).call(this, event);
    }
  }]);

  return TOptA_;
}(TOptSpan_);

T.OptA_ = TOptA_;
T.OptA = new TOptA_();

var TOptImg_ = function (_TOptSpan_2) {
  _inherits(TOptImg_, _TOptSpan_2);

  function TOptImg_(name, desc) {
    _classCallCheck(this, TOptImg_);

    var _this46 = _possibleConstructorReturn(this, (TOptImg_.__proto__ || Object.getPrototypeOf(TOptImg_)).call(this, name || 'OptImg', desc));

    _this46._htmlText = false;
    return _this46;
  }

  _createClass2(TOptImg_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TOptImg_.prototype.__proto__ || Object.getPrototypeOf(TOptImg_.prototype), 'getDefaultProps', this).call(this);
      dProp['tagName.'] = 'img';
      return dProp;
    }
  }]);

  return TOptImg_;
}(TOptSpan_);

T.OptImg_ = TOptImg_;
T.OptImg = new TOptImg_();

var TOptButton_ = function (_TOptSpan_3) {
  _inherits(TOptButton_, _TOptSpan_3);

  function TOptButton_(name, desc) {
    _classCallCheck(this, TOptButton_);

    return _possibleConstructorReturn(this, (TOptButton_.__proto__ || Object.getPrototypeOf(TOptButton_)).call(this, name || 'OptButton', desc));
  }

  _createClass2(TOptButton_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TOptButton_.prototype.__proto__ || Object.getPrototypeOf(TOptButton_.prototype), 'getDefaultProps', this).call(this);
      dProp['tagName.'] = 'button';
      return dProp;
    }
  }]);

  return TOptButton_;
}(TOptSpan_);

T.OptButton_ = TOptButton_;
T.OptButton = new TOptButton_();

var TOptOption_ = function (_TOptSpan_4) {
  _inherits(TOptOption_, _TOptSpan_4);

  function TOptOption_(name, desc) {
    _classCallCheck(this, TOptOption_);

    var _this48 = _possibleConstructorReturn(this, (TOptOption_.__proto__ || Object.getPrototypeOf(TOptOption_)).call(this, name || 'OptOption', desc));

    _this48._silentProp.push('selected'); // not save 'selected', suggest only using 'data-checked'
    return _this48;
  }

  _createClass2(TOptOption_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TOptOption_.prototype.__proto__ || Object.getPrototypeOf(TOptOption_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.value = [iLevel + 1, 'string'];
      dSchema.label = [iLevel + 2, 'string'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TOptOption_.prototype.__proto__ || Object.getPrototypeOf(TOptOption_.prototype), 'getDefaultProps', this).call(this);
      dProp['tagName.'] = 'option';
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TOptOption_.prototype.__proto__ || Object.getPrototypeOf(TOptOption_.prototype), 'getInitialState', this).call(this),
          gui = this.$gui;

      var ownerComp = this.parentOf(true);
      if (ownerComp) {
        if (ownerComp.props['tagName.'] == 'optgroup') ownerComp = ownerComp.parentOf(true);

        if (ownerComp && ownerComp.props['tagName.'] == 'select') {
          // under control
          if (ownerComp.props.multiple) {
            console.log('error: can not use OptOption in multiple "select"');
            ownerComp = null;
          } else {
            ownerComp.listen('value', function (value, oldValue) {
              if (!this.isHooked) return;
              this.$gui.syncSelect();
            }.bind(this));
          }
        } else ownerComp = null;
      }

      this.$gui.syncSelect = function () {
        if (!ownerComp) return;
        if (this.state.disabled) return;

        var thisValue = this.state.value;
        if (!thisValue) return; // invalid

        this.duals['data-checked'] = boolToStr_(thisValue === ownerComp.state.value);
      }.bind(this);

      this.defineDual('data-checked', function (value, oldValue) {
        var sValue = boolToStr_(value);
        if (hasOwn_.call(this.props, 'selected')) this.state.selected = sValue; // avoid using duals.selected = xx

        var self = this;
        setTimeout(function () {
          var node = self.getHtmlNode();
          if (node) {
            node.selected = !!sValue;
            if (sValue && ownerComp) {
              var selfValue = self.state.value;
              if (selfValue) // need fire ownerComp.duals.value, it not auto fired by ownerComp.onChange
                ownerComp.duals.value = selfValue;
            }
          }
        }, 0);
      });
      return dState;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TOptOption_.prototype.__proto__ || Object.getPrototypeOf(TOptOption_.prototype), 'componentDidMount', this).call(this);
      this.$gui.syncSelect();
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      // overwrite super.$$onClick
      if (W.__design__) {
        event.preventDefault();
        // fireOption_(this);
      }

      if (this.$onClick) this.$onClick(event);
    }
  }]);

  return TOptOption_;
}(TOptSpan_);

T.OptOption_ = TOptOption_;
T.OptOption = new TOptOption_();

var TOptDiv_ = function (_TDiv_3) {
  _inherits(TOptDiv_, _TDiv_3);

  function TOptDiv_(name, desc) {
    _classCallCheck(this, TOptDiv_);

    var _this49 = _possibleConstructorReturn(this, (TOptDiv_.__proto__ || Object.getPrototypeOf(TOptDiv_)).call(this, name || 'OptDiv', desc));

    _this49._statedProp.push('data-checked');
    _this49._silentProp.push('isOption.');
    _this49._defaultProp['data-checked'] = '';
    return _this49;
  }

  _createClass2(TOptDiv_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TOptDiv_.prototype.__proto__ || Object.getPrototypeOf(TOptDiv_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      return addOptSchema_(dSchema, iLevel);
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TOptDiv_.prototype.__proto__ || Object.getPrototypeOf(TOptDiv_.prototype), 'getDefaultProps', this).call(this);
      // dProp['tagName.'] = 'div';  // default is 'div'
      dProp['data-checked'] = '';
      dProp['isOption.'] = true;
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TOptDiv_.prototype.__proto__ || Object.getPrototypeOf(TOptDiv_.prototype), 'getInitialState', this).call(this);
      defineOptDual_(this, dState);
      return dState;
    }
  }, {
    key: 'findNavOwner',
    value: function findNavOwner() {
      return findNavOwner_(this);
    }
  }, {
    key: 'fireTrigger',
    value: function fireTrigger() {
      fireTrigger_(undefined, this);
    }
  }, {
    key: 'clearChecked',
    value: function clearChecked() {
      // only clear this, not sync others in same group
      if (this.state['data-checked']) this.duals['data-checked'] = '';
    }
  }, {
    key: 'setChecked',
    value: function setChecked(callback, newOpt, isForce) {
      setOptChecked_(this, callback, newOpt, isForce);
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      if (this.state.disabled) return;

      this.setChecked(null);
      if (this.$onClick) this.$onClick(event); // by pass this
    }
  }]);

  return TOptDiv_;
}(TDiv_);

T.OptDiv_ = TOptDiv_;
T.OptDiv = new TOptDiv_();

var TOptLi_ = function (_TP_10) {
  _inherits(TOptLi_, _TP_10);

  function TOptLi_(name, desc) {
    _classCallCheck(this, TOptLi_);

    var _this50 = _possibleConstructorReturn(this, (TOptLi_.__proto__ || Object.getPrototypeOf(TOptLi_)).call(this, name || 'OptLi', desc));

    _this50._statedProp.push('data-checked');
    _this50._silentProp.push('isOption.');
    _this50._defaultProp['data-checked'] = '';
    return _this50;
  }

  _createClass2(TOptLi_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TOptLi_.prototype.__proto__ || Object.getPrototypeOf(TOptLi_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      return addOptSchema_(dSchema, iLevel);
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TOptLi_.prototype.__proto__ || Object.getPrototypeOf(TOptLi_.prototype), 'getDefaultProps', this).call(this); // default width/height as TP_
      dProp['tagName.'] = 'li';
      dProp['data-checked'] = '';
      dProp['isOption.'] = true;
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TOptLi_.prototype.__proto__ || Object.getPrototypeOf(TOptLi_.prototype), 'getInitialState', this).call(this);
      defineOptDual_(this, dState);
      return dState;
    }
  }, {
    key: 'findNavOwner',
    value: function findNavOwner() {
      return findNavOwner_(this);
    }
  }, {
    key: 'fireTrigger',
    value: function fireTrigger() {
      fireTrigger_(undefined, this);
    }
  }, {
    key: 'clearChecked',
    value: function clearChecked() {
      // only clear this, not sync others in same group
      if (this.state['data-checked']) this.duals['data-checked'] = '';
    }
  }, {
    key: 'setChecked',
    value: function setChecked(callback, newOpt, isForce) {
      setOptChecked_(this, callback, newOpt, isForce);
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      if (this.state.disabled) return;

      this.setChecked(null);
      if (this.$onClick) this.$onClick(event); // by pass this
    }
  }]);

  return TOptLi_;
}(TP_);

T.OptLi_ = TOptLi_;
T.OptLi = new TOptLi_();

var TOptInput_ = function (_TOptSpan_5) {
  _inherits(TOptInput_, _TOptSpan_5);

  function TOptInput_(name, desc) {
    _classCallCheck(this, TOptInput_);

    var _this51 = _possibleConstructorReturn(this, (TOptInput_.__proto__ || Object.getPrototypeOf(TOptInput_)).call(this, name || 'OptInput', desc)); // input.type: checkbox radio button image reset submit


    _this51._htmlText = false;
    return _this51;
  }

  _createClass2(TOptInput_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TOptInput_.prototype.__proto__ || Object.getPrototypeOf(TOptInput_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.type = [iLevel + 1, 'string', ['checkbox', 'radio', 'button', 'image']];
      dSchema.value = [iLevel + 2, 'string'];
      dSchema.src = [iLevel + 3, 'string'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TOptInput_.prototype.__proto__ || Object.getPrototypeOf(TOptInput_.prototype), 'getDefaultProps', this).call(this);
      dProp['tagName.'] = 'input';
      dProp.type = 'checkbox';
      dProp.checked = '';
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TOptInput_.prototype.__proto__ || Object.getPrototypeOf(TOptInput_.prototype), 'getInitialState', this).call(this);

      var sType = this.props.type;
      if (sType === 'checkbox' || sType === 'radio') {
        // no use duals.check, change to data-checked
        if (this.props.checked === undefined) // ignore defaultChecked
          this.$gui.tagAttrs.push('checked');
      } else {
        var initValue = this.props.value !== undefined ? this.props.value || '' : this.props.defaultValue || '';
        this.defineDual('value', null, initValue);
      }

      this.defineDual('data-checked', function (value, oldValue) {
        this.state.checked = boolToStr_(value); // not use duals.checked = xx
      });

      return dState;
    }
  }, {
    key: 'clearChecked',
    value: function clearChecked(targ) {
      if (!targ) targ = this.getHtmlNode();
      if (targ) {
        if (targ.checked) targ.checked = false; // will trigger onChange
        if (this.state['data-checked']) this.duals['data-checked'] = '';
      }
    }
  }, {
    key: '$$onChange',
    value: function $$onChange(event) {
      if (W.__design__) event.stopPropagation();

      var sType = this.state.type,
          targ = event.target;
      if (sType === 'checkbox' || sType === 'radio') {
        if (targ.checked) this.setChecked(null);else this.clearChecked(targ);
      } else this.duals.value = targ.value;

      if (this.$onChange) this.$onChange(event);
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      if (this.state.disabled) return;

      var sType = this.state.type;
      if (sType !== 'checkbox' && sType !== 'radio') this.setChecked(null);

      if (this.$onClick) this.$onClick(event);
    }
  }]);

  return TOptInput_;
}(TOptSpan_);

T.OptInput_ = TOptInput_;
T.OptInput = new TOptInput_();

function setTemplateChild_(temp, child) {
  var sPath = getElementKey_(child);
  if (!sPath) return false; // child of template must has key, otherwise, can not be referenced

  var iTmp = parseInt(sPath),
      keyid_ = iTmp + '' === sPath ? iTmp : sPath;
  var ele,
      iFlag = 1;
  if (child.props['isReference.']) {
    iFlag = 2;
    if (sPath[0] == '$') {
      sPath = sPath.slice(1);
      var iTmp = parseInt(sPath);
      if (iTmp + '' == sPath) keyid_ = iTmp;
    }
    ele = reactClone_(child, { 'hookTo.': temp, 'keyid.': keyid_, key: sPath });
  } else {
    ele = reactClone_(child, { 'hookTo.': temp, 'keyid.': keyid_, key: sPath });
    if (child.props['isTemplate.']) {
      iFlag = 4;
      ele = new templateNode(ele);
      ele.pathSeg = sPath;
    } else if (child.props['isNavigator.']) iFlag = 3;
  }

  var bInfo = [iFlag, ele, ''];
  temp.comps[sPath] = bInfo;
  if (iFlag != 2) // no need scan child of ref node
    scanEveryChild(temp, sPath, bInfo, '');
  return true;

  function scanEveryChild(temp, sPath, bInfo, ownerSeg) {
    var iFlag = bInfo[0],
        ele = bInfo[1];
    var children = iFlag == 4 ? ele.element.props.children : ele.props.children; // not use childElements_() since we only scan in initializing
    if (!children) return;

    var ownerSeg2 = ownerSeg;
    if (iFlag == 3) ownerSeg2 = sPath;else if (iFlag == 4) {
      temp = ele;
      ownerSeg2 = sPath;
      sPath = '';
    }

    React.Children.forEach(children, function (child, idx) {
      var keyid = child.props['keyid.'];
      if (!keyid && keyid !== 0) {
        var sKey = getElementKey_(child);
        if (sKey) {
          var iTmp = parseInt(sKey);
          if (iTmp + '' === sKey) keyid = iTmp;else keyid = sKey;
        } else keyid = idx;
      }

      var sKeyid = keyid + '';
      var iFlag2 = 1,
          ele2 = reactClone_(child, { 'keyid.': keyid, key: sKeyid, 'hookTo.': temp });
      var sPath2 = sPath ? sPath + '.' + sKeyid : sKeyid;
      if (child.props['isTemplate.']) {
        iFlag2 = 4;
        ele2 = new templateNode(ele2);
        ele2.pathSeg = sPath2; // ownerTemp.comps[pathSeg] = [4,ele2, ...]
      } else if (child.props['isNavigator.']) iFlag2 = 3;else if (child.props['isReference.']) iFlag2 = 2;

      var bInfo2 = [iFlag2, ele2, ownerSeg2];
      temp.comps[sPath2] = bInfo2;
      if (iFlag2 != 2) scanEveryChild(temp, sPath2, bInfo2, ownerSeg2); // sPath2 must not ''
    });
  }
}

function setupTemplateTree(thisObj) {
  // add thisObj.$gui.template
  var owner = thisObj.widget,
      temp = null;
  owner = owner && owner.parent;
  if (owner) {
    var ownerObj = owner.component;
    if (ownerObj) {
      var idx = ownerObj.$gui.compIdx[thisObj.$gui.keyid];
      if (typeof idx == 'number') {
        var ele = ownerObj.$gui.comps[idx]; // find TempDiv/TempSpan from owner widget
        if (ele) // ele.props['hookTo.'] === owner
          temp = new templateNode(ele); // temp.pathSeg = ''
      }
    }
  }
  if (!temp) return false;

  thisObj.$gui.template = temp;
  var bComp = thisObj.$gui.comps,
      iLen = bComp.length;
  for (var i = 0; i < iLen; i++) {
    var child = bComp[i];
    if (child) setTemplateChild_(temp, child);
  }
  return true;
}

function checkForIfElse_(gui) {
  var sFlowName = '';
  if (gui.forExpr) {
    sFlowName = 'for';
    gui.forExpr = 0;
  } else if (gui.flowFlag) {
    sFlowName = gui.flowFlag;
    gui.flowFlag = '';
  }
  if (sFlowName) {
    console.log("error: can not use '$" + sFlowName + "' in template widget");
    var iPos = gui.exprAttrs.indexOf(sFlowName);
    if (iPos >= 0) gui.exprAttrs.splice(iPos, 1);
  }
}

function templateElement_(thisObj, sPath) {
  if (!sPath || typeof sPath != 'string') return null; // can not get template's element

  var ch = sPath[0];
  if (ch != '.' && ch != '/') {
    var tempNode = thisObj.$gui.template;
    if (!tempNode) return null;

    var bSeg = sPath.split('.'),
        tempPath = bSeg.shift();
    var b = tempNode.comps[tempPath];
    while (b) {
      var iType = b[0],
          next = b[1];
      if (iType == 2) {
        // ref, no sub level  // [2,element,sOwnerSeg]
        return bSeg.length == 0 ? next : null;
      } else if (iType == 4) {
        // template: [4,tempNode,sOwnerSeg]
        if (bSeg.length == 0) return null; // can not get template's element

        tempNode = next;next = tempNode.element;
        tempPath = bSeg.shift();
        b = tempNode.comps[tempPath];
      } else {
        // 1:normal 3:nav  // [iType,element,sOwnerSeg]
        if (bSeg.length == 0) return next;
        tempPath += '.' + bSeg.shift();
        b = tempNode.comps[tempPath];
      }
    }
  } else {
    var iPos = sPath.lastIndexOf('./'); // any of: ./  or ../
    if (iPos >= 0) {
      var comp = thisObj.componentOf(sPath.slice(0, iPos + 2));
      return comp ? comp.elementOf(sPath.slice(iPos + 2)) : null;
    } else if (ch == '.') {
      // absolute path
      iPos = sPath.indexOf('.', 1);
      if (iPos > 1) {
        var wdgt = W.W(sPath.slice(0, iPos)),
            comp = wdgt && wdgt.component;
        if (comp) return comp.elementOf(sPath.slice(iPos + 1));
      }
    } else if (ch == '/' && sPath[1] == '/') {
      var ownerObj = thisObj.parentOf();
      return ownerObj ? ownerObj.elementOf(sPath.slice(2)) : null;
    }
    // else, unknown format
  }
  return null;
}

var TTempPanel_ = function (_TPanel_5) {
  _inherits(TTempPanel_, _TPanel_5);

  function TTempPanel_(name, desc) {
    _classCallCheck(this, TTempPanel_);

    var _this52 = _possibleConstructorReturn(this, (TTempPanel_.__proto__ || Object.getPrototypeOf(TTempPanel_)).call(this, name || 'TempPanel', desc));

    _this52._silentProp.push('isTemplate.', 'data-temp.type');
    return _this52;
  }

  _createClass2(TTempPanel_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TTempPanel_.prototype.__proto__ || Object.getPrototypeOf(TTempPanel_.prototype), 'getDefaultProps', this).call(this);
      dProp['isTemplate.'] = 1;
      if (W.__design__) dProp['data-temp.type'] = 1;else {
        dProp.width = 0;
        dProp.height = 0; // use zero size to help flex display
      }
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TTempPanel_.prototype.__proto__ || Object.getPrototypeOf(TTempPanel_.prototype), 'getInitialState', this).call(this);

      checkForIfElse_(this.$gui);
      this.isLibGui = false;
      var style_ = this.props.style;
      if (isUnderBody_(this)) {
        this.duals.style = style_ = Object.assign({}, style_, { position: 'absolute' });
        if ((this.$gui.keyid + '').indexOf('$$') == 0) this.isLibGui = true;
      }

      if (W.__design__ && !this.isLibGui) {
        this.duals.style = Object.assign({}, style_, { display: 'none' }); // default hide it
        setupTemplateTree(this);
      } else {
        // not in __design__, show zero width-height
        var template = this.props['template'];
        if (template instanceof templateNode) this.$gui.template = template; // pass from props.template, fixed (no changing)
        else setupTemplateTree(this);
        this.$gui.compIndex = {};
        this.$gui.comps = []; // force no child, referenced to this.$gui.template
      }

      return dState;
    }
  }, {
    key: 'elementOf',
    value: function elementOf(sPath) {
      return templateElement_(this, sPath);
    }
  }, {
    key: 'render',
    value: function render() {
      if (W.__design__ && !this.isLibGui) {
        return _get(TTempPanel_.prototype.__proto__ || Object.getPrototypeOf(TTempPanel_.prototype), 'render', this).call(this);
      } else {
        syncProps_(this);
        if (this['hide.']) return null; // as <noscript>

        var sTag = this.state['tagName.'];
        if (!sTag) return getOnlyChild_(this);

        var dStyle = Object.assign({}, this.state.style, { width: '0px', height: '0px', display: 'none' });
        var props = setupRenderProp_(this, dStyle);
        return reactCreate_(sTag, props); // ignore children
      }
    }
  }]);

  return TTempPanel_;
}(TPanel_);

T.TempPanel_ = TTempPanel_;
T.TempPanel = new TTempPanel_();

var TTempDiv_ = function (_TUnit_6) {
  _inherits(TTempDiv_, _TUnit_6);

  function TTempDiv_(name, desc) {
    _classCallCheck(this, TTempDiv_);

    var _this53 = _possibleConstructorReturn(this, (TTempDiv_.__proto__ || Object.getPrototypeOf(TTempDiv_)).call(this, name || 'TempDiv', desc));

    _this53._silentProp.push('isTemplate.', 'data-temp.type');
    _this53._htmlText = true;
    return _this53;
  }

  _createClass2(TTempDiv_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TTempDiv_.prototype.__proto__ || Object.getPrototypeOf(TTempDiv_.prototype), 'getDefaultProps', this).call(this);
      dProp['isTemplate.'] = 2;
      // dProp['tagName.'] = 'div';  // default is 'div'
      if (W.__design__) {
        // dProp.width = 0.9999; dProp.height = 0.9999;
        dProp['data-temp.type'] = 2;
      } else {
        dProp.width = 0;
        dProp.height = 0; // use zero size to help flex display
      }
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TTempDiv_.prototype.__proto__ || Object.getPrototypeOf(TTempDiv_.prototype), 'getInitialState', this).call(this);

      checkForIfElse_(this.$gui);
      this.isLibGui = false;
      var style_ = this.props.style;
      if (isUnderBody_(this)) {
        this.duals.style = style_ = Object.assign({}, style_, { position: 'absolute' });
        if ((this.$gui.keyid + '').indexOf('$$') == 0) this.isLibGui = true;
      }

      if (W.__design__ && !this.isLibGui) {
        this.duals.style = Object.assign({}, style_, { display: 'none' }); // default hide it
        setupTemplateTree(this);
      } else {
        var template = this.props['template'];
        if (template instanceof templateNode) this.$gui.template = template; // fixed, no changing
        else setupTemplateTree(this);
        this.$gui.compIndex = {};
        this.$gui.comps = []; // force no child, referenced to this.$gui.template
      }

      return dState;
    }
  }, {
    key: 'elementOf',
    value: function elementOf(sPath) {
      return templateElement_(this, sPath);
    }
  }, {
    key: 'render',
    value: function render() {
      if (W.__design__ && !this.isLibGui) return _get(TTempDiv_.prototype.__proto__ || Object.getPrototypeOf(TTempDiv_.prototype), 'render', this).call(this);else {
        syncProps_(this);
        if (this['hide.']) return null; // as <noscript>

        var sTag = this.state['tagName.'];
        if (!sTag) return getOnlyChild_(this);

        var dStyle = Object.assign({}, this.state.style, { width: '0px', height: '0px', display: 'none' });
        var props = setupRenderProp_(this, dStyle);
        return reactCreate_(sTag, props); // ignore children
      }
    }
  }]);

  return TTempDiv_;
}(TUnit_);

T.TempDiv_ = TTempDiv_;
T.TempDiv = new TTempDiv_();

var TTempSpan_ = function (_TSpan_17) {
  _inherits(TTempSpan_, _TSpan_17);

  function TTempSpan_(name, desc) {
    _classCallCheck(this, TTempSpan_);

    var _this54 = _possibleConstructorReturn(this, (TTempSpan_.__proto__ || Object.getPrototypeOf(TTempSpan_)).call(this, name || 'TempSpan', desc));

    _this54._silentProp.push('isTemplate.', 'data-temp.type');
    return _this54;
  }

  _createClass2(TTempSpan_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TTempSpan_.prototype.__proto__ || Object.getPrototypeOf(TTempSpan_.prototype), 'getDefaultProps', this).call(this);
      dProp['isTemplate.'] = 3;
      if (W.__design__) dProp['data-temp.type'] = 3;
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TTempSpan_.prototype.__proto__ || Object.getPrototypeOf(TTempSpan_.prototype), 'getInitialState', this).call(this);

      checkForIfElse_(this.$gui);
      this.isLibGui = false; // fixed to false
      if (W.__design__) {
        this.duals.style = Object.assign({}, this.props.style, { display: 'none' }); // default hide it
        setupTemplateTree(this);
      } else {
        var template = this.props['template'];
        if (template instanceof templateNode) this.$gui.template = template;else setupTemplateTree(this);
        this.$gui.compIndex = {};
        this.$gui.comps = []; // force no child, referenced to this.$gui.template
      }

      return dState;
    }
  }, {
    key: 'elementOf',
    value: function elementOf(sPath) {
      return templateElement_(this, sPath);
    }
  }, {
    key: 'render',
    value: function render() {
      if (W.__design__) return _get(TTempSpan_.prototype.__proto__ || Object.getPrototypeOf(TTempSpan_.prototype), 'render', this).call(this);else {
        syncProps_(this);
        if (this['hide.']) return reactCreate_('span', displayNoneProp_);

        var sTag = this.state['tagName.'];
        if (!sTag) return getOnlyChild_(this);

        var dStyle = Object.assign({}, this.state.style, { width: '0px', height: '0px', display: 'none' });
        var props = setupRenderProp_(this, dStyle);
        return reactCreate_(sTag, props); // ignore children
      }
    }
  }]);

  return TTempSpan_;
}(TSpan_);

T.TempSpan_ = TTempSpan_;
T.TempSpan = new TTempSpan_();

var TRefDiv_ = function (_TUnit_7) {
  _inherits(TRefDiv_, _TUnit_7);

  function TRefDiv_(name, desc) {
    _classCallCheck(this, TRefDiv_);

    var _this55 = _possibleConstructorReturn(this, (TRefDiv_.__proto__ || Object.getPrototypeOf(TRefDiv_)).call(this, name || 'RefDiv', desc));

    _this55._silentProp.push('isReference.');
    _this55._htmlText = true;
    return _this55;
  }

  _createClass2(TRefDiv_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TRefDiv_.prototype.__proto__ || Object.getPrototypeOf(TRefDiv_.prototype), 'getDefaultProps', this).call(this);
      dProp.width = 0;
      dProp.height = 0;
      dProp['isReference.'] = 1;
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TRefDiv_.prototype.__proto__ || Object.getPrototypeOf(TRefDiv_.prototype), 'getInitialState', this).call(this);
      if (isUnderBody_(this)) utils.instantShow('warning: can not add RefDiv to topmost widget.');
      return dState;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TRefDiv_.prototype.__proto__ || Object.getPrototypeOf(TRefDiv_.prototype), 'componentDidMount', this).call(this);

      var owner;
      if (!inFirstLoading_ && (owner = this.widget)) {
        owner = owner.parent;
        var ownerObj = owner && owner.component;
        if (ownerObj) loadReference_(ownerObj, this.$gui.keyid + '', function () {});
      }
    }
  }, {
    key: 'render',
    value: function render() {
      // no need call syncProps_(this) and ignore this['hide.']
      // 'tagName.' should fixed to 'div'

      var sCls = classNameOf_(this);
      var dProp = { style: { width: '0px', height: '0px' } };
      if (sCls) dProp.className = sCls;
      return reactCreate_('div', dProp);
    }
  }]);

  return TRefDiv_;
}(TUnit_);

T.RefDiv_ = TRefDiv_;
T.RefDiv = new TRefDiv_();
var RefDiv__ = T.RefDiv._createClass(null);

var TRefSpan_ = function (_TSpan_18) {
  _inherits(TRefSpan_, _TSpan_18);

  function TRefSpan_(name, desc) {
    _classCallCheck(this, TRefSpan_);

    var _this56 = _possibleConstructorReturn(this, (TRefSpan_.__proto__ || Object.getPrototypeOf(TRefSpan_)).call(this, name || 'RefSpan', desc));

    _this56._silentProp.push('isReference.');
    return _this56;
  }

  _createClass2(TRefSpan_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TRefSpan_.prototype.__proto__ || Object.getPrototypeOf(TRefSpan_.prototype), 'getDefaultProps', this).call(this);
      dProp['isReference.'] = 2;
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TRefSpan_.prototype.__proto__ || Object.getPrototypeOf(TRefSpan_.prototype), 'getInitialState', this).call(this);
      if (isUnderBody_(this)) utils.instantShow('error: can not hook RefSpan to topmost widget.');
      return dState;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TRefSpan_.prototype.__proto__ || Object.getPrototypeOf(TRefSpan_.prototype), 'componentDidMount', this).call(this);

      var owner;
      if (!inFirstLoading_ && (owner = this.widget)) {
        owner = owner.parent;
        var ownerObj = owner && owner.component;
        if (ownerObj) loadReference_(ownerObj, this.$gui.keyid + '', function () {});
      }
    }
  }, {
    key: 'render',
    value: function render() {
      // no need call syncProps_(this) and ignore this['hide.']
      // 'tagName.' should fixed to 'span'

      var sCls = classNameOf_(this);
      var dProp = { style: { width: '0px', height: '0px' } };
      if (sCls) dProp.className = sCls;
      return reactCreate_('span', dProp);
    }
  }]);

  return TRefSpan_;
}(TSpan_);

T.RefSpan_ = TRefSpan_;
T.RefSpan = new TRefSpan_();
var RefSpan__ = T.RefSpan._createClass(null);

// ScenePage
//-----------------

var TScenePage_ = function (_TPanel_6) {
  _inherits(TScenePage_, _TPanel_6);

  function TScenePage_(name, desc) {
    _classCallCheck(this, TScenePage_);

    var _this57 = _possibleConstructorReturn(this, (TScenePage_.__proto__ || Object.getPrototypeOf(TScenePage_)).call(this, name || 'ScenePage', desc));

    _this57._silentProp.push('isScenePage.', 'isTemplate.');
    _this57._defaultProp.noShow = '';
    return _this57;
  }

  _createClass2(TScenePage_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TScenePage_.prototype.__proto__ || Object.getPrototypeOf(TScenePage_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.noShow = [iLevel + 1, 'string', ['', '1'], '[string]: disable show content'];

      var sPerPixel = '[number]: 0~1 for percent, 0.9999 for 100%, N pixels';
      var bWd = dSchema.width,
          bHi = dSchema.height;
      if (bWd) {
        bWd[1] = 'number';bWd[3] = sPerPixel;
      }
      if (bHi) {
        bHi[1] = 'number';bHi[3] = sPerPixel;
      }
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TScenePage_.prototype.__proto__ || Object.getPrototypeOf(TScenePage_.prototype), 'getDefaultProps', this).call(this);
      dProp.noShow = '';
      // dProp.width = 0.9999;   // default is 0.9999
      // dProp.height = 0.9999;  // defalut is 0.9999
      dProp['tagName.'] = 'article';
      dProp['isScenePage.'] = 1;
      dProp.className = 'rewgt-panel rewgt-scene';
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TScenePage_.prototype.__proto__ || Object.getPrototypeOf(TScenePage_.prototype), 'getInitialState', this).call(this);
      if (!isUnderBody_(this)) utils.instantShow('error: ScenePage only hook to topmost widget.');

      var initStyle = Object.assign({}, this.props.style, { position: 'absolute', display: 'none' }); // fixed to absolute, default hidden
      if (!initStyle.zIndex) initStyle.zIndex = '0'; // default is 0
      this.duals.style = initStyle;

      // ScenePage must have visible area
      var wd = this.props.width,
          hi = this.props.height;
      if (typeof wd != 'number' || !(wd > 0)) // NaN > 0 is false
        console.log('warning: invalid width of ScenePage (' + this.$gui.keyid + ')');
      if (typeof hi != 'number' || !(hi > 0)) console.log('warning: invalid height of ScenePage (' + this.$gui.keyid + ')');

      if (W.__design__) this.$gui.currSelected = '';else {
        // if not __design__, take as TempPanel
        if (this.props['isTemplate.']) {
          // props.noShow must be true
          checkForIfElse_(this.$gui);
          this.isLibGui = false;

          var template = this.props['template'];
          if (template instanceof templateNode) this.$gui.template = template; // pass from props.template, fixed (no changing)
          else setupTemplateTree(this);
          this.$gui.compIndex = {};
          this.$gui.comps = []; // force no child, referenced to this.$gui.template
        }
      }

      return dState;
    }
  }, {
    key: 'elementOf',
    value: function elementOf(sPath) {
      return this.props['isTemplate.'] ? templateElement_(this, sPath) : _get(TScenePage_.prototype.__proto__ || Object.getPrototypeOf(TScenePage_.prototype), 'elementOf', this).call(this, sPath);
    }
  }, {
    key: 'setSelected',
    value: function setSelected(sKey) {
      if (!W.__design__) return; // only supported when in design

      var wdgt = this.widget,
          gui = this.$gui;
      if (gui.currSelected) {
        // try unselect old one
        if (sKey == gui.currSelected) return; // no change
        setSelected_(gui.currSelected, false);
        gui.currSelected = '';
      }
      if (sKey) {
        // try select new one
        setSelected_(sKey, true);
        gui.currSelected = sKey;
      }

      function setSelected_(sKey, isSelect) {
        var childObj = wdgt && wdgt[sKey];
        childObj = childObj && childObj.component;
        if (!childObj) return;

        var iLevel = parseInt(childObj.state.style.zIndex) || 0;
        if (isSelect) {
          // set to topmost
          if (iLevel >= -997 && iLevel <= 999) // not change -999 (to 1001) -998 (to 1000), take it as background
            childObj.setState({ style: Object.assign({}, childObj.state.style, { zIndex: iLevel + 2000 }) });
        } else {
          // restore to normal
          if (iLevel >= 1000 && iLevel <= 2999) childObj.setState({ style: Object.assign({}, childObj.state.style, { zIndex: iLevel - 2000 }) });
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      syncProps_(this);
      if (this['hide.']) return null; // as <noscript>

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      if (this.props['isTemplate.']) {
        // auto set 'isTemplate.' by parent when noShow is true
        var dStyle = Object.assign({}, this.state.style, { width: '0px', height: '0px', display: 'none' });
        var props = setupRenderProp_(this, dStyle);
        return reactCreate_('div', props); // ignore children
      } else {
        var bChild = this.prepareState();

        var dStyle = undefined;
        if (this.props.noShow && !W.__design__) {
          // if W.__design__, no change duals.style
          dStyle = Object.assign({}, this.state.style);
          dStyle.display = 'none';
        }

        var insEle = this.$gui.insertEle;
        if (insEle) bChild = middleClone_(insEle, bChild); // insert under rewgt-center
        var centerDiv = reactCreate_('div', { 'className': 'rewgt-center' }, bChild);

        var props = setupRenderProp_(this, dStyle);
        return reactCreate_(sTag, props, centerDiv);
      }
    }
  }]);

  return TScenePage_;
}(TPanel_);

T.ScenePage_ = TScenePage_;
T.ScenePage = new TScenePage_();
var ScenePage__ = T.ScenePage._createClass(null);

// MaskablePanel
//--------------

function noPropagation(event) {
  event.stopPropagation();
}

var TMaskPanel_ = function (_TPanel_7) {
  _inherits(TMaskPanel_, _TPanel_7);

  function TMaskPanel_(name, desc) {
    _classCallCheck(this, TMaskPanel_);

    return _possibleConstructorReturn(this, (TMaskPanel_.__proto__ || Object.getPrototypeOf(TMaskPanel_)).call(this, name || 'MaskPanel', desc));
  }

  _createClass2(TMaskPanel_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var dProp = _get(TMaskPanel_.prototype.__proto__ || Object.getPrototypeOf(TMaskPanel_.prototype), 'getDefaultProps', this).call(this);
      dProp.klass = 'noselect-txt';
      return dProp;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var dState = _get(TMaskPanel_.prototype.__proto__ || Object.getPrototypeOf(TMaskPanel_.prototype), 'getInitialState', this).call(this); // this.props['hookTo.'] must be W.body.$pop

      this.defineDual('popOption');
      this.defineDual('id__', function (value, oldValue) {
        if (oldValue !== 1) return;

        var bodyEle = null,
            frameEle = null;
        var dFrame,
            gui = this.$gui,
            popOption = this.props.popOption;
        if (popOption) {
          dFrame = popOption.frame;
          if (!dFrame) dFrame = {};else {
            frameEle = this.props.popFrame; // should come from template or compObj.fullClone()
            if (frameEle && !frameEle.props) // invalid frame element
              frameEle = null;
          }

          if (this.props.children) {
            var b = children2Arr_(this.props.children); // not use childElements_()
            bodyEle = b[0]; // must pass one child (panel/unit/paragraph) for utils.popWin.showWindow()
          }
          gui.compIdx = {};
          gui.comps = []; // ignore all pre-defined component
        }

        var hookOwner = this.widget;
        if (bodyEle && hookOwner && containNode_) {
          // assert(popOption && dFrame);
          // step 1: config this.state
          var frameInfo = containNode_.frameInfo,
              iTotalWd = window.innerWidth,
              iTotalHi = window.innerHeight;

          this.state.left = 0;
          this.state.top = 0;
          this.state.width = iTotalWd - frameInfo.leftWd - frameInfo.rightWd;
          this.state.height = iTotalHi - frameInfo.topHi - frameInfo.bottomHi;
          this.state.style = Object.assign({}, this.state.style, { position: 'absolute',
            zIndex: 'auto', // same as parent (3016)
            backgroundColor: popOption.maskColor || 'rgba(238,238,238,0.84)'
          });

          // step 2: try add frame widget
          var stWd = this.state.width,
              stHi = this.state.height;
          if (frameEle) {
            var iWd = parsePercent(dFrame.width || 0.9, stWd, 4);
            var iHi = parsePercent(dFrame.height || 0.9, stHi, 4);
            var iLeft = parseLeftTop(dFrame.left, stWd, iWd);
            var iTop = parseLeftTop(dFrame.top, stHi, iHi);
            var dStyle_ = Object.assign({}, frameEle.props.style, {
              position: 'absolute',
              zIndex: 'auto'
            });
            var dProp_ = { 'hookTo.': hookOwner, 'keyid.': '', key: '', style: dStyle_,
              left: iLeft, top: iTop, width: iWd, height: iHi
            };

            gui.compIdx['0'] = 0;
            gui.comps.push(reactClone_(frameEle, dProp_));
          }

          // step 3: try set default frame style if popOption.frame not passed
          var iWd2 = parsePercent(popOption.width || 0.8, stWd, 6);
          var iHi2 = parsePercent(popOption.height || 0.8, stHi, 6);
          var iLeft2 = parseLeftTop(popOption.left, stWd, iWd2);
          var iTop2 = parseLeftTop(popOption.top, stHi, iHi2);

          if (!frameEle && iLeft2 > 0 && iTop2 > 0 && iLeft2 + iWd2 < stWd && iTop2 + iHi2 < stHi) {
            var iLeft3 = iLeft2 - 1,
                iTop3 = iTop2 - 1;
            frameEle = reactCreate_('div', { key: '0', style: {
                position: 'absolute', zIndex: 'auto',
                left: iLeft3 + 'px', top: iTop3 + 'px',
                width: iWd2 + 'px', height: iHi2 + 'px',
                border: '1px solid #e0e0e0', boxShadow: '-2px 8px 4px rgba(0,0,0,0.1)'
              } });
            gui.compIdx['0'] = 0;
            gui.comps.push(frameEle);
          }

          // step 4: try add body widget
          var keyid = '',
              sKey = getElementKey_(bodyEle);
          if (sKey) {
            var iTmp = parseInt(sKey);
            if (iTmp + '' === sKey) keyid = iTmp;else keyid = sKey;
          }
          var dStyle2_ = Object.assign({}, bodyEle.props.style, {
            backgroundColor: '#fff',
            position: 'absolute',
            zIndex: 'auto'
          });
          if (popOption.bodyStyle) Object.assign(dStyle2_, popOption.bodyStyle);
          var dProp2_ = { 'hookTo.': hookOwner, 'keyid.': keyid, key: sKey, style: dStyle2_,
            left: iLeft2, top: iTop2, width: iWd2, height: iHi2,
            $onClick: noPropagation
          };

          var bodyEle2 = reactClone_(bodyEle, dProp2_);
          gui.compIdx[sKey] = gui.comps.length;
          gui.winComp = gui.comps.push(bodyEle2) - 1;
          if (popOption.state) popOption.state.opened = true;

          this.setEvent({ $onClick: function $onClick(event) {
              event.stopPropagation();
              if (W.__design__ || popOption.manualClose) return;

              setTimeout(function () {
                utils.popWin.popWindow(); // retData=undefined, callback=undefined
              }, 100);
            },
            $onDoubleClick: noPropagation,
            $onMouseDown: noPropagation, $onMouseMove: noPropagation, $onMouseUp: noPropagation,
            $onKeyPress: noPropagation, $onKeyDown: noPropagation, $onKeyUp: noPropagation,
            $onDragOver: noPropagation, $onDrop: noPropagation
          });
        }
      });

      return dState;

      function parsePercent(iWd, iTotal, iMin) {
        if (iWd < 1) {
          if (iWd >= 0.9999) iWd = iTotal;else if (iWd > 0) iWd = iTotal * iWd;else iWd = iMin;
        }
        return iWd;
      }

      function parseLeftTop(iLeft, iTotal, iWd) {
        if (typeof iLeft != 'number') iLeft = (iTotal - iWd) / 2;else if (iLeft < 1) iLeft = iTotal * iLeft;
        if (iLeft < 0) iLeft = 0;
        return iLeft;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TMaskPanel_.prototype.__proto__ || Object.getPrototypeOf(TMaskPanel_.prototype), 'componentDidMount', this).call(this);

      if (W.__design__) {
        var node = this.getHtmlNode();
        if (node) {
          // use html-event because design-GUI uses origianl DOM+JS, all html-event run before react-event
          node.onclick = noPropagation;
          node.ondblclick = noPropagation;
          node.onmousedown = noPropagation;
          node.onmousemove = noPropagation;
          node.onmouseup = noPropagation;
          node.onkeypress = noPropagation;
          node.onkeydown = noPropagation;
          node.onkeyup = noPropagation;
          node.ondragover = noPropagation;
          node.ondrop = noPropagation;
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var opt = this.state.popOption;
      if (opt && opt.state && opt.state.opened) opt.state.opened = false;
      _get(TMaskPanel_.prototype.__proto__ || Object.getPrototypeOf(TMaskPanel_.prototype), 'componentWillUnmount', this).call(this);
    }
  }]);

  return TMaskPanel_;
}(TPanel_);

// no share: T.MaskPanel_ T.MaskPanel


var MaskPanel__ = createClass_(new TMaskPanel_()._extend());

// MarkedDiv
//----------
var SHADOW_WTC_FLAGS_ = null; // used only in __design__
var SHADOW_WTC_ISPRE_ = null; // used only in __design__

function shadowWtcTagFlag_() {
  if (!SHADOW_WTC_FLAGS_) {
    // not initialized yet
    SHADOW_WTC_FLAGS_ = {};
    SHADOW_WTC_ISPRE_ = {};
    scanOneLevel(T, '');
  }
  return [SHADOW_WTC_FLAGS_, SHADOW_WTC_ISPRE_];

  function scanOneLevel(aSet, sPath) {
    Object.keys(aSet).forEach(function (sKey) {
      if (!sKey || sKey[sKey.length - 1] == '_') return;
      var value = aSet[sKey];
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) != 'object') return;

      if (value.getDefaultProps) {
        var props = value.getDefaultProps(),
            iFlag = 1;
        if (props['childInline.']) {
          if (hasClass_(props.className || '', 'rewgt-unit')) iFlag = 2;else iFlag = 3;
        }
        // else iFlag = 1; // Panel(0) or Unit(1), take all of them as Unit
        if (iFlag != 3) // no need regist Span(3), default is 3
          SHADOW_WTC_FLAGS_[sPath + sKey] = iFlag;
        if (props['isPre.']) SHADOW_WTC_ISPRE_[sPath + sKey] = true;
      } else scanOneLevel(value, sPath + sKey + '.'); // scan sub-level
    });
  }
}
creator.scanWtcFlag = shadowWtcTagFlag_;

function scanPreCode_(htmlNode, sPrefix, canEditStatic) {
  var bRet = [],
      bStatic = [];
  for (var i = 0, node; node = htmlNode.children[i]; i++) {
    var bInfo = creator.scanNodeAttr(node, sPrefix, i);
    if (!bInfo) {
      if (node.classList.contains('rewgt-static')) {
        for (var i2 = 0, node2; node2 = node.childNodes[i2]; i2++) {
          bStatic.push(node2); // includes text node
        }
      } else bStatic.push(node);
      continue; // ignore all none '$=xx' node
    }

    var sTemplate = bInfo[0],
        dProp = bInfo[1];
    if (sTemplate == 'RefDiv') bRet.push(reactCreate_(RefDiv__, dProp));else if (sTemplate == 'RefSpan') bRet.push(reactCreate_(RefSpan__, dProp));else {
      // is WTC
      var ch,
          bSeg = sTemplate.split('.');
      if (bSeg.length == 1 && (ch = sTemplate[0]) >= 'a' && ch <= 'z') {
        // html tag, such as: div button
        var sHtml = dProp['html.'] || null;
        delete dProp['html.'];delete dProp['isPre.'];
        bRet.push(reactCreate_(wtcCls, dProp, sHtml)); // only scan one level for pure react element
      } else {
        var clsSet = getWTC_(sTemplate),
            sName = bSeg.pop(),
            wtcCls = clsSet[sName];
        var sPrefix2 = sPrefix + '[' + i + '].' + sTemplate;
        if (!wtcCls) {
          console.log('error: can not find WTC (' + sPrefix2 + ')');
          continue;
        }

        var sTag = node.nodeName,
            bChild_ = [];
        if (sTag == 'DIV' || sTag == 'SPAN') bChild_ = scanPreCode_(node, sPrefix2, canEditStatic); // if no child, result is []
        bChild_.unshift(wtcCls, dProp);
        bRet.push(reactCreate_.apply(null, bChild_));
      }
    }
  }

  if (bRet.length == 0 && bStatic.length) {
    // no need set 'hasStatic.', scaned from MarkedDiv node
    var idx = W.$staticNodes.push(bStatic) - 1; // use W.$staticNodes, not local
    var dProp2 = { className: 'rewgt-static', name: idx + '' };
    if (!canEditStatic) dProp2['data-marked'] = '1'; // use data-marked to avoid online editing
    bRet.push(reactCreate_('div', dProp2));
  }
  return bRet;
}
creator.scanPreCode = scanPreCode_;

var re_autoname_ = /^auto[0-9]+$/;

function renewMarkdown_(compObj, mdText, callback) {
  var gui = compObj.$gui,
      isTable = compObj.props['markedTable.'],
      notShow = compObj.props.noShow;

  try {
    var sHtml = utils.marked(mdText); // maybe raise exception
    var node = document.createElement('div'),
        bList = [];
    node.innerHTML = sHtml;

    var bKey = [];
    gui.comps.forEach(function (child) {
      if (child && child.props['hookTo.']) {
        var sKey = getElementKey_(child);
        if (sKey) bKey.push('-' + sKey);
      }
    });
    if (bKey.length && compObj.isHooked) {
      compObj.setChild(bKey, function () {
        resetComp(node);
      });
    } else resetComp(node);
  } catch (e) {
    console.log(e);
    if (callback) callback(false);
  }

  function resetComp(htmlNode) {
    gui.removeNum += gui.comps.length; // let childNumId changed
    gui.compIdx = {};gui.comps = []; // should be no child
    gui.statics = {};

    if (isTable) {
      compObj.firstScan = true;
      compObj.cellKeys = {};
      compObj.cellStyles = {};
    }

    var regNode = []; // [[sKey,ele],...] for MarkedDiv, [[[sKey,ele],...],...] for MarkedTable
    var regSub = [];
    for (var i = 0, node; node = htmlNode.children[i]; i++) {
      var sPath = node.getAttribute('$'),
          sTag = node.nodeName;
      if (sPath && (sTag == 'PRE' || sTag == 'DIV')) {
        if (bList.length) {
          AddOneStatic(gui, bList);
          bList = []; // create new, old should append to gui.statics
        }

        var bInfo = creator.scanNodeAttr(node, '', 0),
            sTemplate = bInfo && bInfo[0];
        if (!bInfo || sTemplate === 'RefSpan') {
          console.log('error: invalid node (<' + sTag + ' $=' + sPath + '>)');
          continue;
        }
        var dProp = bInfo[1];

        var isWTC = sTemplate != 'RefDiv',
            isOrgTag = false;
        var wtcCls,
            childCls = null,
            childProp = null;
        if (isWTC) {
          var ch,
              bSeg = sTemplate.split('.');
          if (bSeg.length == 1 && (ch = sTemplate[0]) >= 'a' && ch <= 'z') {
            // html tag, such as: div button
            isOrgTag = true;
            wtcCls = sTemplate;
          } else {
            var clsSet = getWTC_(sTemplate),
                sName = bSeg.pop();
            wtcCls = clsSet[sName];
            if (!wtcCls) {
              console.log('error: can not find WTC (' + sTemplate + ')');
              continue;
            }

            if (wtcCls.defaultProps && !hasClass_(wtcCls.defaultProps.className || '', ['rewgt-panel', 'rewgt-unit'])) {
              childCls = wtcCls;childProp = dProp;
              wtcCls = P__;dProp = {};
            }
          }
        } else wtcCls = RefDiv__;

        var keyid,
            keyIdx = gui.comps.length,
            sKey = dProp.key;
        var namedKey = '',
            registKey = '';
        if (!sKey || typeof sKey != 'string' || sKey.search(re_autoname_) == 0) {
          // take 'autoN' as none-define
          registKey = keyid = 'auto' + (keyIdx + gui.removeNum);
          if (!isWTC) // is linker
            sKey = keyid = '$' + keyid;else sKey = keyid;
        } else {
          namedKey = registKey = sKey;
          if (!isWTC && sKey[0] != '$') sKey = '$' + sKey;
          keyid = sKey;
        }

        var ele;
        if (isOrgTag) {
          dProp.key = sKey;
          var sHtml = dProp['html.'] || null;
          delete dProp['html.'];delete dProp['isPre.'];
          ele = reactCreate_(wtcCls, dProp, sHtml); // only scan one level
        } else {
          Object.assign(dProp, { 'hookTo.': compObj.widget, 'keyid.': keyid, key: sKey });
          if (!isWTC) {
            // is linker
            if (dProp.style) dProp.style.display = ''; // to default display: block table ...
            else dProp.style = { display: '' };
          }

          var bChild_ = [];
          if (sTag == 'DIV') // ignore sub node of <pre>, we only using node.innerHTML for that
            bChild_ = scanPreCode_(node, '[' + i + '].' + sTemplate, false);
          if (childCls) {
            bChild_.unshift(childCls, childProp);
            bChild_ = [reactCreate_.apply(null, bChild_)];
          }

          bChild_.unshift(wtcCls, dProp);
          ele = reactCreate_.apply(null, bChild_);
        }

        gui.compIdx[sKey] = keyIdx;
        gui.comps.push(ele);
        if (namedKey) {
          if (isTable) regNode[namedKey] = ele;else regSub[namedKey] = ele;
        }
        regSub.push([registKey, ele]);

        if (inFirstLoading_ && !isWTC) // !isWTC must be !isOrgTag
          pendingRefers_.push([compObj, sKey]);
      } else if (!sPath) {
        if (!isTable) bList.push(node); // record static nodes
        else {
            if (bList.length) {
              // default table cell only hold one block-node
              AddOneStatic(gui, bList);
              bList = [];
            }
            if (sTag == 'HR') {
              // new table row
              var ele = reactCreate_('hr', { 'markedRow.': true });
              gui.comps.push(ele); // no need hook  // no need add to gui.compIdx

              if (isTable) {
                regNode.push(regSub); // regSub maybe is []
                regSub = [];
              }
            } else {
              if (node.nodeName != 'P' || node.innerHTML !== '') // isTable, ignore empty <p>
                bList.push(node);
            }
          }
      }
      // else, '$' defined    // ignore, such as <span $=xx>
    }
    if (bList.length) AddOneStatic(gui, bList);
    if (isTable) {
      if (regSub.length) regNode.push(regSub); // record left named element
    } else regNode = regSub;

    if (callback) {
      setTimeout(function () {
        callback(true, regNode);
      }, 0);
    }
  }

  function AddOneStatic(gui, bList) {
    if (notShow) return;

    var keyIdx = gui.comps.length,
        sName = 0x100000 + gui.removeNum + keyIdx + '';
    var keyid = keyIdx + gui.removeNum,
        sKey = keyid + '';
    var dProp = { className: 'rewgt-static', name: sName, key: sKey };

    gui.compIdx[sKey] = keyIdx;
    gui.comps.push(reactCreate_('div', dProp));
    gui.statics[sName] = bList;
  }
}

var TMarkedDiv_ = function (_TDiv_4) {
  _inherits(TMarkedDiv_, _TDiv_4);

  function TMarkedDiv_(name, desc) {
    _classCallCheck(this, TMarkedDiv_);

    var _this59 = _possibleConstructorReturn(this, (TMarkedDiv_.__proto__ || Object.getPrototypeOf(TMarkedDiv_)).call(this, name || 'MarkedDiv', desc));

    _this59._defaultProp.width = null;
    _this59._defaultProp.minWidth = 20;
    _this59._defaultProp.noShow = '';
    _this59._silentProp.push('marked.', 'hasStatic.', 'noSaveChild.');
    return _this59;
  }

  _createClass2(TMarkedDiv_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TMarkedDiv_.prototype.__proto__ || Object.getPrototypeOf(TMarkedDiv_.prototype), 'getDefaultProps', this).call(this);
      props.noShow = '';
      props.width = null;
      props.minWidth = 20; // minWidth=20  minHeight=20
      props['marked.'] = true;
      props['hasStatic.'] = true;
      props['noSaveChild.'] = true;
      props['isPre.'] = true; // means save as <pre $=MarkedDiv>
      return props;
    }
  }, {
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TMarkedDiv_.prototype.__proto__ || Object.getPrototypeOf(TMarkedDiv_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.noShow = [iLevel + 1, 'string', ['', '1'], '[string]: disable show content'];
      return dSchema;
    }
  }, {
    key: '_getGroupOpt',
    value: function _getGroupOpt(self) {
      var dOpt = { type: 'mono', // mono, extend
        editable: 'none', // all, some, none // 'some' means can not remove sub-level widget
        baseUrl: creator.appBase(), tools: []
      };
      var wdgt = self.widget;
      if (!wdgt || !self.isHooked) // widget not ready yet, dOpt.tools is empty
        return dOpt;

      var sPath = wdgt.getPath();
      dOpt.tools = [{
        name: 'editor', icon: 'res/edit_txt.png', title: 'edit markdown',
        url: 'edit_markdown.html', halfScreen: true, noMove: false,
        clickable: true, width: 0.9, height: 0.9, // left,top, no assign means center

        get: function get(compObj) {
          // compObj === self
          var sMarked = self.state['html.'] || '';
          return [sMarked, sPath, shadowWtcTagFlag_()];
        },

        set: function set(compObj, outValue, beClose) {
          var sText = outValue[0],
              sWdgtPath = outValue[1];
          if (self !== compObj || sWdgtPath != sPath) return; // check available

          if (typeof sText == 'string') {
            renewMarkdown_(compObj, sText, function (succ, regNode) {
              // compObj must isHooked
              if (!succ) return;

              if (self.props.noShow) {
                self.$gui.compIdx = {};
                self.$gui.comps = [];
              }

              // not use compObj.duals['html.'] = sText  // no trigger listen in __design__
              compObj.setState({ 'html.': sText, id__: identicalId() }, function () {
                renewStaticChild(compObj, true);

                var newNodes = null;
                if (compObj.state.nodes.length == 0) {
                  if (regNode && regNode.length) newNodes = regNode;
                  // else, both old and new is empty, ignore update
                } else newNodes = regNode || [];
                if (newNodes) {
                  setTimeout(function () {
                    compObj.duals.nodes = newNodes;
                  }, 10); // ensure content of newNodes be prepared first, they maybe linked
                }

                if (W.__design__ && beClose) {
                  // notify backup current doc
                  if (containNode_ && containNode_.notifyBackup) containNode_.notifyBackup(sWdgtPath, 1000); // renew schema prop editor
                }
              }); // gui.comps changed, use compObj.setState() trigger render
            });
          }
        }
      }];
      return dOpt;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TMarkedDiv_.prototype.__proto__ || Object.getPrototypeOf(TMarkedDiv_.prototype), 'getInitialState', this).call(this);

      var self = this,
          gui = this.$gui,
          ownerObj = this.parentOf(true);
      if (ownerObj && ownerObj.props['markedTable.']) {
        this.defineDual('colSpan', function (value, oldValue) {
          var num = parseInt(value);
          this.state.colSpan = isNaN(num) ? undefined : num;
          renderOwner();
        }); // default is undefined  // undefined means col-span=1
        this.defineDual('rowSpan', function (value, oldValue) {
          var num = parseInt(value);
          this.state.rowSpan = isNaN(num) ? undefined : num;
          renderOwner();
        }); // default is undefined

        if (this.props.tdStyle) {
          this.defineDual('tdStyle', function (value, oldValue) {
            this.state.tdStyle = Object.assign({}, oldValue, value);
            renderOwner();
          }, this.props.tdStyle);
        }
      }

      gui.delayTid = 0;
      this.defineDual('html.', function (value, oldValue) {
        if (!this.widget || typeof value != 'string') return;

        var iCount = 0;
        delayRun();

        function delayRun() {
          if (gui.delayTid) {
            // avoid side effects, ignore previous `duals['html.'] = s`
            clearTimeout(gui.delayTid);
            gui.delayTid = 0;
          }

          if (++iCount > 24) return; // try within 2.4 seconds
          if (self.isHooked) {
            renewMarkdown_(self, value, function (succ, regNode) {
              if (!succ) return;

              if (self.props.noShow) {
                self.$gui.compIdx = {};
                self.$gui.comps = [];
              }

              self.reRender(function () {
                renewStaticChild(self, true);

                var newNodes = null;
                if (self.state.nodes.length == 0) {
                  if (regNode && regNode.length) newNodes = regNode;
                  // else, both old and new is empty, ignore update
                } else newNodes = regNode || [];
                if (newNodes) {
                  setTimeout(function () {
                    self.duals.nodes = newNodes;
                  }, 10);
                }
              });
            });
          } else {
            // still in creating yet, delay a moment
            gui.delayTid = setTimeout(function () {
              delayRun();
            }, 100);
          }
        }
      });

      state.nodes = []; // preset it, should avoid first assignment
      this.defineDual('nodes'); // should not come from props.nodes  // come from 'html.' scanning

      return state;

      function renderOwner() {
        var cellKey = self.$gui.keyid + '';
        setTimeout(function () {
          var owner = self.parentOf(true);
          if (owner && owner.cellKeys && owner.cellStyles) {
            owner.cellKeys[cellKey] = [self.state.rowSpan, self.state.colSpan];
            owner.cellStyles[cellKey] = self.state.tdStyle; // maybe undefined
            owner.reRender(); // force render
          }
        }, 0);
      }
    }
  }, {
    key: 'willResizing',
    value: function willResizing(wd, hi, inPending) {
      // called by parent in next render tick
      if (!inPending && this.isHooked) {
        // ignore pending state of dragging
        var self = this;
        setTimeout(function () {
          propagateResizing_(self, false);
        }, 0); // let 'this.setState({parentWidth,parentHeight})' run first
      }
      return true; // true means contine run this.setState({parentWidth,parentHeight})
    }
  }, {
    key: 'render',
    value: function render() {
      syncProps_(this);
      if (this['hide.']) return null; // as <noscript>

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      var bChild = this.prepareState();
      var props = setupRenderProp_(this),
          insEle = this.$gui.insertEle;
      if (insEle) bChild = middleClone_(insEle, bChild);
      return reactCreate_(sTag, props, bChild); // not use 'html.'
    }
  }]);

  return TMarkedDiv_;
}(TDiv_);

T.MarkedDiv_ = TMarkedDiv_;
T.MarkedDiv = new TMarkedDiv_();

var TMarkedTable_ = function (_TMarkedDiv_) {
  _inherits(TMarkedTable_, _TMarkedDiv_);

  function TMarkedTable_(name, desc) {
    _classCallCheck(this, TMarkedTable_);

    var _this60 = _possibleConstructorReturn(this, (TMarkedTable_.__proto__ || Object.getPrototypeOf(TMarkedTable_)).call(this, name || 'MarkedTable', desc));

    _this60._silentProp.push('markedTable.');
    return _this60;
  }

  _createClass2(TMarkedTable_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TMarkedTable_.prototype.__proto__ || Object.getPrototypeOf(TMarkedTable_.prototype), 'getDefaultProps', this).call(this);
      props['markedTable.'] = true;
      props['tagName.'] = 'table';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TMarkedTable_.prototype.__proto__ || Object.getPrototypeOf(TMarkedTable_.prototype), 'getInitialState', this).call(this);
      this.firstScan = true;
      this.cellKeys = {};
      this.cellStyles = {};
      return state;
    }
  }, {
    key: 'render',
    value: function render() {
      syncProps_(this);
      if (this['hide.']) return null; // as <noscript>

      var sTag = this.state['tagName.'];
      if (!sTag) return getOnlyChild_(this);

      var bChild = this.prepareState(); // bChild is new copied
      var props = setupRenderProp_(this);
      if (this.props.noShow) // not show content, only use duals.nodes
        return reactCreate_('div', props);

      if (bChild.length == 0) // at least define one cell
        bChild.push(reactCreate_(P__, { 'html.': ' ' }));

      var bRow = ['tbody', null],
          lastRow = null;
      var self = this,
          firstScan = this.firstScan;
      this.firstScan = false;

      bChild.forEach(function (child) {
        if (child.props['markedRow.']) {
          if (lastRow) bRow.push(reactCreate_.apply(null, lastRow));
          lastRow = ['tr', null];
        } else {
          if (!lastRow) lastRow = ['tr', null];

          var cellKey = child.props['keyid.'];
          var rowSpan = undefined,
              colSpan = undefined,
              tdStyle = null;
          if (cellKey !== undefined) cellKey = cellKey + '';
          if (cellKey && child.props['marked.']) {
            if (firstScan) {
              var tmp, num;
              if ((tmp = child.props['rowSpan']) && !isNaN(num = parseInt(tmp))) rowSpan = num + '';
              if ((tmp = child.props['colSpan']) && !isNaN(num = parseInt(tmp))) colSpan = num + '';
              self.cellKeys[cellKey] = [rowSpan, colSpan];
              tdStyle = self.cellStyles[cellKey] = child.props.tdStyle; // maybe undefined
            } else {
              var b = self.cellKeys[cellKey];
              if (Array.isArray(b)) {
                rowSpan = b[0];
                colSpan = b[1];
              }
              tdStyle = self.cellStyles[cellKey]; // maybe undefined
            }
          }

          var tdProp = null;
          if (cellKey) {
            tdProp = { key: cellKey, rowSpan: rowSpan, colSpan: colSpan }; // rowSpan colSpan maybe undefined, overwrite history
            if (tdStyle) tdProp.style = tdStyle;
          }
          lastRow.push(reactCreate_('td', tdProp, child));
        }
      });
      if (lastRow) bRow.push(reactCreate_.apply(null, lastRow));

      var tbody = reactCreate_.apply(null, bRow);
      return reactCreate_(sTag, props, tbody); // ignore gui.insertEle
    }
  }]);

  return TMarkedTable_;
}(TMarkedDiv_);

T.MarkedTable_ = TMarkedTable_;
T.MarkedTable = new TMarkedTable_();

module.exports = T;

},{"./react_widget":200,"create-react-class":2,"react":198,"react-dom":8}],202:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],203:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// bootstrap.js

var React = require('react');
var ReactDOM = require('react-dom');
var W = require('shadow-widget');

var T = W.$templates,
    creator = W.$creator;
var utils = W.$utils,
    ex = W.$ex,
    main = W.$main,
    idSetter = W.$idSetter;

//--------
function htmlEncode(s) {
  return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

function boolToStr(b) {
  return b ? '1' : '';
}

function safeContent(s) {
  // safe get char such as: &larr; &rarr;
  return s || ''; // no transfer, using utf-8 or '\u2190 \u2192'
  /*
    if (!s) return '';
    var node = document.createElement('p');
    try {
      node.innerHTML = s;
      return node.textContent;
    }
    catch(e) {
      return '';
    } */
}

function nodeContains(node, child) {
  if (!node) return false;

  if (node.contains) return node.contains(child);else if (node.compareDocumentPosition) return node === child || !!(node.compareDocumentPosition(child) & 16);else {
    var tmp = child;
    while (tmp) {
      if (tmp === node) return true;
      tmp = tmp.parentNode;
    }
    return false;
  }
}

function activeNodeOfDoc() {
  try {
    return document.activeElement;
  } catch (e) {} // maybe error in IE
}

function nodeRect_(node) {
  return node.getBoundingClientRect();
}

function nodeSetAttr_(node, attr, value) {
  node.setAttribute(attr, value);
}

function absoluteCorner_() {
  var wdgt = creator.topmostWidget_,
      rootComp = wdgt && wdgt.component;
  var rootNode = rootComp && rootComp.getHtmlNode();
  if (rootNode) {
    var r = nodeRect_(rootNode);
    return [r.left, r.top];
  } else return [0, 0];
}

var size_map_ = { large: 'lg', medium: 'md', small: 'sm', xsmall: 'xs' };

function getSizeKlass_(sPrefix, sSize) {
  if (sSize) {
    sSize = size_map_[sSize] || '';
    if (sSize) return sPrefix + '-' + sSize;
  }
  return '';
}

function ownerAbsolute_(self) {
  var owner = self.widget,
      isAbsolute = false;
  owner = owner && owner.parent;
  if (owner) {
    if (owner.parent === W) // owner is .body
      isAbsolute = true;else {
      var ownerComp = owner.component;
      if (ownerComp && ownerComp.state.style.position == 'absolute') isAbsolute = true;
    }
  }
  return isAbsolute;
}

var bs_control_idx_ = 0;

function newControlId_() {
  return '_for' + ++bs_control_idx_; // ctrl1,ctrl2 ...
}

//-----------
var BS = T.bs = {};

var jsVoid_ = 'javascript:void(0)';
var boolPropmpt_ = ['', '1'];

var div_margin_ = [null, null, null, null];
var div_padding_ = [null, null, null, null];
var div_borderwd_ = [null, null, null, null];

var children2Arr_ = React.Children.toArray;

var bsDocUrl_ = '/app/rewgt/shadow-bootstrap/web/output/doc';

function hasChildNode_(children) {
  if (!children || typeof children == 'string') return false;
  return children2Arr_(children).length > 0;
}

function makeBsClass_(TBase, sName) {
  var sName2 = sName.toLowerCase();

  var T = function (_TBase) {
    _inherits(T, _TBase);

    function T(name, desc) {
      _classCallCheck(this, T);

      var _this = _possibleConstructorReturn(this, (T.__proto__ || Object.getPrototypeOf(T)).call(this, name || 'bs.' + sName, desc));

      _this._docUrl = bsDocUrl_;
      Object.assign(_this._defaultProp, { bsClass: sName2,
        left: null, top: null, width: null, height: null, minWidth: 0, minHeight: 0,
        margin: div_margin_.slice(0),
        padding: div_padding_.slice(0),
        borderWidth: div_borderwd_.slice(0)
      });
      return _this;
    }

    _createClass(T, [{
      key: 'getDefaultProps',
      value: function getDefaultProps() {
        var props = _get(T.prototype.__proto__ || Object.getPrototypeOf(T.prototype), 'getDefaultProps', this).call(this);
        return Object.assign(props, { bsClass: sName2, 'childInline.': true,
          width: null, height: null, left: null, top: null, minWidth: 0, minHeight: 0,
          margin: div_margin_.slice(0),
          padding: div_padding_.slice(0),
          borderWidth: div_borderwd_.slice(0)
        });
      }
    }]);

    return T;
  }(TBase);

  return T;
}

(function (b) {
  b.forEach(function (sName) {
    var Klass = makeBsClass_(T[sName + '_'], sName);
    BS[sName + '_'] = Klass;
    BS[sName] = new Klass();
  });
})(['Div2', 'NavDiv', 'GroundDiv', 'MarkedDiv', 'MarkedTable']);

function makeBsClass2_(TBase, sName) {
  var sName2 = sName.toLowerCase();

  var T = function (_TBase2) {
    _inherits(T, _TBase2);

    function T(name, desc) {
      _classCallCheck(this, T);

      var _this2 = _possibleConstructorReturn(this, (T.__proto__ || Object.getPrototypeOf(T)).call(this, name || 'bs.' + sName, desc));

      _this2._docUrl = bsDocUrl_;
      _this2._defaultProp.bsClass = sName2;
      return _this2;
    }

    _createClass(T, [{
      key: 'getDefaultProps',
      value: function getDefaultProps() {
        var props = _get(T.prototype.__proto__ || Object.getPrototypeOf(T.prototype), 'getDefaultProps', this).call(this);
        props.bsClass = props['tagName.'] = sName2;
        return props;
      }
    }]);

    return T;
  }(TBase);

  return T;
}

function makeBsClass3_(TBase, sName, sCls, isInline, sRole) {
  var T = function (_TBase3) {
    _inherits(T, _TBase3);

    function T(name, desc) {
      _classCallCheck(this, T);

      var _this3 = _possibleConstructorReturn(this, (T.__proto__ || Object.getPrototypeOf(T)).call(this, name || 'bs.' + sName, desc));

      _this3._docUrl = bsDocUrl_;
      _this3._defaultProp.bsClass = sCls;
      return _this3;
    }

    _createClass(T, [{
      key: 'getDefaultProps',
      value: function getDefaultProps() {
        var props = _get(T.prototype.__proto__ || Object.getPrototypeOf(T.prototype), 'getDefaultProps', this).call(this);
        props.bsClass = sCls;
        props.className = isInline ? W.__design__ ? 'rewgt-inline ' + sCls : sCls : 'rewgt-unit ' + sCls;
        if (sRole) props.role = sRole;
        return props;
      }
    }]);

    return T;
  }(TBase);

  return T;
}

(function (b) {
  b.forEach(function (sName) {
    var Klass = makeBsClass2_(BS.Div2_, sName);
    BS[sName + '_'] = Klass;
    BS[sName] = new Klass();
  });
})(['P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'Hr', 'Pre', 'Hgroup', 'Ul', 'Ol', 'Li', 'Dl', 'Dd', 'Dt', 'Iframe', 'Noscript', 'Fieldset', 'Details', 'Figure', 'Figcaption', 'Menu', 'Menuitem', 'Address', 'Caption', 'Colgroup', 'Td', 'Tbody', 'Thead', 'Tfoot', 'Th', 'Tr']); // next will define: bs.Form, bs.Blockquote, bs.Table

var form_klass_ = { 'form-horizontal': true, 'form-inline': true };

var TForm_ = function (_BS$Div2_) {
  _inherits(TForm_, _BS$Div2_);

  function TForm_(name, desc) {
    _classCallCheck(this, TForm_);

    var _this4 = _possibleConstructorReturn(this, (TForm_.__proto__ || Object.getPrototypeOf(TForm_)).call(this, name || 'bs.Form', desc));

    _this4._defaultProp.bsClass = 'form';
    return _this4;
  }

  _createClass(TForm_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TForm_.prototype.__proto__ || Object.getPrototypeOf(TForm_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.inline = [iLevel + 1, 'string', boolPropmpt_];
      dSchema.horizontal = [iLevel + 2, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TForm_.prototype.__proto__ || Object.getPrototypeOf(TForm_.prototype), 'getDefaultProps', this).call(this);
      props.bsClass = props['tagName.'] = 'form';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TForm_.prototype.__proto__ || Object.getPrototypeOf(TForm_.prototype), 'getInitialState', this).call(this);

      this.defineDual(['inline', 'horizontal'], renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, form_klass_, this.state.inline && 'form-inline', this.state.horizontal && 'form-horizontal');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TForm_;
}(BS.Div2_);

BS.Form_ = TForm_;
BS.Form = new TForm_();

var blockquote_klass_ = { blockquote: true, 'blockquote-reverse': true };

var TBlockquote_ = function (_BS$Div2_2) {
  _inherits(TBlockquote_, _BS$Div2_2);

  function TBlockquote_(name, desc) {
    _classCallCheck(this, TBlockquote_);

    var _this5 = _possibleConstructorReturn(this, (TBlockquote_.__proto__ || Object.getPrototypeOf(TBlockquote_)).call(this, name || 'bs.Blockquote', desc));

    _this5._defaultProp.bsClass = 'blockquote';
    return _this5;
  }

  _createClass(TBlockquote_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TBlockquote_.prototype.__proto__ || Object.getPrototypeOf(TBlockquote_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.reverse = [iLevel + 1, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TBlockquote_.prototype.__proto__ || Object.getPrototypeOf(TBlockquote_.prototype), 'getDefaultProps', this).call(this);
      props.bsClass = props['tagName.'] = 'blockquote';
      props.reverse = '';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TBlockquote_.prototype.__proto__ || Object.getPrototypeOf(TBlockquote_.prototype), 'getInitialState', this).call(this);

      this.defineDual('reverse', renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, blockquote_klass_, this.state.reverse ? 'blockquote-reverse' : 'blockquote');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TBlockquote_;
}(BS.Div2_);

BS.Blockquote_ = TBlockquote_;
BS.Blockquote = new TBlockquote_();

var A__ = T.A._createClass(null); // null means get cached class
var Img__ = T.Img._createClass(null);
var Span__ = T.Span._createClass(null);
var OptA__ = T.OptA._createClass(null);

var BsUl__ = BS.Ul._createClass(null);
var BsMarkedDiv__ = BS.MarkedDiv._createClass(null);

//----------
var btn_klass_ = { 'btn-block': true, 'btn-lg': true, 'btn-md': true, 'btn-sm': true,
  'btn-xs': true, 'btn-default': true, 'btn-success': true,
  'btn-warning': true, 'btn-danger': true, 'btn-info': true,
  'btn-primary': true, 'btn-link': true, active: true
};

function itemSpaceFn_(value, oldValue) {
  var i = parseInt(value);
  if (!isNaN(i)) {
    var px = i + 'px';
    this.duals.style = { marginLeft: px, marginRight: px };
  }
}

function MakeBtnCls(TBase, btnName) {
  var TBtn_ = function (_TBase4) {
    _inherits(TBtn_, _TBase4);

    function TBtn_(name, desc) {
      _classCallCheck(this, TBtn_);

      var _this6 = _possibleConstructorReturn(this, (TBtn_.__proto__ || Object.getPrototypeOf(TBtn_)).call(this, name || 'bs.' + btnName, desc));

      _this6._docUrl = bsDocUrl_;
      if (W.__design__) _this6._defaultProp['data-html.opt'] = 'edit';
      Object.assign(_this6._defaultProp, { bsClass: 'btn',
        block: '', type: 'button', disabled: '', bsStyle: 'default'
      });
      return _this6;
    }

    _createClass(TBtn_, [{
      key: '_getSchema',
      value: function _getSchema(self, iLevel) {
        iLevel = iLevel || 1200;
        var dSchema = _get(TBtn_.prototype.__proto__ || Object.getPrototypeOf(TBtn_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

        dSchema.bsStyle = [iLevel + 1, 'string', ['default', 'success', 'warning', 'danger', 'info', 'primary', 'link']];
        dSchema.bsSize = [iLevel + 2, 'string', ['', 'large', 'medium', 'small', 'xsmall']];
        dSchema.type = [iLevel + 3, 'string', ['button', 'reset', 'submit']];
        dSchema.block = [iLevel + 4, 'string', boolPropmpt_];
        dSchema.disabled = [iLevel + 5, 'string', boolPropmpt_];
        dSchema['data-checked'] = [iLevel + 6, 'string', boolPropmpt_];
        dSchema.icon = [iLevel + 7, 'string'];
        dSchema.glyph = [iLevel + 8, 'string'];
        dSchema.itemSpace = [iLevel + 9, 'number'];
        return dSchema;
      }
    }, {
      key: 'getDefaultProps',
      value: function getDefaultProps() {
        var props = _get(TBtn_.prototype.__proto__ || Object.getPrototypeOf(TBtn_.prototype), 'getDefaultProps', this).call(this);
        if (W.__design__) props['data-html.opt'] = 'edit';
        return Object.assign(props, { block: '',
          disabled: '', type: 'button',
          className: 'btn', bsClass: 'btn', bsStyle: 'default'
        });
      }
    }, {
      key: 'getInitialState',
      value: function getInitialState() {
        var state = _get(TBtn_.prototype.__proto__ || Object.getPrototypeOf(TBtn_.prototype), 'getInitialState', this).call(this);

        this.defineDual(['icon', 'glyph']) // make duals.icon, duals.glyph ready
        .defineDual('role', null, 'button');
        this.defineDual(['bsSize', 'bsStyle', 'data-checked', 'block'], renewKlass);
        this.defineDual('itemSpace', itemSpaceFn_);
        this.defineDual('href', function (value, oldValue) {
          if (!this.props.bsStyle) // auto assign bsStyle only when no props.bsStyle
            this.duals.bsStyle = value ? 'link' : 'default';
        });

        this.defineDual('id__', function (value, oldValue) {
          if (value <= 2) return;
          if (hasChildNode_(this.props.children)) return; // no need setChildren

          this.state['tagName.'] = this.state.bsStyle == 'link' ? 'a' : 'button';

          var bChild,
              sIcon = this.state.icon,
              glyph = this.state.glyph;
          var sTitle = safeContent(this.state['html.']);
          var bChild = [React.createElement(
            'span',
            { key: 'txt' },
            sTitle
          )];
          if (sIcon) bChild.unshift(React.createElement('img', { key: 'img', style: { position: 'relative', top: '-2px' }, src: sIcon }));else if (glyph) bChild.unshift(React.createElement('span', { key: 'img', className: 'glyphicon glyphicon-' + glyph }));
          utils.setChildren(this, bChild);
        });

        if (this.props['isOption.']) {
          var self = this;
          this.listen('data-checked', function (value, oldValue) {
            if (!value) return;
            setTimeout(function () {
              if (self.state.recheckable) self.duals['data-checked'] = ''; // auto reset data-checked when recheckable
            }, 400);
          });
        }

        return state;

        function renewKlass(value, oldValue) {
          var sSize = getSizeKlass_('btn', this.state.bsSize);
          var sCls = utils.setupKlass(this.state.klass, btn_klass_, 'btn-' + (this.state.bsStyle || 'default'), sSize, this.state.block && 'btn-block', this.state['data-checked'] && 'active');
          this.duals.klass = sCls;
        }
      }
    }, {
      key: '$$onClick',
      value: function $$onClick(event) {
        if (W.__design__) event.preventDefault(); // avoid click jump linker

        if (this.props['isOption.']) {
          // run super $$onClick(event)
          if (this.state.disabled) return;
          this.setChecked(null);
        }
        if (this.$onClick) this.$onClick(event);
      }
    }]);

    return TBtn_;
  }(TBase);

  return TBtn_;
}

BS.Btn_ = MakeBtnCls(T.Button_, 'Btn');
BS.Btn = new BS.Btn_();

var BsBtn__ = BS.Btn._createClass(null);

BS.OptBtn_ = MakeBtnCls(T.OptButton_, 'OptBtn');
BS.OptBtn = new BS.OptBtn_();

var menuitem_klass_ = { active: true, disabled: true, divider: true, 'dropdown-header': true };

var TMenuItem_ = function (_BS$Li_) {
  _inherits(TMenuItem_, _BS$Li_);

  function TMenuItem_(name, desc) {
    _classCallCheck(this, TMenuItem_);

    var _this7 = _possibleConstructorReturn(this, (TMenuItem_.__proto__ || Object.getPrototypeOf(TMenuItem_)).call(this, name || 'bs.MenuItem', desc));

    if (W.__design__) _this7._defaultProp['data-html.opt'] = 'edit';
    Object.assign(_this7._defaultProp, { bsClass: 'menuitem',
      role: 'presentation', disabled: ''
    });
    return _this7;
  }

  _createClass(TMenuItem_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TMenuItem_.prototype.__proto__ || Object.getPrototypeOf(TMenuItem_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.divider = [iLevel + 1, 'string', boolPropmpt_];
      dSchema.disabled = [iLevel + 2, 'string', boolPropmpt_];
      dSchema['data-checked'] = [iLevel + 3, 'string', boolPropmpt_];
      dSchema.header = [iLevel + 4, 'string', boolPropmpt_];
      dSchema.href = [iLevel + 5, 'string'];
      dSchema.icon = [iLevel + 6, 'string'];
      dSchema.glyph = [iLevel + 7, 'string'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TMenuItem_.prototype.__proto__ || Object.getPrototypeOf(TMenuItem_.prototype), 'getDefaultProps', this).call(this);
      if (W.__design__) props['data-html.opt'] = 'edit';
      return Object.assign(props, { bsClass: 'menuitem',
        role: 'presentation', disabled: ''
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TMenuItem_.prototype.__proto__ || Object.getPrototypeOf(TMenuItem_.prototype), 'getInitialState', this).call(this);

      this.defineDual('role').defineDual(['disabled', 'data-checked'], renewKlass);
      this.defineDual('header', function (value, oldValue) {
        this.duals.role = 'heading';
        renewKlass.call(this); // padding:[3,20,3,20]
      });
      this.defineDual('divider', function (value, oldValue) {
        this.duals.role = 'separator';
        renewKlass.call(this); // margin:[9,0,9,0] height:1
      });

      this.defineDual(['icon', 'glyph']); // make duals.icon duals.glyph available
      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;
        if (this.state.divider || this.state.header) return; // no children

        var sSrc = this.state.href || jsVoid_;
        var LnkClass,
            attrs = { key: 'a', role: 'menuitem',
          tabIndex: '-1', href: sSrc
        };
        if (this.state.disabled) attrs.style = { pointerEvents: 'none' };
        if (this.isOpt_) {
          LnkClass = OptA__;
          // attrs['data-checked'] = '';  // always clickable
        } else LnkClass = A__;

        var jsx,
            sIcon = this.state.icon,
            glyph = this.state.glyph;
        var sTitle = safeContent(this.state['html.']);
        if (sIcon) jsx = React.createElement(
          LnkClass,
          attrs,
          React.createElement(Img__, { src: sIcon, key: 'img', style: { position: 'relative', top: '-2px' } }),
          React.createElement(
            Span__,
            { key: 'tit' },
            sTitle
          )
        );else if (glyph) jsx = React.createElement(
          LnkClass,
          attrs,
          React.createElement(Span__, { key: 'img', klass: 'glyphicon glyphicon-' + glyph }),
          React.createElement(
            Span__,
            { key: 'tit' },
            sTitle
          )
        );else jsx = React.createElement(
          LnkClass,
          attrs,
          sTitle
        );
        utils.setChildren(this, [jsx]);
      });

      return state;

      function renewKlass(value, oldValue) {
        var sCls = '';
        if (this.state.divider) sCls = 'divider';else {
          sCls = utils.klassNames(this.state.header && 'dropdown-header', this.state['data-checked'] && 'active', this.state.disabled && 'disabled');
        }

        sCls = utils.setupKlass(this.state.klass, menuitem_klass_, sCls);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TMenuItem_;
}(BS.Li_);

BS.MenuItem_ = TMenuItem_;
BS.MenuItem = new TMenuItem_();

var TOptItem_ = function (_TMenuItem_) {
  _inherits(TOptItem_, _TMenuItem_);

  function TOptItem_(name, desc) {
    _classCallCheck(this, TOptItem_);

    return _possibleConstructorReturn(this, (TOptItem_.__proto__ || Object.getPrototypeOf(TOptItem_)).call(this, name || 'bs.OptItem', desc));
  }

  _createClass(TOptItem_, [{
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TOptItem_.prototype.__proto__ || Object.getPrototypeOf(TOptItem_.prototype), 'getInitialState', this).call(this);
      this.isOpt_ = true;
      return state;
    }
  }]);

  return TOptItem_;
}(TMenuItem_);

BS.OptItem_ = TOptItem_;
BS.OptItem = new TOptItem_();

var menulist_klass_ = { 'dropdown-menu': true, open: true };

function onMenuClick_(event) {
  event.stopPropagation();

  var sMenuCls = 'dropdown-menu',
      sSrc = '',
      sKey = '',
      node = null;
  var topNode = this.getHtmlNode(),
      targ = event.target;
  while (targ) {
    if (targ === topNode || targ === document.body) break;
    if (targ.classList.contains(sMenuCls)) {
      node = targ;
      break;
    } else if (targ.nodeName == 'A') {
      sSrc = targ.href;
      sKey = utils.keyOfNode(targ);
    }
    targ = targ.parentNode;
  }
  if (!node) return;

  if (W.__design__ || !sSrc || this.state.disabled) // for most browser, should not fire event if state.disabled 
    event.preventDefault(); // avoid <a> jumping

  var doSelect = false,
      fn = this.props.onSelect || this.onSelect;
  if (typeof fn == 'function') {
    fn.call(this, sKey, event);
    doSelect = true;
  }
  if (doSelect || this.state.disabled) event.stopPropagation();
}

idSetter['.rewgt.bt.MenuList.menu'] = function (value, oldValue) {
  if (value == 1) {
    var owner = this.parentOf(true);
    this.setEvent({ $onClick: onMenuClick_.bind(owner) });
  }
};

var TMenuList_ = function (_BS$MarkedDiv_) {
  _inherits(TMenuList_, _BS$MarkedDiv_);

  function TMenuList_(name, desc) {
    _classCallCheck(this, TMenuList_);

    var _this9 = _possibleConstructorReturn(this, (TMenuList_.__proto__ || Object.getPrototypeOf(TMenuList_)).call(this, name || 'bs.MenuList', desc));

    Object.assign(_this9._defaultProp, { bsClass: 'dropdown-menu',
      noShow: '1'
    });
    return _this9;
  }

  _createClass(TMenuList_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TMenuList_.prototype.__proto__ || Object.getPrototypeOf(TMenuList_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.open = [iLevel + 1, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TMenuList_.prototype.__proto__ || Object.getPrototypeOf(TMenuList_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { 'childInline.': true,
        className: 'rewgt-unit noselect-txt',
        bsClass: 'dropdown-menu', noShow: '1'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TMenuList_.prototype.__proto__ || Object.getPrototypeOf(TMenuList_.prototype), 'getInitialState', this).call(this);

      this.defineDual('open');
      this.defineDual('id__', function (value, oldValue) {
        if (oldValue == 1) {
          var sPosCss,
              isAbsolute = ownerAbsolute_(this);
          if (isAbsolute) sPosCss = 'absolute';else sPosCss = this.state.style.position || 'relative'; // if not specified, assign 'relative'
          if (sPosCss == 'absolute') this.duals.style = { position: sPosCss };else this.duals.style = { position: sPosCss, clear: 'left' };
        }
        if (value <= 2) return;

        var isOpen = this.state.open;
        var sCls = utils.setupKlass(this.state.klass, menulist_klass_, 'dropdown-menu', isOpen && 'open');
        var dStyle = { display: isOpen ? 'block' : 'none' };

        var bMenu = this.state.nodes.map(function (item) {
          return item[1];
        });

        utils.setChildren(this, [React.createElement(
          BsUl__,
          { key: 'menu', klass: sCls, role: 'menu', style: dStyle, $id__: '.rewgt.bt.MenuList.menu' },
          bMenu
        )]);
      });

      if (this.props.open || this.props.defaultOpen) this.duals.open = '1';
      return state;
    }
  }]);

  return TMenuList_;
}(BS.MarkedDiv_);

BS.MenuList_ = TMenuList_;
BS.MenuList = new TMenuList_();

var btngroup_klass_ = { 'btn-group-lg': true, 'btn-group-md': true, 'btn-group-sm': true,
  'btn-group-xs': true, 'btn-group': true, 'btn-group-vertical': true
};

var TBtnGroup_ = function (_BS$Div2_3) {
  _inherits(TBtnGroup_, _BS$Div2_3);

  function TBtnGroup_(name, desc) {
    _classCallCheck(this, TBtnGroup_);

    var _this10 = _possibleConstructorReturn(this, (TBtnGroup_.__proto__ || Object.getPrototypeOf(TBtnGroup_)).call(this, name || 'bs.BtnGroup', desc));

    Object.assign(_this10._defaultProp, { bsClass: 'btn-group',
      justified: '', vertical: ''
    });
    return _this10;
  }

  _createClass(TBtnGroup_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TBtnGroup_.prototype.__proto__ || Object.getPrototypeOf(TBtnGroup_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.bsSize = [iLevel + 1, 'string', ['', 'large', 'medium', 'small', 'xsmall']];
      dSchema.justified = [iLevel + 2, 'string', boolPropmpt_];
      dSchema.vertical = [iLevel + 3, 'string', boolPropmpt_];
      dSchema.itemSpace = [iLevel + 4, 'number'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TBtnGroup_.prototype.__proto__ || Object.getPrototypeOf(TBtnGroup_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, {
        justified: '', vertical: '', bsClass: 'btn-group'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TBtnGroup_.prototype.__proto__ || Object.getPrototypeOf(TBtnGroup_.prototype), 'getInitialState', this).call(this);

      this.defineDual(['bsSize', 'vertical'], renewKlass);

      this.defineDual('itemSpace', function (value, oldValue) {
        var i = parseInt(value);
        if (!isNaN(i)) {
          var bMrg = this.state.margin.slice(0);
          bMrg[1] = bMrg[3] = i;
          this.duals.margin = bMrg;
        }
      });

      this.defineDual('justified', function (value, oldValue) {
        var self = this,
            isJustify = !!value,
            isVertical = this.state.vertical;

        setTimeout(function () {
          var sPer,
              b = utils.eachComponent(self),
              iLen = b.length;
          if (iLen == 0 || iLen > 100) return;
          if (isVertical || !isJustify) sPer = '';else sPer = Math.floor(1000 / iLen) / 10 + '%'; // 50% 33.3% ...

          b.forEach(function (child) {
            child.duals.style = { width: sPer };
          });
        }, 0);
      });

      return state;

      function renewKlass(value, oldValue) {
        var sSize = getSizeKlass_('btn-group', this.state.bsSize);
        var sMainCls = this.state.vertical ? 'btn-group-vertical' : 'btn-group';
        var sCls = utils.setupKlass(this.state.klass, btngroup_klass_, sMainCls, sSize);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TBtnGroup_;
}(BS.Div2_);

BS.BtnGroup_ = TBtnGroup_;
BS.BtnGroup = new TBtnGroup_();

idSetter['.rewgt.bt.DropdownBtn.btn'] = function (value, oldValue) {
  if (value == 1) {
    var owner = this.parentOf(true);
    this.setEvent({
      $onClick: onToggleClick.bind(owner),
      $onKeyDown: onToggleKeyDown.bind(owner)
    });
  }

  function onToggleClick(event) {
    event.stopPropagation();
    if (this.state.disabled) return;

    var toOpen = !this.state.open,
        self = this;
    if (toOpen) {
      self.noClickClose_ = true;
      setTimeout(function () {
        self.noClickClose_ = false;
      }, 1000);
    }
    this.toggleOpen_(event, { source: 'click' });
    setTimeout(function () {
      if (toOpen) {
        var menuComp = self.componentOf('menu');
        var menuNode = menuComp && menuComp.getHtmlNode();
        if (menuNode) {
          var node = menuNode.querySelector('li.active > [tabindex="-1"]');
          if (node) node.focus(); // if no active item, ignore focus
        }
      } else self.focus();
    }, 300);
  }

  function onToggleKeyDown(event) {
    event.stopPropagation();

    if (event.metaKey || event.altKey || event.ctrlKey || event.shiftKey) return;
    if (this.state.disabled) return;

    var code = event.keyCode,
        toOpen = !this.state.open;
    if (code == 40) {
      // down
      this.lastKeyPress_ = new Date().valueOf();
      if (toOpen) {
        this.toggleOpen_(event, { source: 'keydown' });
        this.focusMenuNext_();
      }
      event.preventDefault();
    } else if (code == 27 || code == 9) {
      // esc or tab
      if (!toOpen) this.toggleOpen_(event, { source: 'keydown' });
    }
  }
};

idSetter['.rewgt.bt.DropdownBtn.menu'] = function (value, oldValue) {
  if (value == 1) {
    var owner = this.parentOf(true);

    this.setEvent({
      $onClick: function (event) {
        onMenuClick_.call(this, event);
        if (this.state.open) this.toggleOpen_(event, { source: 'select' });
      }.bind(owner),

      $onKeyDown: function (event) {
        event.stopPropagation();
        if (event.metaKey || event.altKey || event.ctrlKey || event.shiftKey) return;

        var code = event.keyCode;
        if (code == 40 || code == 38) {
          event.preventDefault();
          this.lastKeyPress_ = new Date().valueOf();
          if (code == 40) // down
            this.focusMenuNext_();else this.focusMenuPrev_(); // up
        } else if (code == 27 || code == 9) {
          // esc or tab
          if (this.state.open) this.toggleOpen_(event, { source: 'keydown' }); // close it
        }
      }.bind(owner)
    });
  }
};

var dropbtn_klass_ = { dropdown: true, dropup: true, 'btn-group': true,
  'btn-group-default': true, 'btn-group-success': true, 'btn-group-warning': true,
  'btn-group-danger': true, 'btn-group-info': true, 'btn-group-primary': true,
  'btn-group-link': true, open: true, disabled: true, active: true,
  'input-group-btn': true
};

var TDropdownBtn_ = function (_BS$MarkedDiv_2) {
  _inherits(TDropdownBtn_, _BS$MarkedDiv_2);

  function TDropdownBtn_(name, desc) {
    _classCallCheck(this, TDropdownBtn_);

    var _this11 = _possibleConstructorReturn(this, (TDropdownBtn_.__proto__ || Object.getPrototypeOf(TDropdownBtn_)).call(this, name || 'bs.DropdownBtn', desc));

    _this11._statedProp.push('data-checked');
    Object.assign(_this11._defaultProp, { bsClass: 'dropdown',
      'data-checked': '',
      bsStyle: 'default', disabled: '', noShow: '1'
    });
    return _this11;
  }

  _createClass(TDropdownBtn_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TDropdownBtn_.prototype.__proto__ || Object.getPrototypeOf(TDropdownBtn_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.bsStyle = [iLevel + 1, 'string', ['default', 'success', 'warning', 'danger', 'info', 'primary', 'link']];
      dSchema.bsSize = [iLevel + 2, 'string', ['', 'large', 'medium', 'small', 'xsmall']];
      dSchema.desc = [iLevel + 3, 'string'];
      dSchema.disabled = [iLevel + 4, 'string', boolPropmpt_];
      dSchema.dropup = [iLevel + 5, 'string', boolPropmpt_];
      dSchema.noCaret = [iLevel + 6, 'string', boolPropmpt_];
      dSchema.open = [iLevel + 7, 'string', boolPropmpt_];
      dSchema.pullRight = [iLevel + 8, 'string', boolPropmpt_];
      dSchema['data-checked'] = [iLevel + 9, 'string', boolPropmpt_]; // used under bs.Nav
      dSchema.itemSpace = [iLevel + 10, 'number'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TDropdownBtn_.prototype.__proto__ || Object.getPrototypeOf(TDropdownBtn_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { 'childInline.': true,
        className: 'rewgt-unit noselect-txt', 'data-checked': '',
        bsClass: 'dropdown', disabled: '', bsStyle: 'default', noShow: '1'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TDropdownBtn_.prototype.__proto__ || Object.getPrototypeOf(TDropdownBtn_.prototype), 'getInitialState', this).call(this);

      this.lastKeyPress_ = 0; // time of key press
      this.noClickClose_ = false;
      this.inInputGroup_ = false;

      var ownerComp = this.parentOf(true); // true means ignore virtual node
      if (ownerComp) {
        var ownerCls = ownerComp.props.bsClass;
        if (ownerCls == 'input-group') {
          this.inInputGroup_ = true;
          this.$gui.className = W.__design__ ? 'rewgt-inline' : '';
          state['tagName.'] = 'span';
        } else if (ownerCls == 'nav') {
          state['tagName.'] = 'li';
          state.role = 'presentation';
          state.inNav_ = '1';

          var noSelect = this.props.noSelect;
          if (noSelect === undefined && (ownerComp = ownerComp.parentOf(true))) {
            var sOwnCls = ownerComp.props.bsClass;
            if (sOwnCls === 'navbar' || sOwnCls === 'navbar-collapse') noSelect = true; // if under bs.Navbar, default take props.noSelect as true
          }

          var segComp = this.componentOf('./');
          if (segComp) {
            var self = this;
            segComp.listen('checkedId', function (value, oldValue) {
              var subComp = self.componentOf('menu');
              if (subComp) {
                var keys = {};
                utils.eachComponent(subComp, function (child) {
                  keys[child.duals.keyid] = true;
                });
                var b = boolToStr(keys[value]);
                self.duals['data-checked'] = b;

                if (b && noSelect) {
                  setTimeout(function () {
                    self.duals['data-checked'] = ''; // auto clear select
                  }, 300);
                }
              }
            });
          }
        }
      }

      this.defineDual('role');
      this.defineDual('itemSpace', function (value, oldValue) {
        var i = parseInt(value);
        if (!isNaN(i)) {
          var bMrg = this.state.margin.slice(0);
          bMrg[1] = bMrg[3] = i;
          this.duals.margin = bMrg;
        }
      });

      state.disabled = '';
      this.defineDual('desc', null, '').defineDual(['bsSize', 'noCaret', 'pullRight']).defineDual(['bsStyle', 'disabled', 'dropup', 'open', 'data-checked'], renewKlass);

      var thisComp = this;
      this.listen('open', function (value, oldValue) {
        if (!value) {
          var menuNode = thisComp.componentOf('menu');
          menuNode = menuNode && menuNode.getHtmlNode();
          if (nodeContains(menuNode, activeNodeOfDoc())) thisComp.focus();
        }
      });
      this.listen('disabled', function (value, oldValue) {
        if (thisComp.duals.open) {
          // auto close menu when disabled
          var evt = document.createEvent('Event');
          thisComp.toggleOpen_(evt, { source: 'disabled' });
        }
      });

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var inNav = this.state.inNav_ || '';
        var inSplitBtn = !this.inInputGroup_ && !inNav && this.isSplitBtn_; // if inNav, fix inSplitBtn to false

        var bsStyle = this.state.bsStyle || 'default';
        var bsSize = this.state.bsSize || '';
        var sTitle = safeContent(this.state.desc);
        var noCaret = this.state.noCaret;
        var disabled = this.state.disabled || '';
        var caretStyle = {
          display: 'inline block',
          visibility: noCaret ? 'hidden' : 'visible',
          marginLeft: noCaret || inSplitBtn ? '0px' : '4px'
        };

        var bMenu = this.state.nodes.map(function (item) {
          return item[1];
        });

        var sClsName = inNav ? 'dropdown-toggle' : inSplitBtn ? 'btn' : 'btn dropdown-toggle';
        var BtnClass = inNav ? A__ : BsBtn__;
        var sMenuCls = utils.klassNames('dropdown-menu', this.state.pullRight ? 'dropdown-menu-right' : '');

        var bChild;
        if (inSplitBtn) {
          bChild = [React.createElement(
            BsBtn__,
            { key: 'btn0', className: sClsName, bsSize: bsSize, bsStyle: bsStyle, disabled: disabled },
            React.createElement(
              'span',
              { key: 'title' },
              sTitle
            )
          ), React.createElement(
            BsBtn__,
            { key: 'btn', className: 'dropdown-toggle btn ' + bsStyle, bsSize: bsSize, bsStyle: bsStyle, disabled: disabled, $id__: '.rewgt.bt.DropdownBtn.btn' },
            React.createElement('span', { key: 'caret', className: 'caret', style: caretStyle })
          ), React.createElement(
            BsUl__,
            { key: 'menu', klass: sMenuCls, role: 'menu', borderWidth: 1, padding: 0, $id__: '.rewgt.bt.DropdownBtn.menu' },
            bMenu
          )];
        } else {
          bChild = [React.createElement(
            BtnClass,
            { key: 'btn', className: sClsName, bsSize: bsSize, bsStyle: bsStyle, disabled: disabled, $id__: '.rewgt.bt.DropdownBtn.btn' },
            React.createElement(
              'span',
              { key: 'title' },
              sTitle
            ),
            React.createElement('span', { key: 'caret', className: 'caret', style: caretStyle })
          ), React.createElement(
            BsUl__,
            { key: 'menu', klass: sMenuCls, role: 'menu', borderWidth: 1, padding: 0, $id__: '.rewgt.bt.DropdownBtn.menu' },
            bMenu
          )];
        }
        utils.setChildren(this, bChild);
      });

      this.duals.open = boolToStr(this.props.open); // call renewKlass() and try focus
      return state;

      function renewKlass(value, oldValue) {
        var bsStyle, bsGroup;
        if (this.inInputGroup_) {
          bsStyle = '';
          bsGroup = 'input-group-btn';
        } else {
          bsStyle = 'btn-group-' + this.state.bsStyle;
          bsGroup = !this.state.inNav_ && 'btn-group';
        }

        var sDropUpDn = this.state.dropup ? 'dropup' : 'dropdown';
        var sCls = utils.setupKlass(this.state.klass, dropbtn_klass_, bsStyle, bsGroup, sDropUpDn, this.state.disabled && 'disabled', this.state.open && 'open', this.state['data-checked'] && 'active');
        this.duals.klass = sCls;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TDropdownBtn_.prototype.__proto__ || Object.getPrototypeOf(TDropdownBtn_.prototype), 'componentDidMount', this).call(this);

      document.addEventListener('click', this.handleClose_, false);
      if (this.props.defaultOpen && !this.state.open) this.toggleOpen_();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.handleClose_);
      _get(TDropdownBtn_.prototype.__proto__ || Object.getPrototypeOf(TDropdownBtn_.prototype), 'componentWillUnmount', this).call(this);
    }
  }, {
    key: 'handleClose_',
    value: function handleClose_(event) {
      if (this.state.open && !this.noClickClose_) this.toggleOpen_(event, { source: 'rootClose' }); // close it
    }
  }, {
    key: 'toggleOpen_',
    value: function toggleOpen_(event, eventDetails) {
      var toOpen = !this.state.open;

      if (event && eventDetails) {
        var fn = this.props.onToggle || this.onToggle;
        if (typeof fn == 'function') fn.call(this, toOpen, event, eventDetails);
      }

      this.duals.open = boolToStr(toOpen);
    }
  }, {
    key: 'focus',
    value: function focus() {
      var btnComp = this.componentOf('btn');
      setTimeout(function () {
        var node = btnComp && btnComp.getHtmlNode();
        if (node && node.focus) node.focus();
      }, 0);
    }
  }, {
    key: 'focusMenuNext_',
    value: function focusMenuNext_() {
      var menuComp = this.componentOf('menu');
      if (menuComp && new Date().valueOf() - this.lastKeyPress_ < 1000) {
        this.lastKeyPress_ = 0;

        setTimeout(function () {
          var node = menuComp.getHtmlNode();
          if (node) {
            var b = Array.from(node.querySelectorAll('[tabindex="-1"]'));
            if (b.length === 0) return;

            var actived = document.activeElement,
                activeIdx = b.indexOf(actived);
            var nextIdx = activeIdx == b.length - 1 ? 0 : activeIdx + 1; // activeIdx = -1  --> 0
            b[nextIdx].focus();
          }
        }, 0);
      }
    }
  }, {
    key: 'focusMenuPrev_',
    value: function focusMenuPrev_() {
      var menuComp = this.componentOf('menu');
      if (menuComp && new Date().valueOf() - this.lastKeyPress_ < 1000) {
        this.lastKeyPress_ = 0;

        setTimeout(function () {
          var node = menuComp.getHtmlNode();
          if (node) {
            var b = Array.from(node.querySelectorAll('[tabindex="-1"]'));
            if (b.length === 0) return;

            var actived = document.activeElement,
                activeIdx = b.indexOf(actived);
            var prevIdx = activeIdx <= 0 ? b.length - 1 : activeIdx - 1;
            b[prevIdx].focus();
          }
        }, 0);
      }
    }
  }]);

  return TDropdownBtn_;
}(BS.MarkedDiv_);

BS.DropdownBtn_ = TDropdownBtn_;
BS.DropdownBtn = new TDropdownBtn_();

var TSplitBtn_ = function (_TDropdownBtn_) {
  _inherits(TSplitBtn_, _TDropdownBtn_);

  function TSplitBtn_(name, desc) {
    _classCallCheck(this, TSplitBtn_);

    return _possibleConstructorReturn(this, (TSplitBtn_.__proto__ || Object.getPrototypeOf(TSplitBtn_)).call(this, name || 'bs.SplitBtn', desc));
  }

  _createClass(TSplitBtn_, [{
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TSplitBtn_.prototype.__proto__ || Object.getPrototypeOf(TSplitBtn_.prototype), 'getInitialState', this).call(this);
      this.isSplitBtn_ = true;
      return state;
    }
  }]);

  return TSplitBtn_;
}(TDropdownBtn_);

BS.SplitBtn_ = TSplitBtn_;
BS.SplitBtn = new TSplitBtn_();

BS.BtnToolbar_ = makeBsClass3_(BS.Div2_, 'BtnToolbar', 'btn-toolbar', false, 'toolbar');
BS.BtnToolbar = new BS.BtnToolbar_();

var modaldialog_style_ = { backgroundColor: 'rgba(0,0,0,0.3)' };

var TModalDialog_ = function (_BS$Div2_4) {
  _inherits(TModalDialog_, _BS$Div2_4);

  function TModalDialog_(name, desc) {
    _classCallCheck(this, TModalDialog_);

    var _this13 = _possibleConstructorReturn(this, (TModalDialog_.__proto__ || Object.getPrototypeOf(TModalDialog_)).call(this, name || 'bs.ModalDialog', desc));

    Object.assign(_this13._defaultProp, { bsClass: 'modal', showModal: '', hasClose: '1',
      role: 'dialog', tabIndex: '-1', style: Object.assign({}, modaldialog_style_)
    });
    return _this13;
  }

  _createClass(TModalDialog_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TModalDialog_.prototype.__proto__ || Object.getPrototypeOf(TModalDialog_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.dialogWidth = [iLevel + 1, 'any', null, '[any]: "large/small", css string, or number (0~0.9999 or pixels)'];
      dSchema.showModal = [iLevel + 2, 'string', boolPropmpt_];
      dSchema.manualClose = [iLevel + 3, 'string', boolPropmpt_];
      dSchema.canEsc = [iLevel + 4, 'string', boolPropmpt_];
      dSchema.hasClose = [iLevel + 5, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TModalDialog_.prototype.__proto__ || Object.getPrototypeOf(TModalDialog_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'modal', showModal: '', hasClose: '1',
        className: 'rewgt-unit modal', role: 'dialog', tabIndex: '-1',
        style: Object.assign({}, modaldialog_style_)
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TModalDialog_.prototype.__proto__ || Object.getPrototypeOf(TModalDialog_.prototype), 'getInitialState', this).call(this);

      this.defineDual(['dialogWidth', 'manualClose', 'canEsc', 'hasClose']).defineDual('showModal', function (value, oldValue) {
        this.duals.style = { display: value ? 'block' : 'none' };
      });

      this.ignoreEvent_ = function (event) {
        event.stopPropagation();
      }.bind(this);

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var noEvent = this.ignoreEvent_;
        var props = { onClick: noEvent, onDoubleClick: noEvent,
          onMouseDown: noEvent, onMouseMove: noEvent, onMouseUp: noEvent,
          onKeyPress: noEvent, onKeyDown: noEvent, onKeyUp: noEvent,
          onDragOver: noEvent, onDrop: noEvent
        };

        var wd = null,
            sCls = 'modal-dialog',
            dStyle = {};
        var width = this.state.dialogWidth,
            tp = typeof width === 'undefined' ? 'undefined' : _typeof(width);
        if (tp == 'number') {
          if (width >= 1) wd = width + 'px';else if (width >= 0.9999) wd = '100%';else if (wd >= 0) wd = wd * 100 + '%';
        } else if (tp == 'string' && width) {
          if (width == 'large' || width == 'small') sCls = 'modal-dialog ' + getSizeKlass_('modal', width);else wd = width;
        }
        if (wd !== null) {
          dStyle.width = wd;
          props.style = dStyle;
        }
        if (W.__design__) {
          dStyle.marginTop = '120px';
          props.style = dStyle;
        }
        props.className = sCls;

        utils.setChildren(this, null, React.createElement(
          'div',
          props,
          React.createElement('div', { className: 'modal-content', role: 'document' })
        ));
      });

      return state;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TModalDialog_.prototype.__proto__ || Object.getPrototypeOf(TModalDialog_.prototype), 'componentDidMount', this).call(this);

      this.escPress_ = function (event) {
        if (this.state.canEsc && event.keyCode == 27) this.duals.showModal = '';
      }.bind(this);
      document.addEventListener('keypress', this.escPress_, false);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.removeEventListener('keypress', this.escPress_);
      this.escPress_ = null;

      _get(TModalDialog_.prototype.__proto__ || Object.getPrototypeOf(TModalDialog_.prototype), 'componentWillUnmount', this).call(this);
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      if (!this.state.manualClose) this.duals.showModal = '';
      if (this.$onClick) this.$onClick(event);
    }
  }]);

  return TModalDialog_;
}(BS.Div2_);

BS.ModalDialog_ = TModalDialog_;
BS.ModalDialog = new TModalDialog_();

var TModalHeader_ = function (_BS$Div2_5) {
  _inherits(TModalHeader_, _BS$Div2_5);

  function TModalHeader_(name, desc) {
    _classCallCheck(this, TModalHeader_);

    var _this14 = _possibleConstructorReturn(this, (TModalHeader_.__proto__ || Object.getPrototypeOf(TModalHeader_)).call(this, name || 'bs.ModalHeader', desc));

    _this14._defaultProp.bsClass = 'modal-header';
    return _this14;
  }

  _createClass(TModalHeader_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TModalHeader_.prototype.__proto__ || Object.getPrototypeOf(TModalHeader_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.desc = [iLevel + 1, 'string'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TModalHeader_.prototype.__proto__ || Object.getPrototypeOf(TModalHeader_.prototype), 'getDefaultProps', this).call(this);
      props.bsClass = 'modal-header';
      props.className = 'rewgt-unit modal-header';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TModalHeader_.prototype.__proto__ || Object.getPrototypeOf(TModalHeader_.prototype), 'getInitialState', this).call(this);

      this.closeClick_ = function (event) {
        var owner = this.parentOf(true);
        if (owner && owner.props.bsClass === 'modal') owner.duals.showModal = '';
      }.bind(this);

      this.defineDual(['desc', 'hasClose']);
      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;
        if (hasChildNode_(this.props.children)) return;

        var jsx = [],
            sTitle = safeContent(this.state.desc);
        if (this.state.hasClose) jsx.push(React.createElement(
          'button',
          { key: 'btn', className: 'close', type: 'button', onClick: this.closeClick_ },
          'x'
        ));
        jsx.push(React.createElement(
          'h4',
          { key: 'tit', className: 'modal-title' },
          sTitle
        ));
        utils.setChildren(this, jsx);
      });

      return state;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TModalHeader_.prototype.__proto__ || Object.getPrototypeOf(TModalHeader_.prototype), 'componentDidMount', this).call(this);

      var owner = this.parentOf(true);
      if (owner && owner.props.bsClass === 'modal') {
        owner.listen('hasClose', this, 'hasClose');
        this.duals.hasClose = owner.state.hasClose;
      }
    }
  }]);

  return TModalHeader_;
}(BS.Div2_);

BS.ModalHeader_ = TModalHeader_;
BS.ModalHeader = new TModalHeader_();

BS.ModalTitle_ = makeBsClass3_(BS.H4_, 'ModalTitle', 'modal-title');
BS.ModalTitle = new BS.ModalTitle_();

BS.ModalBody_ = makeBsClass3_(BS.Div2_, 'ModalBody', 'modal-body');
BS.ModalBody = new BS.ModalBody_();

BS.ModalFooter_ = makeBsClass3_(BS.Div2_, 'ModalFooter', 'modal-footer');
BS.ModalFooter = new BS.ModalFooter_();

var tooltip_offset_ = [0, 0, 0, 2];
var tooltip_klass_ = { 'in': true, tooltip: true,
  top: true, right: true, bottom: true, left: true
};

var arrow_pos_hint_ = '[number]: 0.5 means 50%';
var side_offset_hint_ = '[array]: [iTop,iRight,iBottom,iLeft] of side gap';

var TTooltip_ = function (_BS$Div2_6) {
  _inherits(TTooltip_, _BS$Div2_6);

  function TTooltip_(name, desc) {
    _classCallCheck(this, TTooltip_);

    var _this15 = _possibleConstructorReturn(this, (TTooltip_.__proto__ || Object.getPrototypeOf(TTooltip_)).call(this, name || 'bs.Tooltip', desc));

    if (W.__design__) _this15._defaultProp['data-html.opt'] = 'edit';
    Object.assign(_this15._defaultProp, { bsClass: 'tooltip',
      offset: tooltip_offset_.slice(0),
      placement: 'right'
    });
    return _this15;
  }

  _createClass(TTooltip_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TTooltip_.prototype.__proto__ || Object.getPrototypeOf(TTooltip_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.placement = [iLevel + 1, 'string', ['top', 'right', 'bottom', 'left']];
      dSchema.arrowPosition = [iLevel + 2, 'number', null, arrow_pos_hint_];
      dSchema.offset = [iLevel + 3, 'array', null, side_offset_hint_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TTooltip_.prototype.__proto__ || Object.getPrototypeOf(TTooltip_.prototype), 'getDefaultProps', this).call(this);
      if (W.__design__) props['data-html.opt'] = 'edit';
      return Object.assign(props, { left: 0, top: 0,
        offset: tooltip_offset_.slice(0),
        placement: 'right', bsClass: 'tooltip'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TTooltip_.prototype.__proto__ || Object.getPrototypeOf(TTooltip_.prototype), 'getInitialState', this).call(this);

      this.defineDual('placement', function (value, oldValue) {
        if (value == 'top' || value == 'bottom') this.duals.padding = [5, 0, 5, 0];else this.duals.padding = [0, 5, 0, 5]; // left or right
        renewKlass.call(this);
      });

      this.defineDual('arrowPosition', function (value, oldValue) {
        this.state.arrowPosition = parseFloat(value);
      });

      this.defineDual('id__', function (value, oldValue) {
        if (oldValue == 1) {
          var isAbsolute = ownerAbsolute_(this);
          if (isAbsolute) this.duals.style = { position: 'absolute', display: 'block' };else {
            var sPosCss = this.state.style.position || 'relative'; // if not specified, assign 'relative'
            this.duals.style = { position: sPosCss,
              display: sPosCss == 'relative' ? 'inline-block' : 'block' // visibility:hidden for initial hide
            };
          }
        }
        if (value <= 2) return;

        var placement = this.state.placement || 'right';
        var arrStyle,
            arrPos = this.state.arrowPosition;
        if (isNaN(arrPos)) arrPos = 0.5;
        arrPos = Math.max(0, Math.min(1, arrPos)) * 100 + '%';
        if (placement == 'top' || placement == 'bottom') arrStyle = { left: arrPos };else arrStyle = { top: arrPos };

        var sTitle = safeContent(this.state['html.']);
        utils.setChildren(this, [React.createElement('div', { className: 'tooltip-arrow', style: arrStyle }), React.createElement(
          'div',
          { className: 'tooltip-inner' },
          sTitle
        )]);
      });

      function renewKlass(value, oldValue) {
        var sDirect = this.state.placement || 'right';
        var sCls = utils.setupKlass(this.state.klass, tooltip_klass_, 'in tooltip', sDirect);
        this.duals.klass = sCls;
      }

      return state;
    }
  }]);

  return TTooltip_;
}(BS.Div2_);

BS.Tooltip_ = TTooltip_;
BS.Tooltip = new TTooltip_();

var popover_offset_ = [10, 10, 10, 10];
var popover_klass_ = { 'in': true, popover: true,
  top: true, right: true, bottom: true, left: true
};

idSetter['.rewgt.bt.Popover.ctx'] = function (value, oldValue) {
  // only in __design__
  if (value == 1) {
    this.defineDual('id__', function (value, oldValue) {
      // not trigger duals['html.'] when design
      if (!this.isHooked) return;

      var sMark = this.state['html.'];
      if (typeof sMark == 'string') {
        var owner = this.parentOf(true);
        if (owner) owner.state['html.'] = sMark; // keep same and not trigger duals['html.']
      }
    });
  }
};

var TPopover_ = function (_BS$Div2_7) {
  _inherits(TPopover_, _BS$Div2_7);

  function TPopover_(name, desc) {
    _classCallCheck(this, TPopover_);

    var _this16 = _possibleConstructorReturn(this, (TPopover_.__proto__ || Object.getPrototypeOf(TPopover_)).call(this, name || 'bs.Popover', desc));

    Object.assign(_this16._defaultProp, { bsClass: 'popover',
      placement: 'right', role: 'tooltip', offset: popover_offset_.slice(0)
    });
    return _this16;
  }

  _createClass(TPopover_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TPopover_.prototype.__proto__ || Object.getPrototypeOf(TPopover_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.placement = [iLevel + 1, 'string', ['top', 'right', 'bottom', 'left']];
      dSchema.desc = [iLevel + 2, 'string'];
      dSchema.arrowPosition = [iLevel + 3, 'number', null, arrow_pos_hint_];
      dSchema.offset = [iLevel + 4, 'array', null, side_offset_hint_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TPopover_.prototype.__proto__ || Object.getPrototypeOf(TPopover_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'popover',
        placement: 'right', role: 'tooltip', offset: popover_offset_.slice(0),
        'isPre.': true, left: 0, top: 0
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TPopover_.prototype.__proto__ || Object.getPrototypeOf(TPopover_.prototype), 'getInitialState', this).call(this);

      this.defineDual('desc');
      this.defineDual('placement', renewKlass);
      this.defineDual('arrowPosition', function (value, oldValue) {
        this.state.arrowPosition = parseFloat(value);
      });

      this.defineDual('id__', function (value, oldValue) {
        if (oldValue == 1) {
          var sPosCss,
              isAbsolute = ownerAbsolute_(this);
          if (isAbsolute) sPosCss = 'absolute';else sPosCss = this.state.style.position || 'relative'; // if not specified, assign 'relative'
          this.duals.style = { position: sPosCss, display: 'block' }; // visibility:hidden for initial hide
        }
        if (value <= 2) return;

        var placement = this.state.placement || 'right';
        var arrStyle,
            arrPos = this.state.arrowPosition;
        if (isNaN(arrPos)) arrPos = 0.5;
        arrPos = Math.max(0, Math.min(1, arrPos)) * 100 + '%';
        if (placement == 'top' || placement == 'bottom') arrStyle = { left: arrPos };else arrStyle = { top: arrPos };

        var sTitle = safeContent(this.state.desc),
            sHtml = this.state['html.'] || '';
        var markProp = { key: 'ctx', klass: 'popover-content' };
        if (W.__design__) markProp['$id__'] = '.rewgt.bt.Popover.ctx';
        utils.setChildren(this, [React.createElement('div', { key: 'arr', className: 'arrow', style: arrStyle }), React.createElement(
          'h3',
          { key: 'tit', className: 'popover-title' },
          sTitle
        ), React.createElement(
          BsMarkedDiv__,
          markProp,
          sHtml
        )]);
      });

      return state;

      function renewKlass(value, oldValue) {
        var sDirect = this.state.placement || 'right';
        var sCls = utils.setupKlass(this.state.klass, popover_klass_, 'in popover', sDirect);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TPopover_;
}(BS.Div2_);

BS.Popover_ = TPopover_;
BS.Popover = new TPopover_();

var design_offset_x_ = 40,
    design_offset_y_ = 116;

var TOverlayTrigger_ = function (_BS$Div2_8) {
  _inherits(TOverlayTrigger_, _BS$Div2_8);

  function TOverlayTrigger_(name, desc) {
    _classCallCheck(this, TOverlayTrigger_);

    var _this17 = _possibleConstructorReturn(this, (TOverlayTrigger_.__proto__ || Object.getPrototypeOf(TOverlayTrigger_)).call(this, name || 'bs.OverlayTrigger', desc));

    Object.assign(_this17._defaultProp, { bsClass: 'overlay-trigger',
      placement: 'right', fireBy: 'hover,focus'
    });
    return _this17;
  }

  _createClass(TOverlayTrigger_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TOverlayTrigger_.prototype.__proto__ || Object.getPrototypeOf(TOverlayTrigger_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.placement = [iLevel + 1, 'string', ['top', 'right', 'bottom', 'left']];
      dSchema.desc = [iLevel + 2, 'string'];
      dSchema.path = [iLevel + 3, 'string', null, '[string]: path of overlay component'];
      dSchema.arrowPosition = [iLevel + 4, 'number', null, arrow_pos_hint_];
      dSchema.delay = [iLevel + 5, 'number', null, '[number]: millisecond delay amount'];
      dSchema.fireBy = [iLevel + 6, 'string', null, '[string]: any of "hover,focus,click"'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TOverlayTrigger_.prototype.__proto__ || Object.getPrototypeOf(TOverlayTrigger_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'overlay-trigger',
        placement: 'right', fireBy: 'hover,focus'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TOverlayTrigger_.prototype.__proto__ || Object.getPrototypeOf(TOverlayTrigger_.prototype), 'getInitialState', this).call(this);

      this.waitHideId = 0;

      this.defineDual('path');
      this.defineDual('arrowPosition', function (value, oldValue) {
        this.state.arrowPosition = parseFloat(value);
      });

      this.defineDual('delay', function (value, oldValue) {
        // if undefined or 0, means not auto close
        var i = parseInt(value) || 0;
        if (i < 0) i = Number.MAX_SAFE_INTEGER; // means waiting forever
        this.state.delay = i;
      });

      this.defineDual('desc').defineDual('placement').defineDual('fireBy');

      state['tagName.'] = '';
      return state;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.waitHideId) {
        clearTimeout(this.waitHideId);
        this.waitHideId = 0;
      }
      _get(TOverlayTrigger_.prototype.__proto__ || Object.getPrototypeOf(TOverlayTrigger_.prototype), 'componentWillUnmount', this).call(this);
    }
  }, {
    key: 'enterOverlay_',
    value: function enterOverlay_(isHover, isFocus, isCall, offX, offY) {
      var node = this.getHtmlNode();
      if (!node) return;

      var iAutoHide = this.state.delay || 0;
      if (isHover) this.byHover = true;
      if (isFocus) this.byFocus = true;
      if (isCall) this.byCall = true;
      if (this.overlayNode) {
        if (iAutoHide) waitingClose(self, iAutoHide);
        return;
      }

      var placement = this.state.placement;
      var iLeft,
          iTop,
          rect = nodeRect_(node),
          bLeftTop = absoluteCorner_();
      if (placement == 'right' || placement == 'left') {
        iLeft = rect.left + (isNaN(offX) ? 0 : offX);
        if (placement == 'right') iLeft += rect.width;
        iTop = rect.top + rect.height / 2 + (isNaN(offY) ? 0 : offY);
      } else {
        // top, bottom
        iLeft = rect.left + rect.width / 2 + (isNaN(offX) ? 0 : offX);
        iTop = rect.top + (isNaN(offY) ? 0 : offY);
        if (placement == 'bottom') iTop += rect.height;
      }
      iLeft -= bLeftTop[0];
      iTop -= bLeftTop[1];

      if (W.__design__) {
        iLeft += design_offset_x_;
        iTop += design_offset_y_;
      }

      var sRefPath = this.state.path,
          sDesc = this.state.desc || '';
      var arrPos = this.state.arrowPosition;
      if (isNaN(arrPos)) arrPos = 0.5;
      arrPos = Math.max(0, Math.min(1, arrPos));

      if (sDesc) {
        var overlay = this.overlayNode = newOverlayNode(node, placement, sDesc, arrPos, iLeft, iTop);
        this.refByPath = false;

        document.body.appendChild(overlay);
        setTimeout(function (self) {
          var r = nodeRect_(overlay);
          if (placement == 'top' || placement == 'bottom') {
            overlay.style.marginLeft = '-' + r.width / 2 + 'px';
            if (placement == 'top') overlay.style.marginTop = '-' + r.height + 'px';
          } else {
            // left or right
            overlay.style.marginTop = '-' + r.height / 2 + 'px';
            if (placement == 'left') overlay.style.marginLeft = '-' + (r.width + 2) + 'px';
          }

          var fn = self.props.onEnter || self.onEnter;
          if (typeof fn == 'function') fn.call(self);

          if (iAutoHide) waitingClose(self, iAutoHide);
        }, 0, this);
      } else if (sRefPath) {
        var targComp = this.componentOf(sRefPath);
        if (!targComp) return;

        this.overlayNode = targComp;
        this.refByPath = true;

        targComp.duals.style = { display: 'block', visibility: 'hidden', position: 'absolute' };

        var self = this;
        targComp.reRender(function () {
          var targNode = targComp.getHtmlNode();
          if (!targNode) return;

          var offset = targComp.props.offset || [0, 0, 0, 0];
          var r = nodeRect_(targNode);
          if (placement == 'top' || placement == 'bottom') {
            iLeft -= r.width / 2;
            if (placement == 'top') iTop -= r.height + (offset[2] || 0);else iTop += offset[0] || 0;
          } else {
            iTop -= r.height / 2;
            if (placement == 'left') iLeft -= r.width + (offset[1] || 0);else iLeft += offset[3] || 0;
          }

          targComp.duals.left = iLeft;
          targComp.duals.top = iTop;
          targComp.duals.style = { visibility: 'visible' };

          var fn = self.props.onEnter || self.onEnter;
          if (typeof fn == 'function') fn.call(self);

          if (iAutoHide) waitingClose(self, iAutoHide);
        });
      }
      // else, ignore

      function waitingClose(self, iWait) {
        if (self.waitHideId) clearTimeout(self.waitHideId);
        self.waitHideId = setTimeout(function () {
          self.waitHideId = 0;
          self.hideOverlay();
        }, iWait);
      }

      function newOverlayNode(node, placement, sDesc, arrPos, iLeft, iTop) {
        var overlay = document.createElement('div'),
            rect = nodeRect_(node);

        nodeSetAttr_(overlay, 'role', 'tooltip');
        overlay.className = 'in tooltip ' + placement;
        overlay.style.left = iLeft + 'px';
        overlay.style.top = iTop + 'px';

        var arrowNode = document.createElement('div'),
            sArrPos = arrPos * 100 + '%';
        arrowNode.className = 'tooltip-arrow';
        if (placement == 'top' || placement == 'bottom') arrowNode.style.left = sArrPos;else arrowNode.style.top = sArrPos;
        overlay.appendChild(arrowNode);

        var descNode = document.createElement('div');
        descNode.className = 'tooltip-inner';
        descNode.innerHTML = htmlEncode(sDesc);
        overlay.appendChild(descNode);

        return overlay;
      }
    }
  }, {
    key: 'exitOverlay_',
    value: function exitOverlay_() {
      var overlay = this.overlayNode;
      if (overlay && !this.byHover && !this.byFocus && !this.byCall) {
        if (this.waitHideId) {
          clearTimeout(this.waitHideId);
          this.waitHideId = 0;
        }

        this.overlayNode = null;
        setTimeout(function (self) {
          if (self.refByPath) overlay.duals.style = { visibility: 'hidden' };else {
            var owner = overlay.parentNode;
            if (owner) owner.removeChild(overlay);
          }

          var fn = self.props.onExit || self.onExit;
          if (typeof fn == 'function') fn.call(self);
        }, 0, this);
      }
    }
  }, {
    key: 'showOverlay',
    value: function showOverlay(offX, offY) {
      this.enterOverlay_(false, false, true, offX, offY); // by call
    }
  }, {
    key: 'hideOverlay',
    value: function hideOverlay() {
      // force exit
      this.byHover = this.byFocus = this.byCall = false;
      this.exitOverlay_();
    }
  }, {
    key: 'inShow',
    value: function inShow() {
      return !!this.overlayNode;
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      // if re-define $onClick, props.fireBy should be ''
      var sFireBy = this.state.fireBy;
      if (sFireBy.indexOf('click') >= 0) {
        if (this.overlayNode) this.hideOverlay();else this.enterOverlay_(false, false, true); // by call, not using offX,offY
      }

      if (this.$onClick) this.$onClick(event);
    }
  }, {
    key: '$$onMouseOver',
    value: function $$onMouseOver(event) {
      var sFireBy = this.state.fireBy;
      if (sFireBy.indexOf('hover') >= 0) this.enterOverlay_(true, false, false);

      if (this.$onMouseOver) this.$onMouseOver(event);
    }
  }, {
    key: '$$onMouseOut',
    value: function $$onMouseOut(event) {
      var sFireBy = this.state.fireBy;
      if (sFireBy.indexOf('hover') >= 0) {
        this.byHover = false;
        this.exitOverlay_();
      }

      if (this.$onMouseOut) this.$onMouseOut(event);
    }
  }, {
    key: '$$onFocus',
    value: function $$onFocus(event) {
      var sFireBy = this.state.fireBy;
      if (sFireBy.indexOf('focus') >= 0) this.enterOverlay_(false, true, false);

      if (this.$onFocus) this.$onFocus(event);
    }
  }, {
    key: '$$onBlur',
    value: function $$onBlur(event) {
      var sFireBy = this.state.fireBy;
      if (sFireBy.indexOf('focus') >= 0) {
        this.byFocus = false;
        this.exitOverlay_();
      }

      if (this.$onBlur) this.$onBlur(event);
    }
  }]);

  return TOverlayTrigger_;
}(BS.Div2_);

BS.OverlayTrigger_ = TOverlayTrigger_;
BS.OverlayTrigger = new TOverlayTrigger_();

var navitem_klass_ = { active: true, disabled: true, dropdown: true };

var TNavItem_ = function (_T$OptLi_) {
  _inherits(TNavItem_, _T$OptLi_);

  function TNavItem_(name, desc) {
    _classCallCheck(this, TNavItem_);

    var _this18 = _possibleConstructorReturn(this, (TNavItem_.__proto__ || Object.getPrototypeOf(TNavItem_)).call(this, name || 'bs.NavItem', desc));

    _this18._docUrl = bsDocUrl_;
    if (W.__design__) _this18._defaultProp['data-html.opt'] = 'edit';
    Object.assign(_this18._defaultProp, { bsClass: 'navitem',
      left: null, top: null, minWidth: 0, minHeight: 0,
      margin: div_margin_.slice(0), // css default is [0,0,-1,0]
      padding: div_padding_.slice(0),
      borderWidth: div_borderwd_.slice(0),
      role: 'presentation', disabled: ''
    });
    return _this18;
  }

  _createClass(TNavItem_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TNavItem_.prototype.__proto__ || Object.getPrototypeOf(TNavItem_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.disabled = [iLevel + 1, 'string', boolPropmpt_];
      dSchema['data-checked'] = [iLevel + 2, 'string', boolPropmpt_];
      dSchema.href = [iLevel + 3, 'string'];
      dSchema.icon = [iLevel + 4, 'string'];
      dSchema.glyph = [iLevel + 5, 'string'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TNavItem_.prototype.__proto__ || Object.getPrototypeOf(TNavItem_.prototype), 'getDefaultProps', this).call(this);
      if (W.__design__) props['data-html.opt'] = 'edit';
      return Object.assign(props, { bsClass: 'navitem', role: 'presentation',
        left: null, top: null, minWidth: 0, minHeight: 0,
        margin: div_margin_.slice(0), // css default is [0,0,-1,0]
        padding: div_padding_.slice(0),
        borderWidth: div_borderwd_.slice(0)
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TNavItem_.prototype.__proto__ || Object.getPrototypeOf(TNavItem_.prototype), 'getInitialState', this).call(this);

      this.defineDual(['disabled', 'data-checked'], renewKlass);

      var ownerObj = this.parentOf(true);
      if (ownerObj && ownerObj.props.bsClass == 'nav') {
        // NavItem should only used under Nav
        var noSelect = this.props.noSelect;
        if (noSelect === undefined && (ownerObj = ownerObj.parentOf(true))) {
          var sOwnCls = ownerObj.props.bsClass;
          if (sOwnCls === 'navbar' || sOwnCls === 'navbar-collapse') noSelect = true; // if under bs.Navbar, default take props.noSelect as true
        }
        if (noSelect) {
          var self = this;
          this.listen('data-checked', function (value, oldValue) {
            if (value) {
              setTimeout(function () {
                self.duals['data-checked'] = '';
              }, 300);
            }
          });
        }
      }

      this.defineDual(['icon', 'glyph']);
      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var sKey = this.duals.keyid + ''; // let child use same key
        var sSrc = this.state.href || jsVoid_;
        var sHtml = safeContent(this.state['html.']);
        var jsx,
            sIcon = this.state.icon,
            glyph = this.state.glyph;
        var props = { key: sKey, role: 'button',
          tabIndex: '-1', href: sSrc, style: { outline: '0' } // outline:0 to avoid focus frame
        };
        if (this.state.disabled) props.style = { pointerEvents: 'none' };
        if (sIcon) jsx = React.createElement(
          'a',
          props,
          React.createElement('img', { src: sIcon, style: { position: 'relative', top: '-2px' } }),
          sHtml
        );else if (glyph) jsx = React.createElement(
          'a',
          props,
          React.createElement('span', { className: 'glyphicon glyphicon-' + glyph }),
          sHtml
        );else jsx = React.createElement(
          'a',
          props,
          sHtml
        );
        utils.setChildren(this, [jsx]);
      });

      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, navitem_klass_, this.state['data-checked'] && 'active', this.state.disabled && 'disabled');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TNavItem_;
}(T.OptLi_);

BS.NavItem_ = TNavItem_;
BS.NavItem = new TNavItem_();

var nav_klass_ = { nav: true, 'nav-pills': true, 'nav-tabs': true,
  'nav-stacked': true, 'nav-justified': true,
  'navbar-nav': true, 'navbar-right': true, 'navbar-left': true
};

var TNav_ = function (_BS$Ul_) {
  _inherits(TNav_, _BS$Ul_);

  function TNav_(name, desc) {
    _classCallCheck(this, TNav_);

    var _this19 = _possibleConstructorReturn(this, (TNav_.__proto__ || Object.getPrototypeOf(TNav_)).call(this, name || 'bs.Nav', desc));

    Object.assign(_this19._defaultProp, { bsClass: 'nav', bsStyle: 'pills' });
    return _this19;
  }

  _createClass(TNav_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TNav_.prototype.__proto__ || Object.getPrototypeOf(TNav_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.bsStyle = [iLevel + 1, 'string', ['pills', 'tabs']];
      dSchema.justified = [iLevel + 2, 'string', boolPropmpt_];
      dSchema.stacked = [iLevel + 3, 'string', boolPropmpt_];
      dSchema.pullRight = [iLevel + 4, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TNav_.prototype.__proto__ || Object.getPrototypeOf(TNav_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'nav', bsStyle: 'pills' });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TNav_.prototype.__proto__ || Object.getPrototypeOf(TNav_.prototype), 'getInitialState', this).call(this);

      // no onSelect, pls listen NavXX.duals.checkedId
      var ownerObj = this.parentOf(true);
      if (ownerObj) {
        var sOwnCls = ownerObj.props.bsClass;
        if (sOwnCls === 'navbar' || sOwnCls === 'navbar-collapse') state.inNavBar_ = '1';
      }

      this.defineDual(['bsStyle', 'justified', 'stacked', 'pullRight'], renewKlass);

      return state;

      function renewKlass(value, oldValue) {
        var sPrefix,
            sAlign = '',
            sJustitied = '',
            sStacked = '';
        if (this.state.inNavBar_) {
          sPrefix = 'nav navbar-nav';
          sAlign = this.state.pullRight && 'navbar-right';
        } else {
          sPrefix = 'nav nav-' + this.state.bsStyle; // bsStyle must defined
          sJustitied = this.state.justified && 'nav-justified';
          sStacked = this.state.stacked && 'nav-stacked';
        }

        var sCls = utils.setupKlass(this.state.klass, nav_klass_, sPrefix, sJustitied, sAlign, sStacked);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TNav_;
}(BS.Ul_);

BS.Nav_ = TNav_;
BS.Nav = new TNav_();

var navbar_klass_ = { navbar: true, 'navbar-default': true, 'navbar-inverse': true,
  'navbar-fixed-top': true, 'navbar-fixed-bottom': true, 'navbar-static-top': true
};

var TNavbar_ = function (_BS$Div2_9) {
  _inherits(TNavbar_, _BS$Div2_9);

  function TNavbar_(name, desc) {
    _classCallCheck(this, TNavbar_);

    var _this20 = _possibleConstructorReturn(this, (TNavbar_.__proto__ || Object.getPrototypeOf(TNavbar_)).call(this, name || 'bs.Navbar', desc));

    _this20._statedProp = ['height', 'left', 'top']; // no 'width'
    Object.assign(_this20._defaultProp, { bsClass: 'navbar',
      bsStyle: 'default'
    });
    return _this20;
  }

  _createClass(TNavbar_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TNavbar_.prototype.__proto__ || Object.getPrototypeOf(TNavbar_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'navbar', 'tagName.': 'nav',
        bsStyle: 'default'
      });
    }
  }, {
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TNavbar_.prototype.__proto__ || Object.getPrototypeOf(TNavbar_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.bsStyle = [iLevel + 1, 'string', ['default', 'inverse']];
      dSchema.fluid = [iLevel + 2, 'string', boolPropmpt_];
      dSchema.fixedTop = [iLevel + 3, 'string', boolPropmpt_];
      dSchema.fixedBottom = [iLevel + 4, 'string', boolPropmpt_];
      dSchema.staticTop = [iLevel + 5, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TNavbar_.prototype.__proto__ || Object.getPrototypeOf(TNavbar_.prototype), 'getInitialState', this).call(this);

      var useOwnerWd = false;
      if (this.props.width === null) {
        // try change to '100%' when under panel
        var ownerComp = this.parentOf(true);
        if (ownerComp && utils.hasClass(ownerComp, 'rewgt-panel')) {
          this.duals.width = 0.9999;
          useOwnerWd = true;
        }
      }

      this.defineDual('fluid');
      this.defineDual(['bsStyle', 'fixedTop', 'fixedBottom', 'staticTop'], renewKlass);

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var sCls = this.state.fluid ? 'container-fluid' : 'container';
        var bsWidth = null;
        if (useOwnerWd) {
          if (W.__design__) bsWidth = '100%';
        } else {
          bsWidth = this.state.width;
          if (bsWidth !== null && !isNaN(bsWidth) && bsWidth >= 1) bsWidth = bsWidth + 'px';
        }

        var jsx;
        if (bsWidth === null) jsx = React.createElement('div', { key: 'ctx', className: sCls });else jsx = React.createElement('div', { key: 'ctx', className: sCls, style: { width: bsWidth } });
        utils.setChildren(this, null, jsx);
      });

      return state;

      function renewKlass(value, oldValue) {
        var sStyle = 'navbar-' + this.state.bsStyle; // bsStyle must be defined
        var sWhere = '';
        if (!W.__design__) {
          if (this.state.fixedTop) sWhere = 'navbar-fixed-top';else if (this.state.fixedBottom) sWhere = 'navbar-fixed-bottom';
        }
        var sStatic = this.state.staticTop && 'navbar-static-top';

        var sCls = utils.setupKlass(this.state.klass, navbar_klass_, 'navbar', sStyle, sWhere, sStatic);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TNavbar_;
}(BS.Div2_);

BS.Navbar_ = TNavbar_;
BS.Navbar = new TNavbar_();

BS.NavbarHeader_ = makeBsClass3_(BS.Div2_, 'NavbarHeader', 'navbar-header');
BS.NavbarHeader = new BS.NavbarHeader_();

var TNavbarForm_ = function (_BS$Form_) {
  _inherits(TNavbarForm_, _BS$Form_);

  function TNavbarForm_(name, desc) {
    _classCallCheck(this, TNavbarForm_);

    var _this21 = _possibleConstructorReturn(this, (TNavbarForm_.__proto__ || Object.getPrototypeOf(TNavbarForm_)).call(this, name || 'bs.NavbarForm', desc));

    _this21._defaultProp.bsClass = 'navbar-form';
    return _this21;
  }

  _createClass(TNavbarForm_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TNavbarForm_.prototype.__proto__ || Object.getPrototypeOf(TNavbarForm_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.pullRight = [iLevel + 1, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TNavbarForm_.prototype.__proto__ || Object.getPrototypeOf(TNavbarForm_.prototype), 'getDefaultProps', this).call(this);
      props.bsClass = 'navbar-form';
      props.className = 'rewgt-unit navbar-form';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TNavbarForm_.prototype.__proto__ || Object.getPrototypeOf(TNavbarForm_.prototype), 'getInitialState', this).call(this);
      this.defineDual('pullRight', renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, ['navbar-right'], this.state.pullRight && 'navbar-right');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TNavbarForm_;
}(BS.Form_);

BS.NavbarForm_ = TNavbarForm_;
BS.NavbarForm = new TNavbarForm_();

var TNavbarToggle_ = function (_T$Button_) {
  _inherits(TNavbarToggle_, _T$Button_);

  function TNavbarToggle_(name, desc) {
    _classCallCheck(this, TNavbarToggle_);

    var _this22 = _possibleConstructorReturn(this, (TNavbarToggle_.__proto__ || Object.getPrototypeOf(TNavbarToggle_)).call(this, name || 'bs.NavbarToggle', desc));

    _this22._docUrl = bsDocUrl_;
    Object.assign(_this22._defaultProp, { bsClass: 'navbar-toggle',
      type: 'button'
    });
    return _this22;
  }

  _createClass(TNavbarToggle_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TNavbarToggle_.prototype.__proto__ || Object.getPrototypeOf(TNavbarToggle_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'navbar-toggle',
        type: 'button', className: 'navbar-toggle'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TNavbarToggle_.prototype.__proto__ || Object.getPrototypeOf(TNavbarToggle_.prototype), 'getInitialState', this).call(this);

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        utils.setChildren(this, [React.createElement('span', { key: 'b1', className: 'icon-bar' }), React.createElement('span', { key: 'b2', className: 'icon-bar' }), React.createElement('span', { key: 'b3', className: 'icon-bar' })]);
      });

      return state;
    }
  }, {
    key: 'findCollapse_',
    value: function findCollapse_() {
      var ownerComp = this.parentOf(true);
      if (ownerComp) {
        var sCls = ownerComp.props.bsClass;
        if (sCls === 'navbar-header') {
          ownerComp = ownerComp.parentOf(true);
          if (ownerComp && ownerComp.props.bsClass !== 'navbar') ownerComp = null;
        } else if (sCls !== 'navbar') ownerComp = null;
      }

      var collaComp = null;
      if (ownerComp) {
        utils.eachComponent(ownerComp, function (comp) {
          if (comp.props.role === 'collapsible') collaComp = comp;
        });
      }
      return collaComp;
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      var collaComp = this.findCollapse_();
      if (collaComp) collaComp.duals.expanded = boolToStr(!collaComp.state.expanded);

      if (this.$onClick) this.$onClick(event);
    }
  }]);

  return TNavbarToggle_;
}(T.Button_);

BS.NavbarToggle_ = TNavbarToggle_;
BS.NavbarToggle = new TNavbarToggle_();

var TFade_ = function (_BS$Div2_10) {
  _inherits(TFade_, _BS$Div2_10);

  function TFade_(name, desc) {
    _classCallCheck(this, TFade_);

    var _this23 = _possibleConstructorReturn(this, (TFade_.__proto__ || Object.getPrototypeOf(TFade_)).call(this, name || 'bs.Fade', desc));

    Object.assign(_this23._defaultProp, { bsClass: 'fade',
      expanded: ''
    });
    return _this23;
  }

  _createClass(TFade_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TFade_.prototype.__proto__ || Object.getPrototypeOf(TFade_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { className: 'rewgt-unit fade',
        bsClass: 'fade', expanded: ''
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TFade_.prototype.__proto__ || Object.getPrototypeOf(TFade_.prototype), 'getInitialState', this).call(this);
      this.defineDual('expanded', renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, ['in'], this.state.expanded && 'in');
        this.duals.klass = sCls;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TFade_.prototype.__proto__ || Object.getPrototypeOf(TFade_.prototype), 'componentDidMount', this).call(this);
      if (this.props.defaultExpanded && !this.state.expanded) this.duals.expanded = '1';
    }
  }]);

  return TFade_;
}(BS.Div2_);

BS.Fade_ = TFade_;
BS.Fade = new TFade_();

var TCollapse_ = function (_BS$Div2_11) {
  _inherits(TCollapse_, _BS$Div2_11);

  function TCollapse_(name, desc) {
    _classCallCheck(this, TCollapse_);

    var _this24 = _possibleConstructorReturn(this, (TCollapse_.__proto__ || Object.getPrototypeOf(TCollapse_)).call(this, name || 'bs.Collapse', desc));

    Object.assign(_this24._defaultProp, { bsClass: 'collapse',
      expanded: '', role: 'collapsible'
    });
    return _this24;
  }

  _createClass(TCollapse_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TCollapse_.prototype.__proto__ || Object.getPrototypeOf(TCollapse_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.animation = [iLevel + 1, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TCollapse_.prototype.__proto__ || Object.getPrototypeOf(TCollapse_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { className: 'rewgt-unit collapse',
        bsClass: 'collapse', expanded: '', role: 'collapsible'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TCollapse_.prototype.__proto__ || Object.getPrototypeOf(TCollapse_.prototype), 'getInitialState', this).call(this);

      this.defineDual('animation');
      this.defineDual('expanded', renewKlass);

      return state;

      function renewKlass(value, oldValue) {
        var b = ['in', 'collapsing'],
            collapseCls = this.props.collapseClass;
        if (collapseCls) b.push(collapseCls);

        var sExpanded = this.state.expanded && 'in';
        var sNewCls = utils.setupKlass(this.state.klass, b, collapseCls, sExpanded);
        var node,
            toOpen = false,
            toClose = false;
        if (this.state.animation && (node = this.getHtmlNode())) {
          toOpen = sExpanded && !utils.containKlass(this.state.klass, 'in');
          toClose = !sExpanded && utils.containKlass(this.state.klass, 'in');
        }

        this.duals.klass = utils.klassNames(sNewCls, toClose && 'in', // keep showing
        (toOpen || toClose) && 'collapsing' // apply collapsing.height = 0
        );

        if (toOpen) {
          var oldHi = this.state.height,
              isPx = !isNaN(oldHi) && oldHi >= 1;
          if (isPx) this.duals.height = null;
          setTimeout(function (self) {
            node.style.height = isPx ? oldHi + 'px' : '100px';
            setTimeout(function () {
              node.style.height = '';
              if (isPx) self.duals.height = oldHi;
              self.duals.klass = sNewCls; // remove 'collapsing'
            }, 300);
          }, 100, this);
        }
        if (toClose) {
          var oldHi = this.state.height;
          if (oldHi === null) node.style.height = node.clientHeight + 'px';

          setTimeout(function (self) {
            node.style.height = '';
            setTimeout(function () {
              self.state.height = 0;
              self.duals.height = oldHi;
              self.duals.klass = sNewCls; // remove 'in collapsing'
            }, 300);
          }, 100, this);
        }
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TCollapse_.prototype.__proto__ || Object.getPrototypeOf(TCollapse_.prototype), 'componentDidMount', this).call(this);
      if (this.props.defaultExpanded && !this.state.expanded) this.duals.expanded = '1';
    }
  }]);

  return TCollapse_;
}(BS.Div2_);

BS.Collapse_ = TCollapse_;
BS.Collapse = new TCollapse_();

function MakeCollapseCls(sName, sCls) {
  var T = function (_BS$Collapse_) {
    _inherits(T, _BS$Collapse_);

    function T(name, desc) {
      _classCallCheck(this, T);

      var _this25 = _possibleConstructorReturn(this, (T.__proto__ || Object.getPrototypeOf(T)).call(this, name || 'bs.' + sName, desc));

      _this25._defaultProp.bsClass = sCls;
      return _this25;
    }

    _createClass(T, [{
      key: 'getDefaultProps',
      value: function getDefaultProps() {
        var props = _get(T.prototype.__proto__ || Object.getPrototypeOf(T.prototype), 'getDefaultProps', this).call(this);
        props.collapseClass = props.bsClass = sCls;
        return props;
      }
    }]);

    return T;
  }(BS.Collapse_);

  return T;
}

BS.NavbarCollapse_ = MakeCollapseCls('NavbarCollapse', 'navbar-collapse');
BS.NavbarCollapse = new BS.NavbarCollapse_();

var TNavbarBrand_ = function (_T$A_) {
  _inherits(TNavbarBrand_, _T$A_);

  function TNavbarBrand_(name, desc) {
    _classCallCheck(this, TNavbarBrand_);

    var _this26 = _possibleConstructorReturn(this, (TNavbarBrand_.__proto__ || Object.getPrototypeOf(TNavbarBrand_)).call(this, name || 'bs.NavbarBrand', desc));

    _this26._docUrl = bsDocUrl_;
    if (W.__design__) _this26._defaultProp['data-html.opt'] = 'edit';
    _this26._defaultProp.bsClass = 'navbar-brand';
    return _this26;
  }

  _createClass(TNavbarBrand_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TNavbarBrand_.prototype.__proto__ || Object.getPrototypeOf(TNavbarBrand_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.icon = [iLevel + 1, 'string'];
      dSchema.glyph = [iLevel + 2, 'string'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TNavbarBrand_.prototype.__proto__ || Object.getPrototypeOf(TNavbarBrand_.prototype), 'getDefaultProps', this).call(this);
      if (W.__design__) props['data-html.opt'] = 'edit';
      props.bsClass = 'navbar-brand';
      props.className = 'navbar-brand';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TNavbarBrand_.prototype.__proto__ || Object.getPrototypeOf(TNavbarBrand_.prototype), 'getInitialState', this).call(this);

      this.defineDual(['icon', 'glyph']);
      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;
        if (hasChildNode_(this.props.children)) return; // no need setChildren

        var jsx,
            sIcon = this.state.icon,
            glyph = this.state.glyph;
        var sTitle = safeContent(this.state['html.']);
        if (sIcon) jsx = React.createElement('img', { key: 'txt', src: sIcon });else if (glyph) jsx = React.createElement('span', { key: 'txt', className: 'glyphicon glyphicon-' + glyph });else jsx = React.createElement(
          'span',
          { key: 'txt' },
          sTitle
        );
        utils.setChildren(this, [jsx]); // render text-linker or brand-icon
      });

      return state;
    }
  }]);

  return TNavbarBrand_;
}(T.A_);

BS.NavbarBrand_ = TNavbarBrand_;
BS.NavbarBrand = new TNavbarBrand_();

var navbartext_klass_ = { pullRight: true };

var TNavbarText_ = function (_BS$P_) {
  _inherits(TNavbarText_, _BS$P_);

  function TNavbarText_(name, desc) {
    _classCallCheck(this, TNavbarText_);

    var _this27 = _possibleConstructorReturn(this, (TNavbarText_.__proto__ || Object.getPrototypeOf(TNavbarText_)).call(this, name || 'bs.NavbarText', desc));

    _this27._defaultProp.bsClass = 'navbar-text';
    return _this27;
  }

  _createClass(TNavbarText_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TNavbarText_.prototype.__proto__ || Object.getPrototypeOf(TNavbarText_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.pullRight = [iLevel + 1, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TNavbarText_.prototype.__proto__ || Object.getPrototypeOf(TNavbarText_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'navbar-text',
        className: 'rewgt-unit navbar-text'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TNavbarText_.prototype.__proto__ || Object.getPrototypeOf(TNavbarText_.prototype), 'getInitialState', this).call(this);
      this.defineDual('pullRight', renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sAlign = this.state.pullRight && 'navbar-right';
        var sCls = utils.setupKlass(this.state.klass, navbartext_klass_, sAlign);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TNavbarText_;
}(BS.P_);

BS.NavbarText_ = TNavbarText_;
BS.NavbarText = new TNavbarText_();

BS.NavbarLink_ = makeBsClass3_(T.A_, 'NavbarLink', 'navbar-link', true);
BS.NavbarLink = new BS.NavbarLink_();

BS.Breadcrumb_ = makeBsClass3_(BS.Ol_, 'Breadcrumb', 'breadcrumb', false, 'navigation');
BS.Breadcrumb = new BS.Breadcrumb_();

var breaditem_klass_ = { active: true };

var TBreadItem_ = function (_BS$Li_2) {
  _inherits(TBreadItem_, _BS$Li_2);

  function TBreadItem_(name, desc) {
    _classCallCheck(this, TBreadItem_);

    var _this28 = _possibleConstructorReturn(this, (TBreadItem_.__proto__ || Object.getPrototypeOf(TBreadItem_)).call(this, name || 'bs.BreadItem', desc));

    if (W.__design__) _this28._defaultProp['data-html.opt'] = 'edit';
    _this28._defaultProp.bsClass = 'breadcrumb-item';
    return _this28;
  }

  _createClass(TBreadItem_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TBreadItem_.prototype.__proto__ || Object.getPrototypeOf(TBreadItem_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.active = [iLevel + 1, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TBreadItem_.prototype.__proto__ || Object.getPrototypeOf(TBreadItem_.prototype), 'getDefaultProps', this).call(this);
      if (W.__design__) props['data-html.opt'] = 'edit';
      props.bsClass = 'breadcrumb-item';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TBreadItem_.prototype.__proto__ || Object.getPrototypeOf(TBreadItem_.prototype), 'getInitialState', this).call(this);

      this.defineDual('active', renewKlass);
      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var sSrc = this.state.href || jsVoid_;
        var jsx,
            sDesc = safeContent(this.state['html.']);
        if (this.state.active) jsx = React.createElement(
          'span',
          { key: 'txt' },
          sDesc
        );else jsx = React.createElement(
          'a',
          { key: 'txt', href: sSrc },
          sDesc
        );
        utils.setChildren(this, [jsx]);
      });

      return state;

      function renewKlass(value, oldValue) {
        var sActive = this.state.active && 'active';
        var sCls = utils.setupKlass(this.state.klass, breaditem_klass_, sActive);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TBreadItem_;
}(BS.Li_);

BS.BreadItem_ = TBreadItem_;
BS.BreadItem = new TBreadItem_();

var pagination_klass_ = { pagination: true, 'pagination-lg': true,
  'pagination-md': true, 'pagination-sm': true, 'pagination-xs': true
};

var TPagination_ = function (_BS$Ul_2) {
  _inherits(TPagination_, _BS$Ul_2);

  function TPagination_(name, desc) {
    _classCallCheck(this, TPagination_);

    var _this29 = _possibleConstructorReturn(this, (TPagination_.__proto__ || Object.getPrototypeOf(TPagination_)).call(this, name || 'bs.Pagination', desc));

    Object.assign(_this29._defaultProp, { bsClass: 'pagination',
      activePage: 1, maxButtons: 0, ellipsis: '1'
    });
    return _this29;
  }

  _createClass(TPagination_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TPagination_.prototype.__proto__ || Object.getPrototypeOf(TPagination_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.bsSize = [iLevel + 1, 'string', ['', 'large', 'medium', 'small', 'xsmall']];
      dSchema.activePage = [iLevel + 2, 'number'];
      dSchema.maxButtons = [iLevel + 3, 'number'];
      dSchema.items = [iLevel + 4, 'number'];
      dSchema.first = [iLevel + 5, 'string', boolPropmpt_];
      dSchema.prev = [iLevel + 6, 'string', boolPropmpt_];
      dSchema.next = [iLevel + 7, 'string', boolPropmpt_];
      dSchema.last = [iLevel + 8, 'string', boolPropmpt_];
      dSchema.ellipsis = [iLevel + 9, 'string', boolPropmpt_];
      dSchema.boundary = [iLevel + 10, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TPagination_.prototype.__proto__ || Object.getPrototypeOf(TPagination_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'pagination',
        activePage: 1, maxButtons: 0, ellipsis: '1'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TPagination_.prototype.__proto__ || Object.getPrototypeOf(TPagination_.prototype), 'getInitialState', this).call(this);

      this.defineDual('bsSize', renewKlass).defineDual(['items', 'maxButtons', 'activePage', 'ellipsis', 'boundary', 'first', 'last', 'prev', 'next']);

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var itemNum = parseInt(this.state.items) || 1;
        var activePage = parseInt(this.state.activePage) || 1;
        activePage = Math.max(1, Math.min(itemNum, activePage)); // fix to: 1 ~ itemNum
        var maxButtons = parseInt(this.state.maxButtons) || 0; // 0, 3,4 ...
        if (maxButtons == 1 || maxButtons == 2) maxButtons = 3; // ensure: iHalf >= 1
        if (maxButtons >= itemNum) maxButtons = 0; // no need use maxButtons
        var ellipsis = maxButtons > 0 && this.state.ellipsis;
        var boundary = ellipsis && this.state.boundary;

        var iStart = 1,
            iEnd = itemNum,
            hasPreE = false,
            hasPostE = false;
        if (ellipsis) {
          // assert(maxButtons > 0)
          var iHalf = Math.floor((maxButtons - 1) / 2);
          if (activePage - iHalf > 2) {
            hasPreE = true;
            iStart = Math.min(activePage - iHalf, itemNum - maxButtons + 1);
          }
          if (activePage + iHalf < itemNum - 1) {
            hasPostE = true;
            iEnd = Math.max(activePage + iHalf, iStart + maxButtons - 1);
          }
        } else {
          if (maxButtons) {
            var iHalf = Math.floor((maxButtons - 1) / 2);
            iStart = Math.max(1, activePage - iHalf);
            iEnd = Math.min(iStart + maxButtons - 1, itemNum);
          }
          // else, list all buttons
        }

        var bItem = [];
        if (this.state.first) bItem.push(makePageItem('first', '«', false, activePage == 1));
        if (this.state.prev) bItem.push(makePageItem('prev', '‹', false, activePage == 1));

        if (hasPreE) {
          if (boundary) bItem.push(makePageItem('b1', '1', false, false));
          bItem.push(makePageItem('pre', '…', false, true));
        }

        for (var i = iStart; i <= iEnd; i++) {
          bItem.push(makePageItem('b' + i, i + '', activePage == i, false));
        }

        if (hasPostE) {
          bItem.push(makePageItem('post', '…', false, true));
          if (boundary) bItem.push(makePageItem('b' + itemNum, itemNum + '', false, false));
        }

        if (this.state.next) bItem.push(makePageItem('next', '›', false, activePage == itemNum));
        if (this.state.last) bItem.push(makePageItem('last', '»', false, activePage == itemNum));

        utils.setChildren(this, bItem);
      });

      this.listen('activePage', function (value, oldValue) {
        var fn = this.props.onSelect || this.onSelect;
        if (fn) fn.call(this, value);
      }.bind(this));

      this.duals.bsSize = this.props.bsSize || ''; // renew klass
      return state;

      function renewKlass(value, oldValue) {
        var sSize = getSizeKlass_('pagination', this.state.bsSize);
        var sCls = utils.setupKlass(this.state.klass, pagination_klass_, 'pagination', sSize);
        this.duals.klass = sCls;
      }

      function makePageItem(sKey, sTitle, actived, disabled) {
        var props = { key: sKey, 'data-key': sKey };
        if (actived) props.className = 'active';else if (disabled) props.className = 'disabled';

        var dStyle = { outline: '0' };
        var props2 = { role: 'button', href: jsVoid_, style: dStyle };
        if (disabled) {
          props2.tabIndex = '-1';
          dStyle.pointerEvents = 'none';
        }
        return React.createElement(
          'li',
          props,
          React.createElement(
            'a',
            props2,
            React.createElement(
              'span',
              null,
              sTitle
            )
          )
        );
      }
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      var targ = event.target,
          sKey = '';
      while (targ) {
        if (targ.nodeName == 'LI') {
          sKey = targ.getAttribute('data-key'); // maybe `null`
          break;
        } else if (targ.nodeName == 'UL' || targ === document.body) break;else targ = targ.parentNode;
      }

      if (sKey) {
        // bN pre post first last prev next
        var iNew = undefined;
        if (sKey[0] == 'b') iNew = parseInt(sKey.slice(1));else if (sKey == 'first') iNew = 1;else if (sKey == 'last') iNew = parseInt(this.state.items) || 1;else {
          var iCurr = parseInt(this.state.activePage) || 1,
              iLast = parseInt(this.state.items) || 1;
          if (sKey == 'prev') iNew = Math.max(1, iCurr - 1);else if (sKey == 'next') iNew = Math.min(iLast, iCurr + 1);
        }

        if (!isNaN(iNew)) this.duals.activePage = iNew;
      }

      if (this.$onClick) this.$onClick(event);
    }
  }]);

  return TPagination_;
}(BS.Ul_);

BS.Pagination_ = TPagination_;
BS.Pagination = new TPagination_();

var pageritem_klass_ = { disabled: true, previous: true, next: true };

var TPagerItem_ = function (_BS$Li_3) {
  _inherits(TPagerItem_, _BS$Li_3);

  function TPagerItem_(name, desc) {
    _classCallCheck(this, TPagerItem_);

    var _this30 = _possibleConstructorReturn(this, (TPagerItem_.__proto__ || Object.getPrototypeOf(TPagerItem_)).call(this, name || 'bs.PagerItem', desc));

    if (W.__design__) _this30._defaultProp['data-html.opt'] = 'edit';
    _this30._defaultProp.bsClass = 'pager-item';
    return _this30;
  }

  _createClass(TPagerItem_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TPagerItem_.prototype.__proto__ || Object.getPrototypeOf(TPagerItem_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.disabled = [iLevel + 1, 'string', boolPropmpt_];
      dSchema.prev = [iLevel + 2, 'string', boolPropmpt_];
      dSchema.next = [iLevel + 3, 'string', boolPropmpt_];
      dSchema.icon = [iLevel + 4, 'string'];
      dSchema.glyph = [iLevel + 5, 'string'];
      dSchema.itemSpace = [iLevel + 6, 'number'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TPagerItem_.prototype.__proto__ || Object.getPrototypeOf(TPagerItem_.prototype), 'getDefaultProps', this).call(this);
      if (W.__design__) props['data-html.opt'] = 'edit';
      props.bsClass = 'pager-item';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TPagerItem_.prototype.__proto__ || Object.getPrototypeOf(TPagerItem_.prototype), 'getInitialState', this).call(this);

      this.defineDual(['icon', 'glyph', 'itemSpace']).defineDual(['disabled', 'prev', 'next'], renewKlass);

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var iSpace = parseInt(this.state.itemSpace);
        var dStyle = { outline: '0' };
        var props = { key: 'txt', role: 'button', href: jsVoid_, style: dStyle };
        if (!isNaN(iSpace)) {
          dStyle.marginLeft = iSpace + 'px';
          dStyle.marginRight = iSpace + 'px';
        }
        if (this.state.disabled) {
          dStyle.pointerEvents = 'none';
          props.tabIndex = '-1';
        }
        var jsx,
            sIcon = this.state.icon,
            glyph = this.state.glyph;
        var sTitle = safeContent(this.state['html.']);
        if (sIcon) jsx = React.createElement(
          'a',
          props,
          React.createElement('img', { src: sIcon, style: { position: 'relative', top: '-2px' } }),
          sTitle
        );else if (glyph) jsx = React.createElement(
          'a',
          props,
          React.createElement('span', { className: 'glyphicon glyphicon-' + glyph }),
          sTitle
        );else jsx = React.createElement(
          'a',
          props,
          sTitle
        );

        utils.setChildren(this, [jsx]);
      });

      return state;

      function renewKlass(value, oldValue) {
        var sDisabled = this.state.disabled && 'disabled';
        var sPrev = this.state.prev && 'previous';
        var sNext = this.state.next && 'next';
        var sCls = utils.setupKlass(this.state.klass, pageritem_klass_, sDisabled, sPrev, sNext);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TPagerItem_;
}(BS.Li_);

BS.PagerItem_ = TPagerItem_;
BS.PagerItem = new TPagerItem_();

BS.Pager_ = makeBsClass3_(BS.Ul_, 'Pager', 'pager');
BS.Pager = new BS.Pager_();

var grid_klass_ = { container: true, 'container-fluid': true };

var TGrid_ = function (_BS$Div2_12) {
  _inherits(TGrid_, _BS$Div2_12);

  function TGrid_(name, desc) {
    _classCallCheck(this, TGrid_);

    var _this31 = _possibleConstructorReturn(this, (TGrid_.__proto__ || Object.getPrototypeOf(TGrid_)).call(this, name || 'bs.Grid', desc));

    _this31._statedProp = ['height', 'left', 'top']; // no 'width'
    _this31._defaultProp.bsClass = 'container';
    _this31._defaultProp.fluid = '';
    return _this31;
  }

  _createClass(TGrid_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TGrid_.prototype.__proto__ || Object.getPrototypeOf(TGrid_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.fluid = [iLevel + 1, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TGrid_.prototype.__proto__ || Object.getPrototypeOf(TGrid_.prototype), 'getDefaultProps', this).call(this);
      props.bsClass = 'container';
      props.fluid = '';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TGrid_.prototype.__proto__ || Object.getPrototypeOf(TGrid_.prototype), 'getInitialState', this).call(this);

      if (this.props.width === null && W.__design__) {
        // try change to '100%' when under panel
        var ownerComp = this.parentOf(true);
        if (ownerComp && utils.hasClass(ownerComp, 'rewgt-panel')) this.duals.width = 0.9999;
      }

      this.defineDual('fluid', renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, grid_klass_, this.state.fluid ? 'container-fluid' : 'container');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TGrid_;
}(BS.Div2_);

BS.Grid_ = TGrid_;
BS.Grid = new TGrid_();

var TRow_ = function (_BS$Div2_13) {
  _inherits(TRow_, _BS$Div2_13);

  function TRow_(name, desc) {
    _classCallCheck(this, TRow_);

    var _this32 = _possibleConstructorReturn(this, (TRow_.__proto__ || Object.getPrototypeOf(TRow_)).call(this, name || 'bs.Row', desc));

    _this32._statedProp = ['height', 'left', 'top']; // no 'width'
    _this32._defaultProp.bsClass = 'row';
    return _this32;
  }

  _createClass(TRow_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TRow_.prototype.__proto__ || Object.getPrototypeOf(TRow_.prototype), 'getDefaultProps', this).call(this);
      props.bsClass = 'row';
      props.className = 'rewgt-unit row';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TRow_.prototype.__proto__ || Object.getPrototypeOf(TRow_.prototype), 'getInitialState', this).call(this);

      if (this.props.width === null && W.__design__) {
        // try change to '100%' when under panel
        var ownerComp = this.parentOf(true);
        if (ownerComp && utils.hasClass(ownerComp, 'rewgt-panel')) this.duals.width = 0.9999;
      }

      return state;
    }
  }]);

  return TRow_;
}(BS.Div2_);

BS.Row_ = TRow_;
BS.Row = new TRow_();

var col_klass_ = { 'hidden-xs': true, 'hidden-sm': true, 'hidden-md': true, 'hidden-lg': true };
(function (iNum) {
  for (var i = 1; i <= iNum; i++) {
    col_klass_['col-xs-' + i] = true;
    col_klass_['col-sm-' + i] = true;
    col_klass_['col-md-' + i] = true;
    col_klass_['col-lg-' + i] = true;

    col_klass_['col-xs-offset-' + i] = true;
    col_klass_['col-sm-offset-' + i] = true;
    col_klass_['col-md-offset-' + i] = true;
    col_klass_['col-lg-offset-' + i] = true;

    col_klass_['col-xs-pull-' + i] = true;
    col_klass_['col-sm-pull-' + i] = true;
    col_klass_['col-md-pull-' + i] = true;
    col_klass_['col-lg-pull-' + i] = true;

    col_klass_['col-xs-push-' + i] = true;
    col_klass_['col-sm-push-' + i] = true;
    col_klass_['col-md-push-' + i] = true;
    col_klass_['col-lg-push-' + i] = true;
  }
})(12);

var TCol_ = function (_BS$Div2_14) {
  _inherits(TCol_, _BS$Div2_14);

  function TCol_(name, desc) {
    _classCallCheck(this, TCol_);

    var _this33 = _possibleConstructorReturn(this, (TCol_.__proto__ || Object.getPrototypeOf(TCol_)).call(this, name || 'bs.Col', desc));

    _this33._defaultProp.bsClass = 'col';
    return _this33;
  }

  _createClass(TCol_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TCol_.prototype.__proto__ || Object.getPrototypeOf(TCol_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.xs = [iLevel + 1, 'number'];
      dSchema.sm = [iLevel + 2, 'number'];
      dSchema.md = [iLevel + 3, 'number'];
      dSchema.lg = [iLevel + 4, 'number'];
      dSchema.xsHidden = [iLevel + 5, 'string', boolPropmpt_];
      dSchema.smHidden = [iLevel + 6, 'string', boolPropmpt_];
      dSchema.mdHidden = [iLevel + 7, 'string', boolPropmpt_];
      dSchema.lgHidden = [iLevel + 8, 'string', boolPropmpt_];
      dSchema.xsOffset = [iLevel + 9, 'number'];
      dSchema.smOffset = [iLevel + 10, 'number'];
      dSchema.mdOffset = [iLevel + 11, 'number'];
      dSchema.lgOffset = [iLevel + 12, 'number'];
      dSchema.xsPull = [iLevel + 13, 'number'];
      dSchema.smPull = [iLevel + 14, 'number'];
      dSchema.mdPull = [iLevel + 15, 'number'];
      dSchema.lgPull = [iLevel + 16, 'number'];
      dSchema.xsPush = [iLevel + 17, 'number'];
      dSchema.smPush = [iLevel + 18, 'number'];
      dSchema.mdPush = [iLevel + 19, 'number'];
      dSchema.lgPush = [iLevel + 20, 'number'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TCol_.prototype.__proto__ || Object.getPrototypeOf(TCol_.prototype), 'getDefaultProps', this).call(this);
      props.bsClass = 'col';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TCol_.prototype.__proto__ || Object.getPrototypeOf(TCol_.prototype), 'getInitialState', this).call(this);

      this.defineDual(['xs', 'sm', 'md', 'lg', 'xsHidden', 'smHidden', 'mdHidden', 'lgHidden', 'xsOffset', 'smOffset', 'mdOffset', 'lgOffset', 'xsPull', 'smPull', 'mdPull', 'lgPull', 'xsPush', 'smPush', 'mdPush', 'lgPush'], renewKlass);

      return state;

      function renewKlass(value, oldValue) {
        var sMainCls = utils.klassNames(makeIdxKlass('col-xs-', this.state.xs), makeIdxKlass('col-sm-', this.state.sm), makeIdxKlass('col-md-', this.state.md), makeIdxKlass('col-lg-', this.state.lg));
        var sOffset = utils.klassNames(makeIdxKlass('col-xs-offset-', this.state.xsOffset), makeIdxKlass('col-sm-offset-', this.state.smOffset), makeIdxKlass('col-md-offset-', this.state.mdOffset), makeIdxKlass('col-lg-offset-', this.state.lgOffset));
        var sPull = utils.klassNames(makeIdxKlass('col-xs-pull-', this.state.xsPull), makeIdxKlass('col-sm-pull-', this.state.smPull), makeIdxKlass('col-md-pull-', this.state.mdPull), makeIdxKlass('col-lg-pull-', this.state.lgPull));
        var sPush = utils.klassNames(makeIdxKlass('col-xs-push-', this.state.xsPush), makeIdxKlass('col-sm-push-', this.state.smPush), makeIdxKlass('col-md-push-', this.state.mdPush), makeIdxKlass('col-lg-push-', this.state.lgPush));
        var sHidden = utils.klassNames(this.state.xsHidden && 'hidden-xs', this.state.smHidden && 'hidden-sm', this.state.mdHidden && 'hidden-md', this.state.lgHidden && 'hidden-lg');

        var sCls = utils.setupKlass(this.state.klass, col_klass_, sMainCls, sOffset, sPull, sPush, sHidden);
        this.duals.klass = sCls;
      }

      function makeIdxKlass(sPrefix, i) {
        if (typeof i == 'number') return sPrefix + i;else return '';
      }
    }
  }]);

  return TCol_;
}(BS.Div2_);

BS.Col_ = TCol_;
BS.Col = new TCol_();

var clearfix_klass_ = { 'visible-xs-block': true, 'visible-sm-block': true,
  'visible-md-block': true, 'visible-lg-block': true
};

var TClearfix_ = function (_BS$Div2_15) {
  _inherits(TClearfix_, _BS$Div2_15);

  function TClearfix_(name, desc) {
    _classCallCheck(this, TClearfix_);

    var _this34 = _possibleConstructorReturn(this, (TClearfix_.__proto__ || Object.getPrototypeOf(TClearfix_)).call(this, name || 'bs.Clearfix', desc));

    _this34._defaultProp.bsClass = 'clearfix';
    return _this34;
  }

  _createClass(TClearfix_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TClearfix_.prototype.__proto__ || Object.getPrototypeOf(TClearfix_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.xsBlock = [iLevel + 1, 'string', boolPropmpt_];
      dSchema.smBlock = [iLevel + 2, 'string', boolPropmpt_];
      dSchema.mdBlock = [iLevel + 3, 'string', boolPropmpt_];
      dSchema.lgBlock = [iLevel + 4, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TClearfix_.prototype.__proto__ || Object.getPrototypeOf(TClearfix_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'clearfix',
        className: 'rewgt-unit clearfix'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TClearfix_.prototype.__proto__ || Object.getPrototypeOf(TClearfix_.prototype), 'getInitialState', this).call(this);

      this.defineDual(['xsBlock', 'smBlock', 'mdBlock', 'lgBlock'], renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, clearfix_klass_, this.state.xsBlock && 'visible-xs-block', this.state.smBlock && 'visible-sm-block', this.state.mdBlock && 'visible-md-block', this.state.lgBlock && 'visible-lg-block');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TClearfix_;
}(BS.Div2_);

BS.Clearfix_ = TClearfix_;
BS.Clearfix = new TClearfix_();

BS.Jumbotron_ = makeBsClass3_(BS.Div2_, 'Jumbotron', 'jumbotron');
BS.Jumbotron = new BS.Jumbotron_();

var TPageHeader_ = function (_BS$Div2_16) {
  _inherits(TPageHeader_, _BS$Div2_16);

  function TPageHeader_(name, desc) {
    _classCallCheck(this, TPageHeader_);

    var _this35 = _possibleConstructorReturn(this, (TPageHeader_.__proto__ || Object.getPrototypeOf(TPageHeader_)).call(this, name || 'bs.PageHeader', desc));

    _this35._defaultProp.bsClass = 'page-header';
    return _this35;
  }

  _createClass(TPageHeader_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TPageHeader_.prototype.__proto__ || Object.getPrototypeOf(TPageHeader_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'page-header',
        className: 'rewgt-unit page-header'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TPageHeader_.prototype.__proto__ || Object.getPrototypeOf(TPageHeader_.prototype), 'getInitialState', this).call(this);

      if (!hasChildNode_(this.props.children)) utils.setChildren(this, null, React.createElement('h1', null));

      return state;
    }
  }]);

  return TPageHeader_;
}(BS.Div2_);

BS.PageHeader_ = TPageHeader_;
BS.PageHeader = new TPageHeader_();

BS.ListGroup_ = makeBsClass3_(BS.Div2_, 'ListGroup', 'list-group');
BS.ListGroup = new BS.ListGroup_();

var listgroupitem_klass_ = { active: true, disabled: true,
  'list-group-item-success': true, 'list-group-item-info': true,
  'list-group-item-warning': true, 'list-group-item-danger': true
};

var markeditem_padding_ = [0, null, 0, null];

function MakeListItemCls(TBase, sClsName) {
  var T = function (_TBase5) {
    _inherits(T, _TBase5);

    function T(name, desc) {
      _classCallCheck(this, T);

      var _this36 = _possibleConstructorReturn(this, (T.__proto__ || Object.getPrototypeOf(T)).call(this, name || 'bs.' + sClsName, desc));

      _this36._docUrl = bsDocUrl_;
      if (W.__design__) _this36._defaultProp['data-html.opt'] = 'edit';
      _this36._defaultProp.bsClass = 'list-group-item';
      _this36._defaultProp.bsStyle = '';
      if (sClsName == 'MarkedItem') _this36._defaultProp.padding = markeditem_padding_.slice(0);
      return _this36;
    }

    _createClass(T, [{
      key: '_getSchema',
      value: function _getSchema(self, iLevel) {
        iLevel = iLevel || 1200;
        var dSchema = _get(T.prototype.__proto__ || Object.getPrototypeOf(T.prototype), '_getSchema', this).call(this, self, iLevel + 200);

        dSchema.bsStyle = [iLevel + 1, 'string', ['', 'success', 'warning', 'danger', 'info']];
        dSchema.disabled = [iLevel + 2, 'string', boolPropmpt_];
        dSchema['data-checked'] = [iLevel + 3, 'string', boolPropmpt_];
        return dSchema;
      }
    }, {
      key: 'getDefaultProps',
      value: function getDefaultProps() {
        var props = _get(T.prototype.__proto__ || Object.getPrototypeOf(T.prototype), 'getDefaultProps', this).call(this);
        if (sClsName == 'MarkedItem') props.padding = markeditem_padding_.slice(0);
        if (W.__design__) props['data-html.opt'] = 'edit';
        return Object.assign(props, { 'childInline.': true, bsClass: 'list-group-item',
          className: 'rewgt-unit list-group-item', bsStyle: ''
        });
      }
    }, {
      key: 'getInitialState',
      value: function getInitialState() {
        var state = _get(T.prototype.__proto__ || Object.getPrototypeOf(T.prototype), 'getInitialState', this).call(this);

        this.defineDual(['bsStyle', 'disabled', 'data-checked'], renewKlass);
        if (sClsName == 'ListItem') {
          this.defineDual('header').defineDual('href', function (value, oldValue) {
            if (!value && typeof value == 'string') this.state.href = jsVoid_; // change '' to 'javascript:void(0)'
          });
          this.defineDual('id__', function (value, oldValue) {
            if (value <= 2) return;

            if (hasChildNode_(this.props.children)) {
              this.state['tagName.'] = 'div';
              return;
            }

            var jsx = [],
                sHeader = safeContent(this.state.header);
            if (this.state.href || sHeader) {
              this.state['tagName.'] = 'a';
              if (sHeader) jsx.push(React.createElement(
                'h4',
                { key: 'head', className: 'list-group-item-heading' },
                sHeader
              ));
              var sHtml = safeContent(this.state['html.']);
              jsx.push(React.createElement(
                'p',
                { key: 'txt', className: 'list-group-item-text' },
                sHtml
              ));
            } else this.state['tagName.'] = 'div';
            utils.setChildren(this, jsx);
          });
        }

        return state;

        function renewKlass(value, oldValue) {
          var sStyle = this.state.bsStyle;
          if (sStyle) sStyle = 'list-group-item-' + sStyle;

          var sCls = utils.setupKlass(this.state.klass, listgroupitem_klass_, sStyle, this.state.disabled && 'disabled', this.state['data-checked'] && 'active');
          this.duals.klass = sCls;
        }
      }
    }, {
      key: '$$onClick',
      value: function $$onClick(event) {
        if (W.__design__) event.preventDefault(); // avoid jump <a>
        if (this.$onClick) this.$onClick(event);
      }
    }]);

    return T;
  }(TBase);

  return T;
}

BS.MarkedItem_ = MakeListItemCls(BS.MarkedDiv_, 'MarkedItem');
BS.MarkedItem = new BS.MarkedItem_();

BS.ListItem_ = MakeListItemCls(BS.Div2_, 'ListItem');
BS.ListItem = new BS.ListItem_();

var table_klass_ = { table: true, 'table-responsive': true,
  'table-striped': true, 'table-bordered': true,
  'table-condensed': true, 'table-hover': true
};

var TTable_ = function (_BS$Div2_17) {
  _inherits(TTable_, _BS$Div2_17);

  function TTable_(name, desc) {
    _classCallCheck(this, TTable_);

    var _this37 = _possibleConstructorReturn(this, (TTable_.__proto__ || Object.getPrototypeOf(TTable_)).call(this, name || 'bs.Table', desc));

    _this37._defaultProp.bsClass = 'table';
    _this37._defaultProp.responsive = '';
    return _this37;
  }

  _createClass(TTable_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TTable_.prototype.__proto__ || Object.getPrototypeOf(TTable_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.striped = [iLevel + 1, 'string', boolPropmpt_];
      dSchema.bordered = [iLevel + 2, 'string', boolPropmpt_];
      dSchema.condensed = [iLevel + 3, 'string', boolPropmpt_];
      dSchema.hover = [iLevel + 4, 'string', boolPropmpt_];
      dSchema.responsive = [iLevel + 5, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TTable_.prototype.__proto__ || Object.getPrototypeOf(TTable_.prototype), 'getDefaultProps', this).call(this);
      props.bsClass = props['tagName.'] = 'table';
      props.responsive = '';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TTable_.prototype.__proto__ || Object.getPrototypeOf(TTable_.prototype), 'getInitialState', this).call(this);

      this.defineDual('responsive', function (value, oldValue) {
        this.state['tagName.'] = value ? 'div' : 'table';
        if (!value) utils.setChildren(this, null, null);
        renewKlass.call(this);
      });
      this.defineDual(['striped', 'bordered', 'condensed', 'hover'], renewKlass);

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;
        if (!this.state.responsive) return;

        var sCls = getTableKlass(this);
        utils.setChildren(this, null, React.createElement('table', { className: sCls }));
      });

      return state;

      function renewKlass(value, oldValue) {
        var sCls = this.state.responsive ? 'table-responsive' : getTableKlass(this);
        sCls = utils.setupKlass(this.state.klass, table_klass_, sCls);
        this.duals.klass = sCls;
      }

      function getTableKlass(comp) {
        return utils.klassNames('table', comp.state.striped && 'table-striped', comp.state.bordered && 'table-bordered', comp.state.condensed && 'table-condensed', comp.state.hover && 'table-hover');
      }
    }
  }]);

  return TTable_;
}(BS.Div2_);

BS.Table_ = TTable_;
BS.Table = new TTable_();

var TPanelHeader_ = function (_BS$Div2_18) {
  _inherits(TPanelHeader_, _BS$Div2_18);

  function TPanelHeader_(name, desc) {
    _classCallCheck(this, TPanelHeader_);

    var _this38 = _possibleConstructorReturn(this, (TPanelHeader_.__proto__ || Object.getPrototypeOf(TPanelHeader_)).call(this, name || 'bs.PanelHeader', desc));

    if (W.__design__) _this38._defaultProp['data-html.opt'] = 'edit';
    _this38._defaultProp.bsClass = 'panel-heading';
    return _this38;
  }

  _createClass(TPanelHeader_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TPanelHeader_.prototype.__proto__ || Object.getPrototypeOf(TPanelHeader_.prototype), 'getDefaultProps', this).call(this);
      if (W.__design__) props['data-html.opt'] = 'edit';
      return Object.assign(props, { bsClass: 'panel-heading',
        className: 'rewgt-unit panel-heading'
      });
    }
  }, {
    key: '$$onClick',
    value: function $$onClick(event) {
      if (this.isAccordion_) {
        var owner = this.parentOf(true);
        if (owner && owner.props.bsClass === 'panel') {
          var sKey = owner.duals.keyid + '';
          owner = owner.parentOf(true);
          if (owner && owner.props.bsClass === 'panel-group') {
            if (owner.props.accordion) {
              if (owner.duals.activeKey === sKey) sKey = '';
              owner.duals.activeKey = sKey;
            }
          }
        }
      }
      if (this.$onClick) this.$onClick(event);
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TPanelHeader_.prototype.__proto__ || Object.getPrototypeOf(TPanelHeader_.prototype), 'getInitialState', this).call(this);

      var owner = this.parentOf(true);
      if (owner && owner.props.bsClass === 'panel') {
        owner = owner.parentOf(true);
        if (owner && owner.props.bsClass === 'panel-group') {
          if (owner.props.accordion) this.isAccordion_ = true;
        }
      }

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;
        if (hasChildNode_(this.props.children)) return;

        var sTitle = safeContent(this.state['html.']);
        var jsx = this.isAccordion_ ? React.createElement(
          'a',
          { key: 'txt', style: { cursor: 'pointer' } },
          sTitle
        ) : React.createElement(
          'span',
          { key: 'txt' },
          sTitle
        );
        utils.setChildren(this, [jsx]);
      });

      return state;
    }
  }]);

  return TPanelHeader_;
}(BS.Div2_);

BS.PanelHeader_ = TPanelHeader_;
BS.PanelHeader = new TPanelHeader_();

BS.PanelFooter_ = makeBsClass3_(BS.Div2_, 'PanelFooter', 'panel-footer');
BS.PanelFooter = new BS.PanelFooter_();

BS.PanelBody_ = makeBsClass3_(BS.Div2_, 'PanelBody', 'panel-body');
BS.PanelBody = new BS.PanelBody_();

BS.PanelCollapse_ = MakeCollapseCls('PanelCollapse', 'panel-collapse');
BS.PanelCollapse = new BS.PanelCollapse_();

var panel_klass_ = { 'panel-default': true, 'panel-success': true,
  'panel-warning': true, 'panel-danger': true, 'panel-info': true,
  'panel-primary': true
};

var TPanel_ = function (_BS$Div2_19) {
  _inherits(TPanel_, _BS$Div2_19);

  function TPanel_(name, desc) {
    _classCallCheck(this, TPanel_);

    var _this39 = _possibleConstructorReturn(this, (TPanel_.__proto__ || Object.getPrototypeOf(TPanel_)).call(this, name || 'bs.Panel', desc));

    Object.assign(_this39._defaultProp, { bsClass: 'panel',
      bsStyle: 'default'
    });
    return _this39;
  }

  _createClass(TPanel_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TPanel_.prototype.__proto__ || Object.getPrototypeOf(TPanel_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.bsStyle = [iLevel + 1, 'string', ['default', 'success', 'warning', 'danger', 'info', 'primary']];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TPanel_.prototype.__proto__ || Object.getPrototypeOf(TPanel_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'panel',
        className: 'rewgt-unit panel', bsStyle: 'default'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TPanel_.prototype.__proto__ || Object.getPrototypeOf(TPanel_.prototype), 'getInitialState', this).call(this);
      this.defineDual('bsStyle', renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sStyle = 'panel-' + this.state.bsStyle;
        var sCls = utils.setupKlass(this.state.klass, panel_klass_, sStyle);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TPanel_;
}(BS.Div2_);

BS.Panel_ = TPanel_;
BS.Panel = new TPanel_();

var TPanelGroup_ = function (_BS$Div2_20) {
  _inherits(TPanelGroup_, _BS$Div2_20);

  function TPanelGroup_(name, desc) {
    _classCallCheck(this, TPanelGroup_);

    var _this40 = _possibleConstructorReturn(this, (TPanelGroup_.__proto__ || Object.getPrototypeOf(TPanelGroup_)).call(this, name || 'bs.PanelGroup', desc));

    Object.assign(_this40._defaultProp, { bsClass: 'panel-group',
      activeKey: ''
    });
    return _this40;
  }

  _createClass(TPanelGroup_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TPanelGroup_.prototype.__proto__ || Object.getPrototypeOf(TPanelGroup_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.activeKey = [iLevel + 1, 'string'];
      dSchema.accordion = [iLevel + 2, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TPanelGroup_.prototype.__proto__ || Object.getPrototypeOf(TPanelGroup_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'panel-group',
        className: 'rewgt-unit panel-group', activeKey: ''
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TPanelGroup_.prototype.__proto__ || Object.getPrototypeOf(TPanelGroup_.prototype), 'componentDidMount', this).call(this);

      this.listen('activeKey', function (value, oldValue) {
        this.selectPanel(value);
      }.bind(this));
      this.selectPanel(this.state.activeKey);
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TPanelGroup_.prototype.__proto__ || Object.getPrototypeOf(TPanelGroup_.prototype), 'getInitialState', this).call(this);

      this.selectPanel = function (sKey) {
        if (typeof sKey != 'string') sKey = '';
        utils.eachComponent(this, function (child) {
          if (child.props.bsClass == 'panel') setPanelActive(child, sKey && sKey == child.duals.keyid);
        });
      }.bind(this);

      this.defineDual('activeKey', null, '');

      return state;

      function setPanelActive(comp, toActive) {
        utils.eachComponent(comp, function (child) {
          if (child.props.role === 'collapsible') child.duals.expanded = boolToStr(toActive);
        });
      }
    }
  }]);

  return TPanelGroup_;
}(BS.Div2_);

BS.PanelGroup_ = TPanelGroup_;
BS.PanelGroup = new TPanelGroup_();

var well_klass_ = { 'well-lg': true, 'well-sm': true };

var TWell_ = function (_BS$Div2_21) {
  _inherits(TWell_, _BS$Div2_21);

  function TWell_(name, desc) {
    _classCallCheck(this, TWell_);

    var _this41 = _possibleConstructorReturn(this, (TWell_.__proto__ || Object.getPrototypeOf(TWell_)).call(this, name || 'bs.Well', desc));

    _this41._defaultProp.bsClass = 'well';
    return _this41;
  }

  _createClass(TWell_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TWell_.prototype.__proto__ || Object.getPrototypeOf(TWell_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.bsSize = [iLevel + 1, 'string', ['', 'large', 'small']];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TWell_.prototype.__proto__ || Object.getPrototypeOf(TWell_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'well',
        className: 'rewgt-unit well'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TWell_.prototype.__proto__ || Object.getPrototypeOf(TWell_.prototype), 'getInitialState', this).call(this);
      this.defineDual('bsSize', renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sSize = getSizeKlass_('well', this.state.bsSize);
        var sCls = utils.setupKlass(this.state.klass, well_klass_, sSize);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TWell_;
}(BS.Div2_);

BS.Well_ = TWell_;
BS.Well = new TWell_();

var formgroup_klass_ = { 'form-group-lg': true, 'form-group-sm': true,
  'has-feedback': true, 'has-success': true,
  'has-warning': true, 'has-error': true
};

var TFormGroup_ = function (_BS$Div2_22) {
  _inherits(TFormGroup_, _BS$Div2_22);

  function TFormGroup_(name, desc) {
    _classCallCheck(this, TFormGroup_);

    var _this42 = _possibleConstructorReturn(this, (TFormGroup_.__proto__ || Object.getPrototypeOf(TFormGroup_)).call(this, name || 'bs.FormGroup', desc));

    Object.assign(_this42._defaultProp, { bsClass: 'form-group', validation: '' });
    return _this42;
  }

  _createClass(TFormGroup_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TFormGroup_.prototype.__proto__ || Object.getPrototypeOf(TFormGroup_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.bsSize = [iLevel + 1, 'string', ['', 'large', 'small']];
      dSchema.validation = [iLevel + 2, 'string', ['', 'success', 'warning', 'error']];
      dSchema.controlId = [iLevel + 3, 'string'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TFormGroup_.prototype.__proto__ || Object.getPrototypeOf(TFormGroup_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'form-group',
        validation: '', className: 'rewgt-unit form-group'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TFormGroup_.prototype.__proto__ || Object.getPrototypeOf(TFormGroup_.prototype), 'getInitialState', this).call(this);

      this.defineDual(['bsSize', 'validation', 'controlId']);
      if (!this.props.controlId) state.controlId = newControlId_();

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var sSize = getSizeKlass_('form-group', this.state.bsSize);
        var sFeedback = '',
            sValid = this.state.validation || '';
        if (sValid) sValid = 'has-' + sValid;
        utils.eachElement(this, function (ele) {
          var bsCls = ele.props.bsClass;
          if (bsCls === 'form-control-feedback') sFeedback = 'has-feedback';else if (bsCls === 'col') {
            var bChild = ele.props.children;
            if (Array.isArray(bChild)) {
              bChild.forEach(function (ele2) {
                if (ele2 && ele2.props.bsClass === 'form-control-feedback') sFeedback = 'has-feedback';
              });
            }
          }
        });

        var sCls = utils.setupKlass(this.state.klass, formgroup_klass_, sSize, sFeedback, sValid);
        this.duals.klass = sCls;
      });

      return state;
    }
  }]);

  return TFormGroup_;
}(BS.Div2_);

BS.FormGroup_ = TFormGroup_;
BS.FormGroup = new TFormGroup_();

var TCtrlLabel_ = function (_T$Label_) {
  _inherits(TCtrlLabel_, _T$Label_);

  function TCtrlLabel_(name, desc) {
    _classCallCheck(this, TCtrlLabel_);

    var _this43 = _possibleConstructorReturn(this, (TCtrlLabel_.__proto__ || Object.getPrototypeOf(TCtrlLabel_)).call(this, name || 'bs.CtrlLabel', desc));

    _this43._docUrl = bsDocUrl_;
    _this43._defaultProp.bsClass = 'control-label';
    return _this43;
  }

  _createClass(TCtrlLabel_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TCtrlLabel_.prototype.__proto__ || Object.getPrototypeOf(TCtrlLabel_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'control-label',
        className: 'control-label'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TCtrlLabel_.prototype.__proto__ || Object.getPrototypeOf(TCtrlLabel_.prototype), 'getInitialState', this).call(this);

      var hasCol = false,
          owner = this.parentOf(true);
      if (owner && owner.props.bsClass == 'col') {
        hasCol = true;
        owner = owner.parentOf(true);
      }
      if (!this.props.htmlFor && owner) {
        var sId;
        if (owner && owner.props.bsClass == 'form-group' && (sId = owner.state.controlId)) this.defineDual('htmlFor', null, sId);
      }

      var newStyle = Object.assign({}, this.props.style),
          styChanged = false;
      if (hasCol) {
        if (!newStyle.padding) {
          if (!newStyle.paddingLeft) {
            newStyle.paddingLeft = '15px';
            styChanged = true;
          }
          if (!newStyle.paddingRight) {
            newStyle.paddingRight = '15px';
            styChanged = true;
          }
        }
        if (!newStyle.width) {
          newStyle.width = '100%';
          styChanged = true;
        }
      } else {
        if (!newStyle.lineHeight) {
          newStyle.lineHeight = '20px'; // fix bug of bootstrap 3.3.7
          styChanged = true;
        }
      }
      if (styChanged) this.duals.style = newStyle;

      return state;
    }
  }]);

  return TCtrlLabel_;
}(T.Label_);

BS.CtrlLabel_ = TCtrlLabel_;
BS.CtrlLabel = new TCtrlLabel_();

var formcontrol_klass_ = { 'input-lg': true, 'input-sm': true };

var TFormCtrl_ = function (_T$Input_) {
  _inherits(TFormCtrl_, _T$Input_);

  function TFormCtrl_(name, desc) {
    _classCallCheck(this, TFormCtrl_);

    var _this44 = _possibleConstructorReturn(this, (TFormCtrl_.__proto__ || Object.getPrototypeOf(TFormCtrl_)).call(this, name || 'bs.FormCtrl', desc));

    _this44._docUrl = bsDocUrl_;
    _this44._defaultProp.bsClass = 'form-control';
    return _this44;
  }

  _createClass(TFormCtrl_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TFormCtrl_.prototype.__proto__ || Object.getPrototypeOf(TFormCtrl_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.bsSize = [iLevel + 1, 'string', ['', 'large', 'small']];
      dSchema.multiple = [iLevel + 2, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TFormCtrl_.prototype.__proto__ || Object.getPrototypeOf(TFormCtrl_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'form-control',
        className: 'form-control' // default type='text'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TFormCtrl_.prototype.__proto__ || Object.getPrototypeOf(TFormCtrl_.prototype), 'getInitialState', this).call(this);

      if (!this.props.id) {
        var sId,
            owner = this.parentOf(true);
        if (owner && owner.props.bsClass == 'form-group' && (sId = owner.state.controlId)) this.defineDual('id', null, sId);
      }

      this.defineDual('bsSize', renewKlass);
      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var sType = this.state.type;
        if (sType === 'select') this.state['tagName.'] = 'select';else if (sType === 'textarea') this.state['tagName.'] = 'textarea';else this.state['tagName.'] = 'input';
      });

      return state;

      function renewKlass(value, oldValue) {
        var sCls = getSizeKlass_('input', this.state.bsSize);
        sCls = utils.setupKlass(this.state.klass, formcontrol_klass_, sCls);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TFormCtrl_;
}(T.Input_);

BS.FormCtrl_ = TFormCtrl_;
BS.FormCtrl = new TFormCtrl_();

BS.FormCtrlStatic_ = makeBsClass3_(BS.P_, 'FormCtrlStatic', 'form-control-static');
BS.FormCtrlStatic = new BS.FormCtrlStatic_();

var formfeedback_klass_ = { glyphicon: true, 'glyphicon-remove': true,
  'glyphicon-ok': true, 'glyphicon-warning-sign': true
};

function validationTag(s) {
  if (s === 'success') return 'glyphicon glyphicon-ok';else if (s === 'warning') return 'glyphicon glyphicon-warning-sign';else if (s === 'error') return 'glyphicon glyphicon-remove';else return '';
}

var TFormFeedback_ = function (_T$Span_) {
  _inherits(TFormFeedback_, _T$Span_);

  function TFormFeedback_(name, desc) {
    _classCallCheck(this, TFormFeedback_);

    var _this45 = _possibleConstructorReturn(this, (TFormFeedback_.__proto__ || Object.getPrototypeOf(TFormFeedback_)).call(this, name || 'bs.FormFeedback', desc));

    _this45._docUrl = bsDocUrl_;
    _this45._defaultProp.bsClass = 'form-control-feedback';
    return _this45;
  }

  _createClass(TFormFeedback_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TFormFeedback_.prototype.__proto__ || Object.getPrototypeOf(TFormFeedback_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.validation = [iLevel + 1, 'string', ['', 'success', 'warning', 'error']];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TFormFeedback_.prototype.__proto__ || Object.getPrototypeOf(TFormFeedback_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'form-control-feedback',
        className: 'form-control-feedback'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TFormFeedback_.prototype.__proto__ || Object.getPrototypeOf(TFormFeedback_.prototype), 'getInitialState', this).call(this);
      this.defineDual('validation', renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sValid;
        if (hasChildNode_(this.props.children)) // should prepare glyphicon in children
          sValid = '';else sValid = validationTag(this.state.validation);

        var sCls = utils.setupKlass(this.state.klass, formfeedback_klass_, sValid);
        this.duals.klass = sCls;
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TFormFeedback_.prototype.__proto__ || Object.getPrototypeOf(TFormFeedback_.prototype), 'componentDidMount', this).call(this);

      var owner = this.parentOf(true);
      if (owner) {
        if (owner.props.bsClass === 'col') {
          owner = owner.parentOf(true);
          if (!owner) return;
        }

        if (owner.props.bsClass === 'form-group') {
          owner.listen('validation', this, 'validation');
          this.duals.validation = owner.state.validation;
        }
      }
    }
  }]);

  return TFormFeedback_;
}(T.Span_);

BS.FormFeedback_ = TFormFeedback_;
BS.FormFeedback = new TFormFeedback_();

BS.HelpBlock_ = makeBsClass3_(T.Span_, 'HelpBlock', 'help-block', true);
BS.HelpBlock = new BS.HelpBlock_();

var checkbox_klass_ = { disabled: true, checkbox: true, 'checkbox-inline': true,
  radio: true, 'radio-inline': true
};

var TCheckbox_ = function (_T$Label_2) {
  _inherits(TCheckbox_, _T$Label_2);

  function TCheckbox_(name, desc) {
    _classCallCheck(this, TCheckbox_);

    var _this46 = _possibleConstructorReturn(this, (TCheckbox_.__proto__ || Object.getPrototypeOf(TCheckbox_)).call(this, name || 'bs.Checkbox', desc));

    _this46._docUrl = bsDocUrl_;
    if (W.__design__) _this46._defaultProp['data-html.opt'] = 'edit';
    _this46._defaultProp.bsClass = 'checkbox';
    _this46._defaultProp.block = '';
    return _this46;
  }

  _createClass(TCheckbox_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TCheckbox_.prototype.__proto__ || Object.getPrototypeOf(TCheckbox_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.block = [iLevel + 1, 'string', boolPropmpt_];
      dSchema.disabled = [iLevel + 2, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TCheckbox_.prototype.__proto__ || Object.getPrototypeOf(TCheckbox_.prototype), 'getDefaultProps', this).call(this);
      if (W.__design__) props['data-html.opt'] = 'edit';
      return Object.assign(props, { bsClass: 'checkbox', block: '' });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TCheckbox_.prototype.__proto__ || Object.getPrototypeOf(TCheckbox_.prototype), 'getInitialState', this).call(this);

      this.onCheckClick_ = function (event) {
        if (this.state.disabled) {
          event.stopPropagation();
          event.preventDefault();
          return;
        }
      }.bind(this);
      this.onCheckChange_ = function (event) {
        this.duals.checked = boolToStr(event.target.checked);
      }.bind(this);

      var initChecked = this.props.checked;
      if (initChecked === undefined) initChecked = this.props.defaultChecked;
      initChecked = boolToStr(initChecked);
      if (this.props.name) {
        // not under control
        this.defineDual('checked'); // default undefined
        if (initChecked) {
          setTimeout(function (self) {
            var node = self.getHtmlNode();
            var checkNode = node && node.querySelector('input');
            if (checkNode) {
              checkNode.checked = true;
              self.duals.checked = '1';
            }
          }, 300, this); // wait 300 ms to ensure input node ready
        }
      } else this.defineDual('checked', null, initChecked);

      this.defineDual(['block', 'disabled'], renewKlass);

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var underCtrl = !this.props.name;
        var isBlock = this.state.block;
        this.state['tagName.'] = isBlock ? 'div' : 'label';

        var jsx,
            sHtml = safeContent(this.state['html.']),
            sName = !underCtrl && this.state.name;
        var props = { type: this.props.bsClass,
          onClick: this.onCheckClick_,
          onChange: this.onCheckChange_
        };
        var props2 = { key: 'tit' };
        if (underCtrl) props.checked = this.state.checked;
        if (sName) props.name = sName;
        if (this.state.disabled) {
          props.readOnly = '1';
          props.disabled = '1';
          props2.style = { cursor: 'not-allowed' };
        } else {
          props.readOnly = '';
          props.disabled = '';
          props2.style = { cursor: '' };
        }
        if (isBlock) jsx = [React.createElement(
          'label',
          { key: 'chk' },
          React.createElement('input', props),
          sHtml
        )];else jsx = [React.createElement('input', _extends({ key: 'chk' }, props)), React.createElement(
          'span',
          props2,
          sHtml
        )];

        utils.setChildren(this, jsx);
      });

      var newStyle = undefined,
          oldStyle = this.props.style;
      if (oldStyle) {
        if (!oldStyle.lineHeight) {
          newStyle = Object.assign({}, oldStyle);
          newStyle.lineHeight = '20px';
        }
      } else newStyle = { lineHeight: '20px' };
      if (newStyle) this.duals.style = newStyle; // fix bug of bootstrap 3.3.7

      return state;

      function renewKlass(value, oldValue) {
        var isBlock = this.state.block,
            sType = this.props.bsClass;
        var sMainCls = isBlock ? sType : sType + '-inline';
        var sDisabled = isBlock && this.state.disabled && 'disabled';

        var sCls = utils.setupKlass(this.state.klass, checkbox_klass_, sMainCls, sDisabled);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TCheckbox_;
}(T.Label_);

BS.Checkbox_ = TCheckbox_;
BS.Checkbox = new TCheckbox_();

var TRadio_ = function (_TCheckbox_) {
  _inherits(TRadio_, _TCheckbox_);

  function TRadio_(name, desc) {
    _classCallCheck(this, TRadio_);

    var _this47 = _possibleConstructorReturn(this, (TRadio_.__proto__ || Object.getPrototypeOf(TRadio_)).call(this, name || 'bs.Radio', desc));

    _this47._defaultProp.bsClass = 'radio';
    return _this47;
  }

  _createClass(TRadio_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TRadio_.prototype.__proto__ || Object.getPrototypeOf(TRadio_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'radio' });
    }
  }]);

  return TRadio_;
}(TCheckbox_);

BS.Radio_ = TRadio_;
BS.Radio = new TRadio_();

var inputgroup_klass_ = { 'input-group-lg': true, 'input-group-sm': true };

var TInputGroup_ = function (_T$Span_2) {
  _inherits(TInputGroup_, _T$Span_2);

  function TInputGroup_(name, desc) {
    _classCallCheck(this, TInputGroup_);

    var _this48 = _possibleConstructorReturn(this, (TInputGroup_.__proto__ || Object.getPrototypeOf(TInputGroup_)).call(this, name || 'bs.InputGroup', desc));

    _this48._docUrl = bsDocUrl_;
    _this48._defaultProp.bsClass = 'input-group';
    return _this48;
  }

  _createClass(TInputGroup_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TInputGroup_.prototype.__proto__ || Object.getPrototypeOf(TInputGroup_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.bsSize = [iLevel + 1, 'string', ['', 'large', 'small']];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TInputGroup_.prototype.__proto__ || Object.getPrototypeOf(TInputGroup_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'input-group', className: 'input-group' });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TInputGroup_.prototype.__proto__ || Object.getPrototypeOf(TInputGroup_.prototype), 'getInitialState', this).call(this);
      this.defineDual('bsSize', renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sSize = getSizeKlass_('input-group', this.state.bsSize);
        var sCls = utils.setupKlass(this.state.klass, inputgroup_klass_, sSize);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TInputGroup_;
}(T.Span_);

BS.InputGroup_ = TInputGroup_;
BS.InputGroup = new TInputGroup_();

BS.InputGroupAddon_ = makeBsClass3_(T.Span_, 'InputGroupAddon', 'input-group-addon', true);
BS.InputGroupAddon = new BS.InputGroupAddon_();

BS.InputGroupBtn_ = makeBsClass3_(T.Span_, 'InputGroupBtn', 'input-group-btn', true);
BS.InputGroupBtn = new BS.InputGroupBtn_();

var TGlyphicon_ = function (_T$Span_3) {
  _inherits(TGlyphicon_, _T$Span_3);

  function TGlyphicon_(name, desc) {
    _classCallCheck(this, TGlyphicon_);

    var _this49 = _possibleConstructorReturn(this, (TGlyphicon_.__proto__ || Object.getPrototypeOf(TGlyphicon_)).call(this, name || 'bs.Glyphicon', desc));

    _this49._docUrl = bsDocUrl_;
    _this49._defaultProp.bsClass = 'glyphicon';
    return _this49;
  }

  _createClass(TGlyphicon_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TGlyphicon_.prototype.__proto__ || Object.getPrototypeOf(TGlyphicon_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.glyph = [iLevel + 1, 'string'];
      dSchema.itemSpace = [iLevel + 2, 'number'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TGlyphicon_.prototype.__proto__ || Object.getPrototypeOf(TGlyphicon_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'glyphicon', className: 'glyphicon' });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TGlyphicon_.prototype.__proto__ || Object.getPrototypeOf(TGlyphicon_.prototype), 'getInitialState', this).call(this);
      this.defineDual('glyph', renewKlass);
      this.defineDual('itemSpace', itemSpaceFn_);
      return state;

      function renewKlass(value, oldValue) {
        var sGlyph = this.state.glyph;
        if (sGlyph) sGlyph = 'glyphicon-' + sGlyph;

        var b = this.state.klass.split(/ +/),
            len = b.length;
        for (var i = len - 1; i >= 0; i--) {
          var s = b[i];
          if (s.indexOf('glyphicon-') == 0) b.splice(i, 1);
        }

        var sCls = utils.klassNames(b.join(' '), sGlyph);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TGlyphicon_;
}(T.Span_);

BS.Glyphicon_ = TGlyphicon_;
BS.Glyphicon = new TGlyphicon_();

var image_klass_ = { 'img-circle': true, 'img-rounded': true,
  'img-thumbnail': true, 'img-responsive': true
};

var TImage_ = function (_T$Img_) {
  _inherits(TImage_, _T$Img_);

  function TImage_(name, desc) {
    _classCallCheck(this, TImage_);

    var _this50 = _possibleConstructorReturn(this, (TImage_.__proto__ || Object.getPrototypeOf(TImage_)).call(this, name || 'bs.Image', desc));

    _this50._docUrl = bsDocUrl_;
    _this50._defaultProp.bsClass = 'img';
    return _this50;
  }

  _createClass(TImage_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TImage_.prototype.__proto__ || Object.getPrototypeOf(TImage_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.circle = [iLevel + 1, 'string', boolPropmpt_];
      dSchema.rounded = [iLevel + 2, 'string', boolPropmpt_];
      dSchema.thumbnail = [iLevel + 3, 'string', boolPropmpt_];
      dSchema.responsive = [iLevel + 4, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TImage_.prototype.__proto__ || Object.getPrototypeOf(TImage_.prototype), 'getDefaultProps', this).call(this);
      props.bsClass = 'img';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TImage_.prototype.__proto__ || Object.getPrototypeOf(TImage_.prototype), 'getInitialState', this).call(this);
      this.defineDual(['circle', 'rounded', 'thumbnail', 'responsive'], renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, image_klass_, this.state.circle && 'img-circle', this.state.rounded && 'img-rounded', this.state.thumbnail && 'img-thumbnail', this.state.responsive && 'img-responsive');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TImage_;
}(T.Img_);

BS.Image_ = TImage_;
BS.Image = new TImage_();

var TThumbnail_ = function (_BS$Div2_23) {
  _inherits(TThumbnail_, _BS$Div2_23);

  function TThumbnail_(name, desc) {
    _classCallCheck(this, TThumbnail_);

    var _this51 = _possibleConstructorReturn(this, (TThumbnail_.__proto__ || Object.getPrototypeOf(TThumbnail_)).call(this, name || 'bs.Thumbnail', desc));

    _this51._defaultProp.bsClass = 'thumbnail';
    return _this51;
  }

  _createClass(TThumbnail_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TThumbnail_.prototype.__proto__ || Object.getPrototypeOf(TThumbnail_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.src = [iLevel + 1, 'string'];
      dSchema.alt = [iLevel + 2, 'string'];
      dSchema.href = [iLevel + 3, 'string'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TThumbnail_.prototype.__proto__ || Object.getPrototypeOf(TThumbnail_.prototype), 'getDefaultProps', this).call(this);
      props.bsClass = 'thumbnail';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TThumbnail_.prototype.__proto__ || Object.getPrototypeOf(TThumbnail_.prototype), 'getInitialState', this).call(this);

      var imgOnErr = this.props.onError || this.onError;
      var imgOnLoad = this.props.onLoad || this.onLoad;
      this.imgOnErr_ = imgOnErr ? imgOnErr.bind(this) : null;
      this.imgOnLoad_ = imgOnLoad ? imgOnLoad.bind(this) : null;

      this.defineDual(['src', 'alt']);
      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var sSrc = this.state.src || '',
            sAlt = this.state.alt || '';
        var props = { key: 'img', src: sSrc };
        if (sAlt) props.alt = sAlt;
        if (this.imgOnLoad_) props.onLoad = this.imgOnLoad_;
        if (this.imgOnErr_) props.onError = this.imgOnErr_;

        var sCls = utils.clearKlass(this.state.klass, ['thumbnail']);
        if (hasChildNode_(this.props.children)) {
          this.state.klass = utils.klassNames(sCls, 'thumbnail');
          utils.setChildren(this, null, [React.createElement('img', props), React.createElement('div', { key: 'foo', className: 'caption' })]);
        } else {
          var sHref = this.state.href || jsVoid_;
          this.state.klass = sCls;
          utils.setChildren(this, [React.createElement(
            'a',
            { key: 'lnk', className: 'thumbnail', role: 'button', href: sHref },
            React.createElement('img', props)
          )], null);
        }
      });

      return state;
    }
  }]);

  return TThumbnail_;
}(BS.Div2_);

BS.Thumbnail_ = TThumbnail_;
BS.Thumbnail = new TThumbnail_();

var res_embed_klass_ = { 'embed-responsive-16by9': true, 'embed-responsive-4by3': true };

var TResponsiveEmbed_ = function (_BS$Div2_24) {
  _inherits(TResponsiveEmbed_, _BS$Div2_24);

  function TResponsiveEmbed_(name, desc) {
    _classCallCheck(this, TResponsiveEmbed_);

    var _this52 = _possibleConstructorReturn(this, (TResponsiveEmbed_.__proto__ || Object.getPrototypeOf(TResponsiveEmbed_)).call(this, name || 'bs.ResponsiveEmbed', desc));

    _this52._defaultProp.bsClass = 'embed-responsive';
    return _this52;
  }

  _createClass(TResponsiveEmbed_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TResponsiveEmbed_.prototype.__proto__ || Object.getPrototypeOf(TResponsiveEmbed_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.a16by9 = [iLevel + 1, 'string', boolPropmpt_];
      dSchema.a4by3 = [iLevel + 2, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TResponsiveEmbed_.prototype.__proto__ || Object.getPrototypeOf(TResponsiveEmbed_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'embed-responsive',
        className: 'rewgt-unit embed-responsive'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TResponsiveEmbed_.prototype.__proto__ || Object.getPrototypeOf(TResponsiveEmbed_.prototype), 'getInitialState', this).call(this);
      this.defineDual(['a16by9', 'a4by3'], renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        if (!this.state.a4by3) this.state.a16by9 = '1'; // a4by3 or a16by9 must have one

        var sCls = utils.setupKlass(this.state.klass, res_embed_klass_, this.state.a16by9 && 'embed-responsive-16by9', this.state.a4by3 && 'embed-responsive-4by3');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TResponsiveEmbed_;
}(BS.Div2_);

BS.ResponsiveEmbed_ = TResponsiveEmbed_;
BS.ResponsiveEmbed = new TResponsiveEmbed_();

var TCarousel_ = function (_BS$Div2_25) {
  _inherits(TCarousel_, _BS$Div2_25);

  function TCarousel_(name, desc) {
    _classCallCheck(this, TCarousel_);

    var _this53 = _possibleConstructorReturn(this, (TCarousel_.__proto__ || Object.getPrototypeOf(TCarousel_)).call(this, name || 'bs.Carousel', desc));

    Object.assign(_this53._defaultProp, { bsClass: 'carousel',
      indicators: '1', wrap: '1', activeIndex: 0,
      slide: '1', pauseHover: '1'
    });
    return _this53;
  }

  _createClass(TCarousel_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TCarousel_.prototype.__proto__ || Object.getPrototypeOf(TCarousel_.prototype), '_getSchema', this).call(this, self, iLevel + 200);

      dSchema.activeIndex = [iLevel + 1, 'number'];
      dSchema.wrap = [iLevel + 2, 'string', boolPropmpt_];
      dSchema.controls = [iLevel + 3, 'string', boolPropmpt_];
      dSchema.indicators = [iLevel + 4, 'string', boolPropmpt_];

      dSchema.slide = [iLevel + 5, 'string', boolPropmpt_];
      dSchema.pauseHover = [iLevel + 6, 'string', boolPropmpt_];
      dSchema.interval = [iLevel + 7, 'number'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TCarousel_.prototype.__proto__ || Object.getPrototypeOf(TCarousel_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'carousel',
        className: 'rewgt-unit carousel',
        controls: '1', indicators: '1', wrap: '1', activeIndex: 0,
        slide: '1', pauseHover: '1'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TCarousel_.prototype.__proto__ || Object.getPrototypeOf(TCarousel_.prototype), 'getInitialState', this).call(this);

      this.direction = 'left'; // turn page to left or right
      this.isPaused = true;this.timeout_ = 0;
      this.subKeys_ = [];this.subNumb_ = 0;

      this.onPrevClick_ = function (event) {
        if (W.__design__) return;
        this.goPrev(false);
      }.bind(this);

      this.onNextClick_ = function (event) {
        if (W.__design__) return;
        this.goNext(false);
      }.bind(this);

      state.controls = '1';state.indicators = '1';
      state.wrap = '1';state.pauseHover = '1';
      this.defineDual(['controls', 'indicators', 'activeIndex', 'wrap', 'pauseHover', 'interval']);

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var bChild = utils.eachElement(this),
            itemNum = bChild.length;
        if (!itemNum) return; // fatal error

        var hasCtrl = this.state.controls,
            hasInd = this.state.indicators;
        var isWrap = this.state.wrap;
        var activeIndex = parseInt(this.state.activeIndex) || 0,
            subKeys = [];
        var bItem = bChild.map(function (ele, idx) {
          subKeys.push(utils.keyOfElement(ele));
          if (!hasInd) return null;

          var props = { key: 'a' + idx, style: { margin: '0 3px' } };
          if (idx == activeIndex) props.className = 'active';
          return React.createElement('li', props);
        });
        this.subKeys_ = subKeys;
        this.subNumb_ = itemNum;

        var insertEle = [React.createElement('div', { key: 'foo', className: 'carousel-inner' })];
        if (hasInd) insertEle.unshift(React.createElement(
          'ol',
          { key: 'ind', className: 'carousel-indicators' },
          bItem
        ));
        if (isWrap || activeIndex > 0) {
          if (hasCtrl) {
            insertEle.push(React.createElement(
              'a',
              { key: 'left', className: 'carousel-control left', role: 'button', href: jsVoid_, onClick: this.onPrevClick_ },
              React.createElement('span', { className: 'glyphicon glyphicon-chevron-left' })
            ));
          }
        }
        if (isWrap || activeIndex < itemNum - 1) {
          if (hasCtrl) {
            insertEle.push(React.createElement(
              'a',
              { key: 'right', className: 'carousel-control right', role: 'button', href: jsVoid_, onClick: this.onNextClick_ },
              React.createElement('span', { className: 'glyphicon glyphicon-chevron-right' })
            ));
          }
        }

        utils.setChildren(this, null, insertEle);
      });

      return state;
    }
  }, {
    key: 'goPrev',
    value: function goPrev(exitPlay) {
      if (!this.isPaused) {
        this.pause();
        if (!exitPlay) {
          setTimeout(function (self) {
            self.play();
          }, 1000, this);
        }
      }

      this.direction = 'right';
      var idx = parseInt(this.state.activeIndex) || 0,
          iNum = this.subNumb_ || 1;
      if (idx > 0) this.duals.activeIndex = idx - 1;else this.duals.activeIndex = iNum - 1;
    }
  }, {
    key: 'goNext',
    value: function goNext(exitPlay) {
      if (!this.isPaused) {
        this.pause();
        if (!exitPlay) {
          setTimeout(function (self) {
            self.play();
          }, 1000, this);
        }
      }

      this.direction = 'left';
      var idx = (parseInt(this.state.activeIndex) || 0) + 1,
          iNum = this.subNumb_ || 1;
      if (idx < iNum) this.duals.activeIndex = idx;else this.duals.activeIndex = 0;
    }
  }, {
    key: 'stepNext_',
    value: function stepNext_() {
      var activeIndex = parseInt(this.state.activeIndex) || 0,
          iNextPg = activeIndex + 1;
      if (iNextPg >= this.subNumb_) {
        if (this.state.wrap) iNextPg = 0;else {
          this.pause();
          return; // playing has finished
        }
      }

      var interval = parseInt(this.state.interval) || 5000,
          tmout = this.timeout_;
      if (tmout) clearTimeout(tmout);
      this.timeout_ = setTimeout(function (self) {
        self.duals.activeIndex = iNextPg;
        self.timeout_ = setTimeout(function () {
          // continue running
          self.stepNext_();
        }, interval);
      }, interval, this);
    }
  }, {
    key: 'play',
    value: function play() {
      if (W.__design__) return;

      if (!this.isPaused) return;
      if (!this.props.slide) return;

      this.direction = 'left';
      this.isPaused = false;
      this.stepNext_();
    }
  }, {
    key: 'pause',
    value: function pause() {
      if (W.__design__) return;

      var tmout = this.timeout_;
      this.timeout_ = 0;
      if (tmout) clearTimeout(tmout);
      this.isPaused = true;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(TCarousel_.prototype.__proto__ || Object.getPrototypeOf(TCarousel_.prototype), 'componentDidMount', this).call(this);
      if (this.props.slide) this.play();
    }
  }, {
    key: '$$onMouseOver',
    value: function $$onMouseOver(event) {
      if (this.props.slide && this.state.pauseHover) {
        var tmout = this.timeout_;
        this.timeout_ = 0;
        if (tmout) clearTimeout(tmout);
      }

      if (this.$onMouseOver) this.$onMouseOver(event);
    }
  }, {
    key: '$$onMouseOut',
    value: function $$onMouseOut(event) {
      if (this.props.slide && this.state.pauseHover && !this.isPaused && !this.timeout_) {
        this.direction = 'left';
        this.stepNext_();
      }

      if (this.$onMouseOut) this.$onMouseOut(event);
    }
  }]);

  return TCarousel_;
}(BS.Div2_);

BS.Carousel_ = TCarousel_;
BS.Carousel = new TCarousel_();

var carouselitem_klass_ = { active: true, left: true, right: true, prev: true, next: true };

var TCarouselItem_ = function (_BS$Div2_26) {
  _inherits(TCarouselItem_, _BS$Div2_26);

  function TCarouselItem_(name, desc) {
    _classCallCheck(this, TCarouselItem_);

    var _this54 = _possibleConstructorReturn(this, (TCarouselItem_.__proto__ || Object.getPrototypeOf(TCarouselItem_)).call(this, name || 'bs.CarouselItem', desc));

    Object.assign(_this54._defaultProp, { bsClass: 'carousel-item',
      active: ''
    });
    return _this54;
  }

  _createClass(TCarouselItem_, [{
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TCarouselItem_.prototype.__proto__ || Object.getPrototypeOf(TCarouselItem_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'carousel-item',
        className: 'rewgt-unit item', active: ''
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TCarouselItem_.prototype.__proto__ || Object.getPrototypeOf(TCarouselItem_.prototype), 'getInitialState', this).call(this);

      var ownerComp = this.parentOf(true);
      if (!ownerComp || ownerComp.props.bsClass !== 'carousel') ownerComp = null;

      this.onActiveIndex = function (value, oldValue) {
        if (!ownerComp) return;

        var idx = parseInt(value) || 0,
            sKey = ownerComp.subKeys_[idx];
        if (!ownerComp.props.slide) {
          // no animate
          this.duals.active = boolToStr(sKey == this.duals.keyid);
          return;
        }

        var sDir = ownerComp.direction; // turn page to 'left' or 'right'
        var sOld = boolToStr(this.state.active),
            sNew = boolToStr(sKey == this.duals.keyid);
        if (sOld !== sNew) {
          var sCls = utils.clearKlass(this.state.klass, carouselitem_klass_);
          if (sNew) {
            // hidden --> show
            var sFrom = sDir == 'left' ? 'next' : 'prev';
            this.duals.klass = utils.klassNames(sCls, sFrom);
            setTimeout(function (self) {
              self.duals.klass = utils.klassNames(sCls, sFrom, sDir);
              nextStep(self, sNew);
            }, 100, this);
          } else {
            // show --> hidden
            setTimeout(function (self) {
              self.duals.klass = utils.klassNames(sCls, 'active', sDir);
              nextStep(self, sNew);
            }, 100, this);
          }
        }

        function nextStep(self, sNew) {
          setTimeout(function () {
            self.duals.active = sNew;
          }, 600);
        }
      }.bind(this);

      this.defineDual('active', renewKlass);
      this.defineDual('id__', function (value, oldValue) {
        if (oldValue == 1) {
          if (ownerComp) {
            ownerComp.listen('activeIndex', this); // owner's activeIndex --> this.onActiveIndex()

            var idx = parseInt(ownerComp.duals.activeIndex) || 0;
            var sKey = ownerComp.subKeys_[idx];
            this.duals.active = boolToStr(sKey == this.duals.keyid);
          }
        }
        // if (value <= 2) return;
      });

      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, carouselitem_klass_, this.state.active && 'active');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TCarouselItem_;
}(BS.Div2_);

BS.CarouselItem_ = TCarouselItem_;
BS.CarouselItem = new TCarouselItem_();

BS.CarouselCaption_ = makeBsClass3_(BS.Div2_, 'CarouselCaption', 'carousel-caption');
BS.CarouselCaption = new BS.CarouselCaption_();

BS.Media_ = makeBsClass3_(BS.Div2_, 'Media', 'media');
BS.Media = new BS.Media_();

var medialeft_klass_ = { 'media-top': true, 'media-middle': true, 'media-bottom': true };

var TMediaLeft_ = function (_BS$Div2_27) {
  _inherits(TMediaLeft_, _BS$Div2_27);

  function TMediaLeft_(name, desc) {
    _classCallCheck(this, TMediaLeft_);

    var _this55 = _possibleConstructorReturn(this, (TMediaLeft_.__proto__ || Object.getPrototypeOf(TMediaLeft_)).call(this, name || 'bs.MediaLeft', desc));

    _this55._defaultProp.bsClass = 'media-left';
    return _this55;
  }

  _createClass(TMediaLeft_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TMediaLeft_.prototype.__proto__ || Object.getPrototypeOf(TMediaLeft_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.alignTo = [iLevel + 1, 'string', ['top', 'middle', 'bottom']];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TMediaLeft_.prototype.__proto__ || Object.getPrototypeOf(TMediaLeft_.prototype), 'getDefaultProps', this).call(this);
      props.bsClass = 'media-left';
      props.className = 'rewgt-unit media-left';
      return props;
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TMediaLeft_.prototype.__proto__ || Object.getPrototypeOf(TMediaLeft_.prototype), 'getInitialState', this).call(this);
      this.defineDual('alignTo', renewKlass);
      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, medialeft_klass_, 'media-' + (this.state.alignTo || 'top'));
        this.duals.klass = sCls;
      }
    }
  }]);

  return TMediaLeft_;
}(BS.Div2_);

BS.MediaLeft_ = TMediaLeft_;
BS.MediaLeft = new TMediaLeft_();

BS.MediaRight_ = makeBsClass3_(TMediaLeft_, 'MediaRight', 'media-right');
BS.MediaRight = new BS.MediaRight_();

BS.MediaBody_ = makeBsClass3_(BS.Div2_, 'MediaBody', 'media-body');
BS.MediaBody = new BS.MediaBody_();

BS.MediaHeading_ = makeBsClass3_(BS.H4_, 'MediaHeading', 'media-heading');
BS.MediaHeading = new BS.MediaHeading_();

BS.MediaList_ = makeBsClass3_(BS.Ul_, 'MediaList', 'media-list');
BS.MediaList = new BS.MediaList_();

BS.MediaItem_ = makeBsClass3_(BS.Li_, 'MediaItem', 'media');
BS.MediaItem = new BS.MediaItem_();

var label_klass_ = { 'label-default': true, 'label-success': true,
  'label-warning': true, 'label-danger': true, 'label-info': true,
  'label-primary': true
};

var TLabel_ = function (_T$Span_4) {
  _inherits(TLabel_, _T$Span_4);

  function TLabel_(name, desc) {
    _classCallCheck(this, TLabel_);

    var _this56 = _possibleConstructorReturn(this, (TLabel_.__proto__ || Object.getPrototypeOf(TLabel_)).call(this, name || 'bs.Label', desc));

    _this56._docUrl = bsDocUrl_;
    _this56._defaultProp.bsClass = 'label';
    _this56._defaultProp.bsStyle = 'default';
    return _this56;
  }

  _createClass(TLabel_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TLabel_.prototype.__proto__ || Object.getPrototypeOf(TLabel_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.bsStyle = [iLevel + 1, 'string', ['default', 'success', 'warning', 'danger', 'info', 'primary']];
      dSchema.itemSpace = [iLevel + 2, 'number'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TLabel_.prototype.__proto__ || Object.getPrototypeOf(TLabel_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'label',
        className: 'label', bsStyle: 'default'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TLabel_.prototype.__proto__ || Object.getPrototypeOf(TLabel_.prototype), 'getInitialState', this).call(this);
      this.defineDual('bsStyle', renewKlass);
      this.defineDual('itemSpace', itemSpaceFn_);
      return state;

      function renewKlass(value, oldValue) {
        var sStyle = 'label-' + (this.state.bsStyle || 'default');
        var sCls = utils.setupKlass(this.state.klass, label_klass_, sStyle);
        this.duals.klass = sCls;
      }
    }
  }]);

  return TLabel_;
}(T.Span_);

BS.Label_ = TLabel_;
BS.Label = new TLabel_();

var TBadge_ = function (_T$Span_5) {
  _inherits(TBadge_, _T$Span_5);

  function TBadge_(name, desc) {
    _classCallCheck(this, TBadge_);

    var _this57 = _possibleConstructorReturn(this, (TBadge_.__proto__ || Object.getPrototypeOf(TBadge_)).call(this, name || 'bs.Badge', desc));

    _this57._docUrl = bsDocUrl_;
    _this57._defaultProp.bsClass = 'badge';
    return _this57;
  }

  _createClass(TBadge_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TBadge_.prototype.__proto__ || Object.getPrototypeOf(TBadge_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.pullRight = [iLevel + 1, 'string', boolPropmpt_];
      dSchema.itemSpace = [iLevel + 2, 'number'];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TBadge_.prototype.__proto__ || Object.getPrototypeOf(TBadge_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'badge',
        className: 'badge'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TBadge_.prototype.__proto__ || Object.getPrototypeOf(TBadge_.prototype), 'getInitialState', this).call(this);
      this.defineDual('pullRight', renewKlass);
      this.defineDual('itemSpace', itemSpaceFn_);
      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, ['pull-right'], this.state.pullRight && 'pull-right');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TBadge_;
}(T.Span_);

BS.Badge_ = TBadge_;
BS.Badge = new TBadge_();

var alert_klass_ = { 'alert-success': true, 'alert-warning': true,
  'alert-danger': true, 'alert-info': true, 'alert-dismissable': true
};

var TAlert_ = function (_BS$Div2_28) {
  _inherits(TAlert_, _BS$Div2_28);

  function TAlert_(name, desc) {
    _classCallCheck(this, TAlert_);

    var _this58 = _possibleConstructorReturn(this, (TAlert_.__proto__ || Object.getPrototypeOf(TAlert_)).call(this, name || 'bs.Alert', desc));

    Object.assign(_this58._defaultProp, { bsClass: 'alert', bsStyle: 'info' });
    return _this58;
  }

  _createClass(TAlert_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TAlert_.prototype.__proto__ || Object.getPrototypeOf(TAlert_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.bsStyle = [iLevel + 1, 'string', ['success', 'warning', 'danger', 'info']];
      dSchema.dismissable = [iLevel + 2, 'string', boolPropmpt_];
      dSchema.dismissed = [iLevel + 3, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TAlert_.prototype.__proto__ || Object.getPrototypeOf(TAlert_.prototype), 'getDefaultProps', this).call(this);
      return Object.assign(props, { bsClass: 'alert',
        className: 'rewgt-unit alert', bsStyle: 'info'
      });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TAlert_.prototype.__proto__ || Object.getPrototypeOf(TAlert_.prototype), 'getInitialState', this).call(this);

      this.defineDual('role').defineDual('dismissable', renewKlass);
      this.defineDual('bsStyle', function (value, oldValue) {
        this.duals.role = value || 'info';
        renewKlass.call(this);
      });

      this.defineDual('dismissed', function (value, oldValue) {
        this.duals.style = { display: value ? 'none' : '' };
      });
      this.closeClick_ = function (event) {
        this.duals.dismissed = '1';
      }.bind(this);
      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;

        var insertEle = [React.createElement('div', { key: 'foo' })];
        if (this.state.dismissable) insertEle.unshift(React.createElement(
          'div',
          { key: 'btn' },
          React.createElement(
            'button',
            { className: 'close', type: 'button', onClick: this.closeClick_ },
            'x'
          )
        ));
        utils.setChildren(this, null, insertEle);
      });

      return state;

      function renewKlass(value, oldValue) {
        var sCls = utils.setupKlass(this.state.klass, alert_klass_, 'alert-' + (this.state.bsStyle || 'info'), this.state.dismissable && 'alert-dismissable');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TAlert_;
}(BS.Div2_);

BS.Alert_ = TAlert_;
BS.Alert = new TAlert_();

BS.Progress_ = makeBsClass3_(BS.Div2_, 'Progress', 'progress');
BS.Progress = new BS.Progress_();

var progressbar_klass_ = { progress: true, active: true, 'progress-bar': true,
  'progress-bar-success': true, 'progress-bar-warning': true,
  'progress-bar-danger': true, 'progress-bar-info': true,
  'progress-bar-striped': true
};

var TProgressBar_ = function (_BS$Div2_29) {
  _inherits(TProgressBar_, _BS$Div2_29);

  function TProgressBar_(name, desc) {
    _classCallCheck(this, TProgressBar_);

    var _this59 = _possibleConstructorReturn(this, (TProgressBar_.__proto__ || Object.getPrototypeOf(TProgressBar_)).call(this, name || 'bs.ProgressBar', desc));

    if (W.__design__) _this59._defaultProp['data-html.opt'] = 'edit';
    Object.assign(_this59._defaultProp, { bsClass: 'progress-bar', bsStyle: '' });
    return _this59;
  }

  _createClass(TProgressBar_, [{
    key: '_getSchema',
    value: function _getSchema(self, iLevel) {
      iLevel = iLevel || 1200;
      var dSchema = _get(TProgressBar_.prototype.__proto__ || Object.getPrototypeOf(TProgressBar_.prototype), '_getSchema', this).call(this, self, iLevel + 200);
      dSchema.now = [iLevel + 1, 'number'];
      dSchema.min = [iLevel + 2, 'number'];
      dSchema.max = [iLevel + 3, 'number'];
      dSchema.bsStyle = [iLevel + 4, 'string', ['', 'success', 'warning', 'danger', 'info']];
      dSchema.striped = [iLevel + 5, 'string', boolPropmpt_];
      dSchema.active = [iLevel + 6, 'string', boolPropmpt_];
      return dSchema;
    }
  }, {
    key: 'getDefaultProps',
    value: function getDefaultProps() {
      var props = _get(TProgressBar_.prototype.__proto__ || Object.getPrototypeOf(TProgressBar_.prototype), 'getDefaultProps', this).call(this);
      if (W.__design__) props['data-html.opt'] = 'edit';
      return Object.assign(props, { bsClass: 'progress-bar', bsStyle: '' });
    }
  }, {
    key: 'getInitialState',
    value: function getInitialState() {
      var state = _get(TProgressBar_.prototype.__proto__ || Object.getPrototypeOf(TProgressBar_.prototype), 'getInitialState', this).call(this);

      this.stacked_ = false;
      var ownerComp = this.parentOf(true);
      if (ownerComp && ownerComp.props.bsClass == 'progress') {
        this.defineDual('role', null, 'progressbar');
        this.stacked_ = true;
      }

      this.defineDual(['bsStyle', 'striped', 'active'], renewKlass);

      this.defineDual(['now', 'min', 'max'], function (value, oldValue) {
        if (this.stacked_) this.duals.width = getPercent(this) / 100;
      });

      this.defineDual('id__', function (value, oldValue) {
        if (value <= 2) return;
        if (this.stacked_) return;

        var sCls = this.state.bsStyle,
            striped = this.state.striped;
        sCls = utils.klassNames('progress-bar', sCls && 'progress-bar-' + sCls, striped && 'progress-bar-striped', striped && this.state.active && 'active');

        var sTitle = safeContent(this.state['html.']);
        var dStyle = { width: getPercent(this) + '%' };
        var props = { key: 'ind', role: 'progressbar', style: dStyle, className: sCls };
        utils.setChildren(this, [React.createElement(
          'div',
          props,
          sTitle
        )]);
      });

      return state;

      function getPercent(self) {
        var iNow = parseFloat(self.state.now);
        var iMin = parseFloat(self.state.min);
        var iMax = parseFloat(self.state.max);

        if (isNaN(iMin)) iMin = 0;
        if (isNaN(iMax)) iMax = 100;
        if (iMax <= iMin) return 0;

        if (isNaN(iNow)) iNow = 0;
        iNow = Math.min(iMax, Math.max(iMin, iNow));
        return Math.floor((iNow - iMin) / (iMax - iMin) * 1000) / 10;
      }

      function renewKlass(value, oldValue) {
        var sCls,
            sCls0 = utils.clearKlass(this.state.klass, progressbar_klass_);
        if (this.stacked_) {
          var striped = this.state.striped;
          sCls = this.state.bsStyle;
          sCls = utils.klassNames(sCls0, 'progress-bar', sCls && 'progress-bar-' + sCls, striped && 'progress-bar-striped', striped && this.state.active && 'active');
        } else sCls = utils.klassNames(sCls0, 'progress');
        this.duals.klass = sCls;
      }
    }
  }]);

  return TProgressBar_;
}(BS.Div2_);

BS.ProgressBar_ = TProgressBar_;
BS.ProgressBar = new TProgressBar_();

},{"react":198,"react-dom":8,"shadow-widget":199}],204:[function(require,module,exports){
// index_dev.js
// for dev package of shadow-widget, released with react & react-dom & shadow-widget
// package by: browserify src/index_dev.js -o bundle.js -t [ babelify --compact false --presets [ es2015 react ] ]

'use strict';

var useBrowserify = false,
    useWebpack = false;
var reactRequire_ = arguments[3],
    reactModules_ = arguments[4],
    reactExport_ = arguments[5];
if (typeof reactRequire_ == 'function' && reactModules_) useBrowserify = true;else if (typeof __webpack_require__ != 'undefined' && __webpack_require__.c) useWebpack = true;

var React, ReactDOM, W;
if (useBrowserify) {
  try {
    React = require('react');
  } catch (e) {
    if (React = window.React) reactExport_['react'] = { exports: React };
  }
  try {
    ReactDOM = require('react-dom');
  } catch (e) {
    if (ReactDOM = window.ReactDOM) reactExport_['react-dom'] = { exports: ReactDOM };
  }
  try {
    W = require('shadow-widget');
  } catch (e) {
    if (W = window.W) reactExport_['shadow-widget'] = { exports: W };
  }
} else if (useWebpack) {
  React = require('react');
  ReactDOM = require('react-dom');
  W = require('shadow-widget');
} else console.log('fatal error: unknown package tool!');

var bootstrap = require('./bootstrap');

var exportModules = {
  react: React,
  'react-dom': ReactDOM,
  'shadow-widget': W
  // bootstrap: bootstrap,   // nothing to export, shared by T.bootstrap.xxx
};

if (useBrowserify) {
  Object.keys(exportModules).forEach(function (sName) {
    reactExport_[sName] = { exports: exportModules[sName] };
  });

  // regist pseudo module, module ID is fixed to 9999
  reactModules_[9999] = [W.$utils.loadingEntry, reactModules_[1][1]];
  setTimeout(function () {
    if (!W.$main.isStart) {
      W.$main.isStart = true;
      reactRequire_(reactModules_, reactExport_, [9999]); // load pseudo module
    }
  }, 300); // delay, wait main modules ready and let window initial event run first
} else if (useWebpack) {
  // regist pseudo module, module ID is fixed to 9999
  var _module = { exports: {}, id: 9999, loaded: true };
  __webpack_require__.c[9999] = _module;

  setTimeout(function () {
    if (!W.$main.isStart) {
      W.$main.isStart = true;
      W.$utils.loadingEntry(function (nameOrId) {
        // wrap require()
        if (typeof nameOrId == 'number') return __webpack_require__(nameOrId); // such as require(1), only used when debugging
        else {
            var ret = exportModules[nameOrId];
            if (!ret) console.log('can not find module: ' + nameOrId);
            return ret;
          }
      }, _module, _module.exports);
    }
  }, 300);
}

},{"./bootstrap":203,"react":198,"react-dom":8,"shadow-widget":199}]},{},[204]);
